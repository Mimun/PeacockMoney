<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet"
    href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css">
</head>

<body>
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <div class="container" style="max-width: 100%;">
        <div class="row">
          <!-- payment slip col -->
          <div class="col-2">
            <div class="payment-slip-container">
              <h3>Paymentslip</h3>
              <div class="form-group">
                <label>So tien</label>
                <input type="number" class="form-control" id="paymentSlip">
              </div>
              <button class="btn btn-sm btn-primary" id="btn-payment-slip">Add</button>
            </div>
            <div class="payment-slip-table-container">
              <table class="table table-hover table-responsive">
                <thead>
                  <tr>
                    <th id="paymentSlip">So tien</th>
                    <th id="addedDate">Ngay nap</th>
                  </tr>
                </thead>
                <tbody>

                </tbody>
              </table>
            </div>
          </div>

          <!-- penalty col -->
          <div class="col-3">
            <div class="penalty-rule-container">
              <h3>Penalty rule</h3>
              <div class="form-group form-inline is-filled" id="policy">
                <label>Thoi gian qua han</label>
                <input type="number" class="form-control" id="from" placeholder="From...">
                <input type="number" class="form-control" id="to" placeholder="To...">
              </div>
              <div class="form-group">
                <label class="bmd-label-floating">Kieu phat</label>
                <select class="form-control" id="policyType">
                  <option value="static">Static</option>
                  <option value="dynamic">Dynamic</option>
                </select>
              </div>
              <div class="form-group">
                <label class="bmd-label-floating">Phi phat</label>
                <input type="text" class="form-control" id="penaltyRate">
              </div>
              <div class="form-group form-inline is-filled" id="original-debt">
                <label>No goc</label>
                <input type="number" class="form-control" id="debtFrom" placeholder="From...">
                <input type="number" class="form-control" id="debtTo" placeholder="To...">
              </div>
              <button class="btn btn-sm btn-primary" id="btn-add-rule">Add rule</button>
            </div>
            <div class="penalty-rule-table-container">
              <table class="table table-hover table-responsive">
                <thead>
                  <tr>
                    <th scope="col" class="from to">Thoi gian qua han</th>
                    <th scope="col" class="penaltyRate">Phi phat</th>
                    <th scope="col" class="debtFrom debtTo">No goc</th>
                  </tr>
                </thead>
                <tbody>

                </tbody>
              </table>
            </div>
          </div>

          <div class="col period-table-container">
            <label for="real-date">Thoi gian thuc</label>
            <input type="date" id="real-date" class="form-control">
            <button class="btn btn-sm btn-primary" id="btn-simulation">Start simulation</button>
            <button class="btn btn-sm btn-secondary" id="btn-pause">Pause</button>

            <p id="real-date-counter" style="display: none;">Date counter: <span></span></p>
            <table class="table table-hover table-responsive">
              <thead>
                <tr>
                  <th scope="col" id="period">No</th>
                  <th scope="col" id="redemptionDate">Date</th>
                  <th scope="col" id="redemption">Redemption</th>
                  <th scope="col" id="totalPayment">Total(Redemption+Penalty)</th>
                  <th scope="col" id="payed">Payed</th>
                  <th scope="col" id="remain">Remain</th>
                  <th scope="col" id="periodStatus">Status</th>
                  <th scope="col" id="counter">Days pass</th>

                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>

        </div>
        <div class="row">
          <div class="history-container">
            <table class="table table-hover table-responsive">
              <thead>
                <tr>
                  <th scope="col" id="period">No</th>
                  <th scope="col" id="payed">Payed</th>
                  <th scope="col" id="remain">Remain</th>
                  <th scope="col" id="redemptionDate">Date</th>
                  <th scope="col" id="periodStatus">Status</th>


                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
  <script src="https://unpkg.com/popper.js@1.12.6/dist/umd/popper.js"></script>
  <script src="https://unpkg.com/bootstrap-material-design@4.1.1/dist/js/bootstrap-material-design.js"></script>
  <script>$(document).ready(function () { $('body').bootstrapMaterialDesign(); });</script>

  <!-- common script -->
  <script>
    var ruleArray = [
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "5",
        "penaltyRate": "0.1",
        "policyType": "dynamic1",
        "to": "",
      },

    ]

    var ruleArray2 = [
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "5",
        "penaltyRate": "100000",
        "policyType": "static",
        "to": "10",
      },
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "10",
        "penaltyRate": "200000",
        "policyType": "static",
        "to": "15",
      },
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "15",
        "penaltyRate": "300000",
        "policyType": "static",
        "to": "30",
      },
      {
        "debtFrom": "0",
        "debtTo": "20000000",
        "from": "30",
        "penaltyRate": "500000",
        "policyType": "static",
        "to": "",
      }
    ]

    var ruleArray3 = [
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "5",
        "penaltyRate": "100000",
        "policyType": "static",
        "to": "10",
      },
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "10",
        "penaltyRate": "200000",
        "policyType": "static",
        "to": "15",
      },
      {
        "debtFrom": "",
        "debtTo": "",
        "from": "15",
        "penaltyRate": "300000",
        "policyType": "static",
        "to": "30",
      },
      {
        "debtFrom": "20000000",
        "debtTo": "",
        "from": "30",
        "penaltyRate": "3",
        "policyType": "dynamic2",
        "to": "",
      }
    ]

    var periodArray = [
      { period: 0, redemptionDate: '2020-10-10', redemption: 6000000, totalPayment: 6000000, payed: 0, remain: 6000000, periodStatus: false },
      { period: 1, redemptionDate: '2020-11-10', redemption: 6000000, totalPayment: 6000000, payed: 0, remain: 6000000, periodStatus: false },
      { period: 2, redemptionDate: '2020-12-10', redemption: 6000000, totalPayment: 6000000, payed: 0, remain: 6000000, periodStatus: false },
      { period: 3, redemptionDate: '2020-01-10', redemption: 6000000, totalPayment: 6000000, payed: 0, remain: 6000000, periodStatus: false },
      { period: 4, redemptionDate: '2020-02-10', redemption: 6000000, totalPayment: 6000000, payed: 0, remain: 6000000, periodStatus: false },

    ]

    var ruleArrayTest = []

    const oneDay = 24 * 60 * 60 * 1000;

    const formatDate = (date) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      // return [year, month, day].join('-');
      return [day, month, year].join('-');

    }


    // display payment slip
    const displayTable = (paymentSlipObj, elementName) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`div.${elementName} table thead th`).forEach((element, index) => {
        var th = document.createElement('th')
        if (paymentSlipObj[element.id] !== undefined) {
          th.innerHTML = element.id === 'addedDate' ? formatDate(paymentSlipObj[element.id]) : paymentSlipObj[element.id]
        }
        th.id = element.id
        tr.id = paymentSlipObj.period
        tr.appendChild(th)
      })
      document.querySelector(`div.${elementName} tbody`).appendChild(tr)
    }
  </script>

  <!-- script for penalty rule -->
  <script>
    const displayRule = (ruleObj) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`div.penalty-rule-table-container table thead th`).forEach(element => {
        var th = document.createElement('th')
        var classListArray = []
        for (var i = 0; i < element.classList.length; i++) {
          var prop = element.classList.item(i)
          if (prop === 'to' && ruleObj[prop] === '') {
            classListArray.push('Infinity')

          } else {
            classListArray.push(ruleObj[element.classList.item(i)])
          }
        }
        th.innerHTML = classListArray.join('-')
        tr.appendChild(th)
      })
      document.querySelector('div.penalty-rule-table-container tbody').appendChild(tr)
    }

    document.querySelector('button#btn-add-rule').addEventListener('click', (event) => {
      var lastRule = ruleArrayTest[ruleArrayTest.length - 1]
      if (lastRule && lastRule.to === '') {
        window.alert("You cannot add more rules because last rule's time stamp is to infinity!")
      } else {
        var ruleObj = {}
        document.querySelectorAll('div.penalty-rule-container input,select').forEach(element => {
          ruleObj[element.id] = element.value
        })
        ruleArrayTest.push(ruleObj)
        console.log('rule obj: ', ruleObj)
        document.querySelector('input#from').value = ruleObj.to
        document.querySelector('input#to').value = ''
        document.querySelector('input#from').setAttribute('disabled', ruleObj.to === '' ? false : true)
        displayRule(ruleObj)
      }

    })

    // display rule if rule array is not empty
    if (ruleArray2.length !== 0) {
      ruleArray2.forEach(rule => {
        displayRule(rule)
        document.querySelector('button#btn-add-rule').setAttribute('disabled', true)
      })
    } else {
      document.querySelector('button#btn-add-rule').removeAttribute('disabled')

    }

  </script>

  <!-- script for loan package -->
  <script>
    var record = null
    var period = -1
    var isPause = false
    const getDaysBetween = (d1, d2) => {
      let date1 = new Date(d1)
      let date2 = new Date(d2)
      var oneDay = 1000 * 60 * 60 * 24
      var msDifference = date1.getTime() - date2.getTime()
      var daysDifference = Math.abs(msDifference / oneDay)
      return daysDifference
    }

    const getDaysInMonth = (month, year) => {
      return new Date(year, month + 1, 0).getDate()
    }

    const getRule = (ruleArray, dateComparision, originalValue) => {
      var rule = ruleArray.filter(rule => {
        var debtFrom = parseFloat(rule.debtFrom !== '' ? rule.debtFrom : 0)
        var debtTo = parseInt(rule.debtTo !== '' ? rule.debtTo : 0)
        if (debtTo !== 0) {
          return dateComparision === parseInt(rule.from) && originalValue <= debtTo
        } else if (debtFrom !== 0) {
          return dateComparision === parseInt(rule.from) && originalValue > debtFrom
        } else {
          return dateComparision === parseInt(rule.from)
        }
      })
      return rule[0]
    }

    class Record {
      constructor() {
        this.paymentSlip = []
        this.periodRecords = []
        this.startDate = new Date(Date.now())
        this.ages = 0
        this.overdue = 0
        this.balance = 0
      }

      updatePaymentRecord(period, obj) {
        this.periodRecords[period] = obj
      }

      updateBalance(amount) {
        this.balance += amount
      }

      payedNotDonePeriod(amount, payedDate, notDonePeriodArray) {
        this.balance += amount
        var i = 0
        const recursive = (balance, payedDate, notDonePeriod, record) => {
          if (balance > 0) {
            var updateObj = notDonePeriod
            console.log('update obj: ', updateObj)
            // enough money for total payment of that period
            var payment = balance <= updateObj.remain ? balance : updateObj.remain
            updateObj.payed = updateObj.payed + payment
            updateObj.remain = updateObj.remain - payment
            balance = balance - payment
            if (updateObj.remain === 0) {
              updateObj.periodStatus = true
              updateObj.stopCounting()
              updateObj.updatePeriodTable('period-table-container', updateObj.period, 'periodStatus', updateObj.periodStatus)

            }
            updateObj.paymentRecords.push({
              payed: payment,
              date: payedDate
            })
            record.updatePaymentRecord(updateObj.period, updateObj)
            updateObj.updatePeriodTable('period-table-container', updateObj.period, 'payed', updateObj.payed)
            updateObj.updatePeriodTable('period-table-container', updateObj.period, 'remain', updateObj.remain)
            updateObj.updateHistoryPayment('history-container')

            console.log('record after paying: ', record)
            i++
            if (notDonePeriodArray[i]) {
              return recursive(balance, payedDate, notDonePeriodArray[i], record)

            } else {
              return balance
            }
          } else {
            return balance
          }
        }
        var balance = recursive(this.balance, payedDate, notDonePeriodArray[i], this)
        this.balance = balance

      }

      pauseCounting(period) {
        if (this.periodRecords[period]) {
          this.periodRecords[period].pauseCounting()
        }
      }

    }

    class PeriodRecord {
      // period status: is done or not
      constructor(record, realLifeDate, redemptionDate, periodEndDate, redemption, periodStatus, period, ruleArray, originalValue) {
        this.realLifeDate = new Date(realLifeDate)
        this.daysBetween = 0
        this.originalValue = originalValue

        this.ruleArray = ruleArray
        this.appliedRule = null

        this.period = period
        this.periodStatus = periodStatus
        this.penaltyRecord = []
        this.paymentRecords = []
        this.redemptionDate = new Date(redemptionDate)
        this.periodEndDate = periodEndDate
        this.redemption = redemption
        this.totalPayment = this.redemption
        this.payed = 0
        this.remain = this.redemption
        this.isPause = false
        this.record = record
        this.countInterval = () => { }
      }

      count(days) {
        // 5 seconds = 1 day
        this.countInterval = setInterval(() => {
          if (!this.isPause) {
            // calculate days between real life date and redemption date
            this.realLifeDate.setDate(this.realLifeDate.getDate() + 1)
            console.log('real life date in record: ', this.realLifeDate)
            this.calculateDaysBetween()
            this.updatePeriodTable('period-table-container', this.period, 'counter', this.daysBetween)
            // check rule
            this.checkRule()
            console.log(`days between of period ${this.period}: ${this.daysBetween}\n<--------------->`)
            if (this.appliedRule) {
              switch (this.appliedRule.policyType) {
                case ('static'):
                  this.applyStaticRule(this.appliedRule)
                  this.appliedRule = null
                  break
                // dynamic 1: based on time
                case ('dynamic1'):
                  this.applyDynamic1Rule(this.appliedRule)
                  break
                // dynamic 2: based on the amount of money that is payed late
                case ('dynamic2'):
                  this.applyDynamic2Rule(this.appliedRule)
                  this.appliedRule = null
                  break
                default:
              }
            }

            if (this.periodStatus) {
              clearInterval(this.countInterval)
            }
          }

        }, 5000)
      }

      stopCounting() {
        clearInterval(this.countInterval)
      }

      pauseCounting() {
        this.isPause = !this.isPause
      }

      calculateDaysBetween() {
        var oneDay = 1000 * 60 * 60 * 24
        var msDifference = this.realLifeDate.getTime() - this.redemptionDate.getTime()
        this.daysBetween = msDifference / oneDay

      }

      checkRule() {
        this.ruleArray.filter(rule => {
          var debtFrom = rule.debtFrom && rule.debtFrom !== 0 && rule.debtFrom !== '' ? parseFloat(rule.debtFrom) : 0
          var debtTo = rule.debtTo && rule.debtTo !== 0 && rule.debtTo !== '' ? parseFloat(rule.debtTo) : 0
          if (debtTo !== 0 && this.originalValue <= debtTo && this.daysBetween === parseInt(rule.from)) {
            this.appliedRule = rule
            console.log('this.appliedRule 1: ', this.appliedRule)

          } else if (debtFrom !== 0 && this.originalValue > debtFrom && this.daysBetween === parseInt(rule.from)) {
            this.appliedRule = rule
            console.log('this.appliedRule 2: ', this.appliedRule)


          } else if (this.daysBetween === parseInt(rule.from)) {
            this.appliedRule = rule
            console.log('this.appliedRule 3: ', this.appliedRule)
          }
        })
      }

      applyStaticRule(appliedRule) {
        this.record.periodRecords[this.period].penaltyRecord.push({
          reason: 'penalty',
          policyType: 'static',
          value: parseFloat(appliedRule.penaltyRate),
          date: this.realLifeDate,
        })

        this.record.periodRecords[this.period].totalPayment = this.record.periodRecords[this.period].redemption + parseFloat(appliedRule.penaltyRate)
        this.record.periodRecords[this.period].remain = this.record.periodRecords[this.period].totalPayment - this.record.periodRecords[this.period].payed
        this.updatePeriodTable('period-table-container', this.period, 'totalPayment', this.record.periodRecords[this.period].totalPayment)
        this.updatePeriodTable('period-table-container', this.period, 'remain', this.record.periodRecords[this.period].remain)

        console.log('applied static rule:', this.record)
      }

      // dynamic 1: based on late days
      applyDynamic1Rule(appliedRule) {
        this.record.periodRecords[this.period].penaltyRecord.push({
          reason: 'penalty',
          policyType: 'static',
          value: parseFloat((appliedRule.penaltyRate * this.daysBetween * this.originalValue) / 100),
          date: this.realLifeDate,
        })

        this.record.periodRecords[this.period].totalPayment = this.record.periodRecords[this.period].redemption + parseFloat((appliedRule.penaltyRate * this.daysBetween * this.originalValue) / 100)
        this.record.periodRecords[this.period].remain = this.record.periodRecords[this.period].totalPayment - this.record.periodRecords[this.period].payed
        this.updatePeriodTable('period-table-container', this.period, 'totalPayment', this.record.periodRecords[this.period].totalPayment)
        this.updatePeriodTable('period-table-container', this.period, 'remain', this.record.periodRecords[this.period].remain)

        console.log('applied static rule:', this.record)
      }

      // dynamic 2: based on late payments
      applyDynamic2Rule(appliedRule) {
        this.record.periodRecords[this.period].remain = this.record.periodRecords[this.period].redemption - this.record.periodRecords[this.period].payed
        this.record.periodRecords[this.period].totalPayment = this.record.periodRecords[this.period].redemption + parseFloat((appliedRule.penaltyRate * this.record.periodRecords[this.period].remain) / 100)
        this.record.periodRecords[this.period].penaltyRecord.push({
          reason: 'penalty',
          policyType: 'static',
          value: parseFloat((appliedRule.penaltyRate * this.record.periodRecords[this.period].remain) / 100),
          date: this.realLifeDate,
        })
        this.updatePeriodTable('period-table-container', this.period, 'totalPayment', this.record.periodRecords[this.period].totalPayment)
        this.updatePeriodTable('period-table-container', this.period, 'remain', this.record.periodRecords[this.period].remain)

        console.log('applied static rule:', this.record)
      }

      createPeriodRecordForRecord() {
        this.record.periodRecords.push(this)
      }

      updatePeriodTable(elementName, period, updateElement, updateValue) {
        document.querySelector(`div.${elementName} table tbody tr[id='${period}'] th#${updateElement}`).innerHTML = updateValue
      }

      updateHistoryPayment(elementName) {
        var tr = document.createElement('tr')
        document.querySelectorAll(`div.${elementName} table thead th`).forEach(element => {
          var th = document.createElement('th')
          th.innerHTML = this[element.id]
          tr.appendChild(th)
        })

        document.querySelector(`div.${elementName} table tbody`).appendChild(tr)

      }
    }

    const startSimulation = (ruleArray, periodArray, realDate) => {
      period = -1
      var days = 0
      var date = new Date(realDate)
      var record = new Record()
      document.querySelector('p#real-date-counter').style.display = 'block'

      periodArray.forEach((period, index) => {
        var redemptionDate = new Date(periodArray[index].redemptionDate)
        var redemption = parseFloat(periodArray[index].redemption)
        console.log('period: ', period)
        var tempdate = new Date(redemptionDate)
        var periodEndDate = new Date(tempdate.setDate(tempdate.getDate() + (getDaysInMonth(tempdate.getMonth(), tempdate.getFullYear()) - 1)))
        var periodRecord = new PeriodRecord(record, redemptionDate, redemptionDate, periodEndDate, redemption, false, index, ruleArray, 30000000)
        periodRecord.createPeriodRecordForRecord()

      })
      console.log('record: ', record)
      // clear interval
      var interval = setInterval(async () => {
        if (!isPause) {
          if (period === periodArray.length) {
            clearInterval(interval)
            return
          }
          var redemptionDateToCompare = new Date(periodArray[period + 1].redemptionDate)
          console.log('period: ', period)


          if (date.getTime() === (redemptionDateToCompare.getTime() - (1000 * 24 * 60 * 60))) {
            record.periodRecords[period + 1].count(1)
            period++
          }
          date.setDate(date.getDate() + 1)
          console.log('real time date: ', date)
          document.querySelector('p#real-date-counter span').innerHTML = formatDate(date)

          days++
        }
      }, 5000)
      return record

    }

    document.querySelector('button#btn-simulation').addEventListener('click', (event) => {
      var realDate = document.querySelector('div.period-table-container input#real-date').value
      console.log('real date input value: ', realDate)
      var paymentSlip = document.querySelector('input#paymentSlip').value
      record = startSimulation(ruleArray2, periodArray, realDate)

    })

    document.querySelector('button#btn-pause').addEventListener('click', (event) => {
      isPause = !isPause
      for (var i = -1; i <= period; i++) {
        record.pauseCounting(i)

      }
    })

  </script>

  <!-- script for payment slip -->
  <script>
    // click event handler
    document.querySelector('button#btn-payment-slip').addEventListener('click', (event) => {
      var paymentSlipObj = {
        addedDate: new Date(Date.now())
      }
      document.querySelector('div.payment-slip-container').querySelectorAll('input').forEach(input => {
        paymentSlipObj[input.getAttribute('id')] = input.value
      })
      displayTable(paymentSlipObj, 'payment-slip-table-container')

      const notDonePeriodArray = record.periodRecords.filter(period => {
        return period.periodStatus === false
      })
      if (notDonePeriodArray.length !== 0) {
        console.log('not done period array: ', notDonePeriodArray)

        record.payedNotDonePeriod(parseFloat(paymentSlipObj.paymentSlip), paymentSlipObj.addedDate, notDonePeriodArray)

      } else {
        // record.payed(parseFloat(paymentSlipObj.paymentSlip, paymentSlipObj.addedDate))
        window.alert('You have payed all the periods.')
      }
    })

    periodArray.forEach(period => {
      displayTable(period, 'period-table-container')
    })


  </script>
</body>

</html>