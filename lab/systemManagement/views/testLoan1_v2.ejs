<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <h1>BẢNG TÍNH LÃI THEO DƯ NỢ CỐ ĐỊNH</h1>
      <h4>Tao goi vay</h4>
      <div class="container loan-package">
        <div class="row">
          <div class="col d-flex">
            <div class="form-group">
              <label>So tien vay</label>
              <input type="number" class="form-control" id="presentValue">
            </div>
            <div class="form-group">
              <label>Ngay bat dau goi vay</label>
              <input type="date" class="form-control" id="agreementDate">
            </div>
          </div>

        </div>
        <div class="row">
          <div class="col d-flex">
            <div class="form-group">
              <label>Lai suat ngay</label>
              <input type="number" class="form-control" id="interestRatePerDay">
            </div>
            <div class="form-group">
              <label>So lan tra(theo thang)</label>
              <input type="number" class="form-control" id="numberOfPayments">
            </div>
          </div>
        </div>
        <button class="btn btn-sm btn-primary" id="createLoanPackage">Kich hoat goi vay</button>

      </div>

      <h4>Bang chi tiet</h4>
      <table class="table table-striped table-bordered table-hover">
        <thead>
          <tr>
            <th scope="col" id="times">So lan dong lai</th>
            <th scope="col" id="redemptionDate">Ngay dong lai(dd/mm/yyyy)</th>
            <th scope="col" id="redemption">Redemption</th>
            <th scope="col" id="principal">Principal</th>
            <th scope="col" id="incrementalPayedPrincipal">Goc da tra cong don</th>
            <th scope="col" id="interest">Interest</th>
            <th scope="col" id="accumulatedPayedInterest">Lai da tra luy ke</th>
            <th scope="col" id="remainedPrincipal">Tien goc con lai</th>

          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </div>
  </div>


  <script>
    createLoanPackage.addEventListener('click', (event) => {
      console.log('event: ', event.target)
      var obj = {}
      event.target.closest('.container').querySelectorAll('input').forEach(input => {
        if (input.type === 'number') {
          obj[input.id] = parseFloat(input.value)
        } else {
          obj[input.id] = input.value
        }
      });
      calculateRedemption(obj)

    })
  </script>

  <script>
    function displayDept(times, redemptionDate, redemption, principal,
      incrementalPayedPrincipal, interest, accumulatedPayedInterest, remainedPrincipal) {
      var tr = document.createElement('tr')
      for (var i = 0; i < arguments.length; i++) {
        var th = document.createElement('th')
        th.innerHTML = arguments[i]
        tr.appendChild(th)
      }
      document.querySelector('table').querySelector('tbody').appendChild(tr)
    }
  </script>

  <script>
    Date.isLeapYear = function (year) {
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
    };

    Date.getDaysInMonth = function (year, month) {
      return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    };

    Date.prototype.isLeapYear = function () {
      return Date.isLeapYear(this.getFullYear());
    };

    Date.prototype.getDaysInMonth = function () {
      return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
    };

    Date.prototype.addMonths = function (value) {
      var n = this.getDate();
      this.setDate(1);
      this.setMonth(this.getMonth() + value);
      this.setDate(Math.min(n, this.getDaysInMonth()));
      return this;
    };

    const getDateAfterAnAmountOfDates = (date, amount) => {
      return formatDate(new Date(date.setDate(date.getDate() + amount)))
    }

    const getDateAfterAnAmountOfMonths = (originalDate, amount) => {
      var date = new Date(originalDate)
      var redemptionDate = new Date(date.setMonth(date.getMonth() + amount))
      const oneDay = 24 * 60 * 60 * 1000
      var daysInMonth = Math.abs((redemptionDate - originalDate) / oneDay)
      return {
        redemptionDate, daysInMonth
      }
    }

    const formatDate = (date) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      return [day, month, year].join('-');
    }

  </script>

  <script>
    // redemption, principal, incrementalPayedPrincipal, interest, accumulatedPayedInterest, remainedPrincipal
    // tien tra theo ky, tien goc, goc da tra cong don, lai, lai da tra luy ke, goc con lai

    const calculateRedemption = (package) => {
      console.log('package: ', package)
      var presentValue = package.presentValue,
        numberOfPayments = package.numberOfPayments,
        interestRatePerDay = package.interestRatePerDay,
        interest = 0,
        redemption = 0,
        principal = 0,
        incrementalPayedPrincipal = 0,
        accumulatedPayedInterest = 0,
        remainedPrincipal = 0,
        // date
        agreementDate = new Date(package.agreementDate),
        oneDay = 24 * 60 * 60 * 1000,
        lastDate = null, redemptionDate = null

      document.querySelector('table').querySelector('tbody').innerHTML = ''

      var termArray = []
      for (var i = 1; i <= numberOfPayments; i++) {
        var tempDate = new Date(agreementDate)
        lastDate = redemptionDate? redemptionDate : agreementDate
        redemptionDate = tempDate.addMonths(i)
        var daysInMonth = (redemptionDate - lastDate) / oneDay

        interest = (interestRatePerDay * daysInMonth * presentValue) / 100
        principal = i === numberOfPayments ? presentValue : 0
        redemption = principal + interest

        incrementalPayedPrincipal = i === numberOfPayments ? presentValue : 0
        accumulatedPayedInterest += interest
        remainedPrincipal = presentValue - principal
        displayDept(i, formatDate(redemptionDate), redemption, principal, incrementalPayedPrincipal, interest, accumulatedPayedInterest, remainedPrincipal)
      }
    }
  </script>
</body>

</html>