<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .row {
      border: 1px solid lightgrey;
      margin: 16px 0;
      padding: 32px 48px;
    }

    table th {
      text-align: right;
    }
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <h1><%- title %></h1>
      <div class="container" style="margin: 0 !important;
      padding: 0 !important;
      max-width: 100%;">
        <%- include('./loan_penalty/penalty') %>
        <%- include('./loan_penalty/periodTable') %>
        <%- include('./loan_penalty/dateSimulation') %>
        <%- include('./loan_penalty/paymentHistory') %>
        <%- include('./loan_penalty/loanMore') %>
      </div>
    </div>
  </div>
  </div>

  <!-- global variable -->
  <script>
    var periodArray = []
    var ruleArray = []
    var record = null
    var period = -1
    var isPause = false
    var originalValue = 0
    var realLifeDate = null
    var simulation = JSON.parse('<%- simulation %>')
    console.log('simulation: ', simulation)
  </script>

  <script type="text/javascript">
  </script>

  <!-- common function -->
  <script>
    Date.isLeapYear = function (year) {
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
    };

    Date.getDaysInMonth = function (year, month) {
      return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    };

    Date.prototype.isLeapYear = function () {
      return Date.isLeapYear(this.getFullYear());
    };

    Date.prototype.getDaysInMonth = function () {
      return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
    };

    Date.prototype.addMonths = function (value) {
      var n = this.getDate();
      this.setDate(1);
      this.setMonth(this.getMonth() + value);
      this.setDate(Math.min(n, this.getDaysInMonth()));
      return this;
    };

    const getDateAfterAnAmountOfDates = (date, amount) => {
      return formatDate(new Date(date.setDate(date.getDate() + amount)))
    }

    const getDateAfterAnAmountOfMonths = (originalDate, amount) => {
      var date = new Date(originalDate)
      var redemptionDate = new Date(date.setMonth(date.getMonth() + amount))
      const oneDay = 24 * 60 * 60 * 1000
      var daysInMonth = Math.abs((redemptionDate - originalDate) / oneDay)
      return {
        redemptionDate, daysInMonth
      }
    }

    const getDaysBetween = (d1, d2) => {
      let date1 = new Date(d1)
      let date2 = new Date(d2)
      var oneDay = 1000 * 60 * 60 * 24
      var msDifference = date1.getTime() - date2.getTime()
      var daysDifference = Math.abs(msDifference / oneDay)
      return daysDifference
    }

    const getDaysInMonth = (month, year) => {
      return new Date(year, month + 1, 0).getDate()
    }


    const formatDate = (date) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      return [day, month, year].join('-');
    }

    function pmt(rate_per_period, number_of_payments, present_value, future_value, type) {
      future_value = typeof future_value !== 'undefined' ? future_value : 0;
      type = typeof type !== 'undefined' ? type : 0;

      if (rate_per_period != 0.0) {
        // Interest rate exists
        var q = Math.pow(1 + rate_per_period, number_of_payments);
        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));

      } else if (number_of_payments != 0.0) {
        // No interest rate, but number of payments exists
        return -(future_value + present_value) / number_of_payments;
      }

      return 0;
    }
  </script>

  <!-- calculate and display loan more, pay the origin -->
  <!-- <script>
    document.querySelector('button#btn-loan-more').addEventListener('click', (event) => {
      console.log('event: ', event.target.value)
      console.log('real date at the moment the user clicks to the loan more button: ', realLifeDate)
      const filteredRecord = record.periodRecords.filter(rec => {
        return rec.realLifeDate.getTime() <= realLifeDate && rec.paid === 0
      })
      console.log('paid period: ', filteredRecord)
    })
  </script> -->
</body>

</html>