<!-- penalty rule -->
<div class="row">
  <!-- penalty rule -->
  <div class="col-3">
    <div class="penalty-rules">
      <h4>Penalty rule</h4>
      <div class="form-group" id="policy">
        <label>Thoi gian qua han</label>
        <input type="number" class="form-control" id="from" placeholder="From...">
        <input type="number" class="form-control" id="to" placeholder="To...">
      </div>
      <div class="form-group">
        <label class="bmd-label-floating">Kieu phat</label>
        <select class="form-control" id="policyType">
          <option value="static">Static</option>
          <option value="dynamic1">Dynamic 1: % * No goc * so ngay dong cham</option>
          <option value="dynamic2">Dynamic 2: % * so tien dong cham</option>
        </select>
      </div>
      <div class="form-group">
        <label class="bmd-label-floating">Phi phat</label>
        <input type="text" class="form-control" id="penaltyRate">
      </div>
      <div class="form-group is-filled" id="original-debt">
        <label>No goc</label>
        <input type="number" class="form-control" id="debtFrom" placeholder="From...">
        <input type="number" class="form-control" id="debtTo" placeholder="To...">
      </div>
      <button class="btn btn-sm btn-primary" id="btn-add-rule">Add rule</button>
    </div>
  </div>

  <!-- penalty table -->
  <div class="col">
    <div class="penalty-table">
      <h3>Bang quy dinh cach phat</h3>
      <table class="table table-hover  penalty-table">
        <thead>
          <tr>
            <th id="from">Tu</th>
            <th id="to">Den</th>
            <th id="penaltyRate">Phat</th>
            <th id="debtFrom">No goc tu</th>
            <th id="debtTo">No goc den</th>
            <th id="policyType">Kieu phat</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <!-- loan package -->
  <div class="col-3">
    <div class="loan-package">
      <h4>Tao goi vay</h4>

      <div class="form-group">
        <label>So tien vay</label>
        <input type="number" class="form-control" id="presentValue">
      </div>
      <div class="form-group">
        <label>Ngay bat dau goi vay</label>
        <input type="date" class="form-control" id="agreementDate">
      </div>
      <div class="form-group">
        <label>Lai suat <%- penaltyRateTitle %>(%)</label>
        <input type="number" class="form-control" id="interestRatePerDay">
      </div>
      <div class="form-group">
        <label>So lan tra(theo thang)</label>
        <input type="number" class="form-control" id="numberOfPayments">
      </div>
      <button class="btn btn-sm btn-primary" id="createLoanPackage">Kich hoat goi vay</button>

    </div>
  </div>

</div>

<!-- create and display penalty rules -->
<script>
  const displayRule = (ruleObj, elementName) => {
    var tr = document.createElement('tr')
    document.querySelectorAll(`table.${elementName} thead th`).forEach(element => {
      var th = document.createElement('th')
      th.innerHTML = ruleObj[element.id]
      tr.appendChild(th)
    })
    document.querySelector(`table.${elementName} tbody`).appendChild(tr)
  }

  document.querySelector('button#btn-add-rule').addEventListener('click', (event) => {
    var lastRule = ruleArray[ruleArray.length - 1]
    if (lastRule && lastRule.to === '') {
      window.alert("You cannot add more rules because last rule's time stamp is to infinity!")
    } else {
      var ruleObj = {}
      document.querySelectorAll('div.penalty-rules input,select').forEach(element => {
        ruleObj[element.id] = element.value
      })
      ruleArray.push(ruleObj)
      console.log('rule obj: ', ruleObj)
      document.querySelector('input#from').value = ruleObj.to
      document.querySelector('input#to').value = ''
      document.querySelector('input#from').setAttribute('disabled', ruleObj.to === '' ? false : true)
      displayRule(ruleObj, 'penalty-table')
    }

  })
</script>

<!-- create and display loan package -->
<script>

  const calculateRedemption = (package, simulation) => {
    document.querySelector('table.period-table').querySelector('tbody').innerHTML = ''

    var presentValue = package.presentValue,
      numberOfPayments = package.numberOfPayments,
      interestRate = package.interestRatePerDay !== null ? package.interestRatePerDay : package.interestRatePerMonth,
      // interest = 0,
      // redemption = 0,
      // principal = 0,
      incrementalPaidPrincipal = 0,
      accumulatedPaidInterest = 0,
      remainOrigin = 0,
      remainedPrincipal = 0,
      // date
      agreementDate = new Date(package.agreementDate),
      oneDay = 24 * 60 * 60 * 1000,
      lastDate = null, redemptionDate = null,
      // supported variables
      tempIncrementalPaidPrincipal = 0


    for (var i = 1; i <= numberOfPayments; i++) {
      var tempDate = new Date(agreementDate)
      lastDate = redemptionDate ? redemptionDate : agreementDate
      redemptionDate = tempDate.addMonths(i)
      var daysInMonth = (redemptionDate - lastDate) / oneDay
      switch (simulation) {
        case (1):
          var { interest, principal, redemption } = calculate1(interestRate, daysInMonth, presentValue, numberOfPayments, i)

          break
        case (2):
          var { interest, principal, redemption } = calculate2(interestRate, daysInMonth, presentValue, numberOfPayments, i)

          break
        case (3):
          var { interest, principal, redemption } =
            calculate3(interestRate, daysInMonth, presentValue, numberOfPayments, i, tempIncrementalPaidPrincipal)

          break
        case (4):
          var redemptionDate = i === 1 ? agreementDate : tempDate.addMonths(i - 1)
          var daysInMonth = redemptionDate.getDaysInMonth()
          var { interest, principal, redemption } = calculate4(interestRate, daysInMonth, presentValue, numberOfPayments, i)

          break
        default:
      }

      tempIncrementalPaidPrincipal += principal

      var obj = {
        period: i - 1,
        redemptionDate: redemptionDate,
        redemption,
        principal,
        incrementalPaidPrincipal,
        interest,
        accumulatedPaidInterest,
        remainOrigin,

        totalPayment: redemption,
        paid: 0,
        remain: redemption,
        periodStatus: false
      }

      periodArray.push(obj)
      displayTable(obj, 'period-table-container')
    }
    console.log('period array: ', periodArray)
  }

  const calculate1 = (interestRate, daysInMonth, presentValue, numberOfPayments, i) => {
    var interest = Math.round((interestRate * daysInMonth * presentValue) / 100)
    var principal = i === numberOfPayments ? presentValue : 0
    var redemption = principal + interest

    return { interest, principal, redemption }
  }

  const calculate2 = (interestRate, daysInMonth, presentValue, numberOfPayments, i) => {
    var principal = Math.round(presentValue / numberOfPayments)
    var interest = Math.round((interestRate * daysInMonth * (presentValue - principal * (i - 1))) / 100)
    var redemption = principal + interest

    return { interest, principal, redemption }
  }

  const calculate3 = (interestRate, daysInMonth, presentValue, numberOfPayments, i, tempIncrementalPaidPrincipal) => {
    var redemption = Math.round(pmt(interestRate / 100, numberOfPayments, -presentValue))
    var interest = Math.round((interestRate * (presentValue - tempIncrementalPaidPrincipal)) / 100)
    var principal = redemption - interest

    return { interest, principal, redemption }
  }

  const calculate4 = (interestRate, daysInMonth, presentValue, numberOfPayments, i) => {
    var interest = Math.round((interestRate * daysInMonth * presentValue) / 100)
    var principal = i === numberOfPayments ? presentValue : 0
    var redemption = principal + interest

    return { interest, principal, redemption }
  }

  // function displayDept(times, redemptionDate, redemption, principal,
  //   incrementalPaidPrincipal, interest, accumulatedPaidInterest, remainOrigin) {
  //   var tr = document.createElement('tr')
  //   for (var i = 0; i < arguments.length; i++) {
  //     var th = document.createElement('th')
  //     th.innerHTML = arguments[i]
  //     tr.appendChild(th)
  //   }
  //   document.querySelector('table').querySelector('tbody').appendChild(tr)
  // }

  const displayTable = (object, elementName) => {
    var tr = document.createElement('tr')
    document.querySelectorAll(`div.${elementName} table thead th`).forEach((element, index) => {
      var th = document.createElement('th')
      if (object[element.id] !== undefined) {
        switch (element.id) {
          case ('redemptionDate'):
            th.innerHTML = formatDate(object[element.id])
            break
          case ('redemption'):
          case ('principal'):
          case ('interest'):
          case ('totalPayment'):
          case ('paid'):
          case ('remain'):
            th.innerHTML = object[element.id].toLocaleString()
            break
          default:
            th.innerHTML = object[element.id]

        }
      }

      th.id = element.id
      tr.id = object.period
      tr.appendChild(th)
    })
    document.querySelector(`div.${elementName} table tbody`).appendChild(tr)
  }

  document.querySelector('button#createLoanPackage').addEventListener('click', (event) => {
    var obj = {}
    document.querySelectorAll('.loan-package input').forEach(input => {
      if (input.type === 'number') {
        obj[input.id] = parseFloat(input.value)
      } else {
        obj[input.id] = input.value
      }
    });
    originalValue = obj.presentValue
    console.log('package: ', obj)
    calculateRedemption(obj, simulation)

  })

</script>