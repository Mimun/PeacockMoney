<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .row {
      border: 1px solid lightgrey;
      margin: 16px 0;
      padding: 32px 48px;
    }
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <h1>BẢNG TÍNH LÃI THEO DƯ NỢ GIAM DAN, CỐ ĐỊNH</h1>
      <div class="container" style="margin: 0 !important;
      padding: 0 !important;
      max-width: 100%;">
        <!-- penalty rule -->
        <div class="row">
          <!-- penalty rule -->
          <div class="col-3">
            <div class="penalty-rules">
              <h4>Penalty rule</h4>
              <div class="form-group" id="policy">
                <label>Thoi gian qua han</label>
                <input type="number" class="form-control" id="from" placeholder="From...">
                <input type="number" class="form-control" id="to" placeholder="To...">
              </div>
              <div class="form-group">
                <label class="bmd-label-floating">Kieu phat</label>
                <select class="form-control" id="policyType">
                  <option value="static">Static</option>
                  <option value="dynamic">Dynamic</option>
                </select>
              </div>
              <div class="form-group">
                <label class="bmd-label-floating">Phi phat</label>
                <input type="text" class="form-control" id="penaltyRate">
              </div>
              <div class="form-group is-filled" id="original-debt">
                <label>No goc</label>
                <input type="number" class="form-control" id="debtFrom" placeholder="From...">
                <input type="number" class="form-control" id="debtTo" placeholder="To...">
              </div>
              <button class="btn btn-sm btn-primary" id="btn-add-rule">Add rule</button>
            </div>
          </div>

          <div class="col">
            <div class="penalty-table">
              <h3>Bang quy dinh cach phat</h3>
              <table class="table table-hover table-responsive penalty-table">
                <thead>
                  <tr>
                    <th id="from">Tu</th>
                    <th id="to">Den</th>
                    <th id="penaltyRate">Phat</th>
                    <th id="debtFrom">No goc tu</th>
                    <th id="debtTo">No goc den</th>
                    <th id="policyType">Kieu phat</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>

        </div>

        <!-- package -->
        <div class="row">
          <!-- loan package -->
          <div class="col-3">
            <div class="loan-package">
              <h4>Tao goi vay</h4>

              <div class="form-group">
                <label>So tien vay</label>
                <input type="number" class="form-control" id="presentValue">
              </div>
              <div class="form-group">
                <label>Ngay bat dau goi vay</label>
                <input type="date" class="form-control" id="agreementDate">
              </div>
              <div class="form-group">
                <label>Lai suat ngay(%)</label>
                <input type="number" class="form-control" id="interestRatePerDay">
              </div>
              <div class="form-group">
                <label>So lan tra(theo thang)</label>
                <input type="number" class="form-control" id="numberOfPayments">
              </div>
              <button class="btn btn-sm btn-primary" id="createLoanPackage">Kich hoat goi vay</button>

            </div>
          </div>
          <!-- simulation -->
          <div class="col">
            <div class="simulation period-table-container">
              <h4>Simulation</h4>
              <table class="table table-hover table-responsive period-table">
                <thead>
                  <tr>
                    <th scope="col" id="period">No</th>
                    <th scope="col" id="redemptionDate">Date</th>
                    <th scope="col" id="redemption">Redemption</th>
                    <th scope="col" id="totalPayment">Total(Redemption+Penalty)</th>
                    <th scope="col" id="payed">Payed</th>
                    <th scope="col" id="remain">Remain</th>
                    <th scope="col" id="periodStatus">Status</th>
                    <th scope="col" id="counter">Days pass</th>

                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
          <!-- <div class="col">
            <h4>Bang chi tiet</h4>
            <table class="table table-striped table-bordered table-hover">
              <thead>
                <tr>
                  <th scope="col" id="times">So lan dong lai</th>
                  <th scope="col" id="redemptionDate">Ngay dong lai(dd/mm/yyyy)</th>
                  <th scope="col" id="redemption">Redemption</th>
                  <th scope="col" id="principal">Principal</th>
                  <th scope="col" id="incrementalPayedPrincipal">Goc da tra cong don</th>
                  <th scope="col" id="interest">Interest</th>
                  <th scope="col" id="accumulatedPayedInterest">Lai da tra luy ke</th>
                  <th scope="col" id="remainedPrincipal">Tien goc con lai</th>

                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div> -->

        </div>

        <!-- date for simulation -->
        <div class="row">
          <div class="col-3">
            <div class="date">
              <h4>Choose date to start simulation</h4>
              <label for="real-date">Thoi gian thuc</label>
              <input type="date" id="real-date" class="form-control">
              <button class="btn btn-sm btn-primary" id="btn-simulation">Start simulation</button>
              <button class="btn btn-sm btn-info" id="btn-pause">Pause</button>
            </div>
          </div>

          <div class="col">
            <div class="time-counter">
              <h4>Time counter</h4>
              <p id="real-date-counter">Date counter: <span></span></p>
            </div>

          </div>
        </div>

        <!-- simulation -->
        <div class="row">
          <!-- payment section -->
          <div class="col-3">
            <div class="payment">
              <h4>Payment</h4>
              <div class="form-group">
                <label>So tien</label>
                <input type="number" class="form-control" id="paymentSlip">
              </div>
              <button class="btn btn-sm btn-primary" id="btn-payment-slip">Add</button>
            </div>
          </div>

          <!-- payment history -->
          <div class="col">
            <div class="payment-history">
              <h4>Payment history</h4>
              <table class="table table-hover table-responsive payment-history-table">
                <thead>
                  <tr>
                    <th scope="col" id="period">No</th>
                    <th scope="col" id="totalPayment">Total payment</th>
                    <th scope="col" id="payed">Total payed</th>
                    <th scope="col" id="remain">Remain</th>
                    <th scope="col" id="realLifeDate">Date</th>
                    <th scope="col" id="periodStatus">Status</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

  <!-- global variable -->
  <script>
    var periodArray = []
    var ruleArray = []
    var record = null
    var period = -1
    var isPause = false
    var originalValue = 0
  </script>

  <!-- common function -->
  <script>
    Date.isLeapYear = function (year) {
      return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
    };

    Date.getDaysInMonth = function (year, month) {
      return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
    };

    Date.prototype.isLeapYear = function () {
      return Date.isLeapYear(this.getFullYear());
    };

    Date.prototype.getDaysInMonth = function () {
      return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
    };

    Date.prototype.addMonths = function (value) {
      var n = this.getDate();
      this.setDate(1);
      this.setMonth(this.getMonth() + value);
      this.setDate(Math.min(n, this.getDaysInMonth()));
      return this;
    };

    const getDateAfterAnAmountOfDates = (date, amount) => {
      return formatDate(new Date(date.setDate(date.getDate() + amount)))
    }

    const getDateAfterAnAmountOfMonths = (originalDate, amount) => {
      var date = new Date(originalDate)
      var redemptionDate = new Date(date.setMonth(date.getMonth() + amount))
      const oneDay = 24 * 60 * 60 * 1000
      var daysInMonth = Math.abs((redemptionDate - originalDate) / oneDay)
      return {
        redemptionDate, daysInMonth
      }
    }

    const getDaysBetween = (d1, d2) => {
      let date1 = new Date(d1)
      let date2 = new Date(d2)
      var oneDay = 1000 * 60 * 60 * 24
      var msDifference = date1.getTime() - date2.getTime()
      var daysDifference = Math.abs(msDifference / oneDay)
      return daysDifference
    }

    const getDaysInMonth = (month, year) => {
      return new Date(year, month + 1, 0).getDate()
    }


    const formatDate = (date) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      return [day, month, year].join('-');
    }
  </script>

  <!-- create and display loan package -->
  <script>
    const calculateRedemption = (package) => {
      console.log('package: ', package)
      var presentValue = package.presentValue,
        numberOfPayments = package.numberOfPayments,
        interestRatePerDay = package.interestRatePerDay,
        interest = 0,
        redemption = 0,
        principal = presentValue / numberOfPayments,
        incrementalPayedPrincipal = 0,
        accumulatedPayedInterest = 0,
        remainedPrincipal = 0,
        // date
        agreementDate = new Date(package.agreementDate),
        oneDay = 24 * 60 * 60 * 1000,
        lastDate = null, redemptionDate = null

      document.querySelector('table.period-table').querySelector('tbody').innerHTML = ''
      periodArray = []

      var termArray = []
      for (var i = 1; i <= numberOfPayments; i++) {
        var tempDate = new Date(agreementDate)
        lastDate = redemptionDate? redemptionDate : agreementDate
        redemptionDate = tempDate.addMonths(i)
        var daysInMonth = (redemptionDate - lastDate) / oneDay

        interest = (interestRatePerDay * daysInMonth * (presentValue - principal * (i - 1))) / 100
        redemption = principal + interest
        incrementalPayedPrincipal += principal
        accumulatedPayedInterest += interest
        remainedPrincipal = presentValue - incrementalPayedPrincipal

        var obj = {
          period: i - 1,
          redemptionDate: redemptionDate,
          redemption,
          totalPayment: redemption,
          payed: 0,
          remain: redemption,
          periodStatus: false
        }
        periodArray.push(obj)
        displayTable(obj, 'period-table-container')

        // displayDept(i, formatDate(redemptionDate), Math.round(redemption, -1), Math.round(principal, -1), Math.round(incrementalPayedPrincipal, -1),
        //   Math.round(interest, -1), Math.round(accumulatedPayedInterest, -1), Math.round(remainedPrincipal, -1))
      }
    }
    
    function displayDept(times, redemptionDate, redemption, principal,
      incrementalPayedPrincipal, interest, accumulatedPayedInterest, remainedPrincipal) {
      var tr = document.createElement('tr')
      for (var i = 0; i < arguments.length; i++) {
        var th = document.createElement('th')
        th.innerHTML = arguments[i]
        tr.appendChild(th)
      }
      document.querySelector('table').querySelector('tbody').appendChild(tr)
    }

    const displayTable = (object, elementName) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`div.${elementName} table thead th`).forEach((element, index) => {
        var th = document.createElement('th')
        if (object[element.id] !== undefined) {
          th.innerHTML = element.id === 'addedDate' ? formatDate(object[element.id]) : object[element.id]
        }
        if (element.id === 'redemptionDate') {
          th.innerHTML = formatDate(object[element.id])
        }
        th.id = element.id
        tr.id = object.period
        tr.appendChild(th)
      })
      document.querySelector(`div.${elementName} table tbody`).appendChild(tr)
    }

    document.querySelector('button#createLoanPackage').addEventListener('click', (event) => {
      var obj = {}
      document.querySelectorAll('.loan-package input').forEach(input => {
        if (input.type === 'number') {
          obj[input.id] = parseFloat(input.value)
        } else {
          obj[input.id] = input.value
        }
      });
      originalValue = obj[presentValue]
      calculateRedemption(obj)

    })
  </script>

  <!-- create and display penalty rules -->
  <script>
    const displayRule = (ruleObj, elementName) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`table.${elementName} thead th`).forEach(element => {
        var th = document.createElement('th')
        th.innerHTML = ruleObj[element.id]
        tr.appendChild(th)
      })
      document.querySelector(`table.${elementName} tbody`).appendChild(tr)
    }

    document.querySelector('button#btn-add-rule').addEventListener('click', (event) => {
      var lastRule = ruleArray[ruleArray.length - 1]
      if (lastRule && lastRule.to === '') {
        window.alert("You cannot add more rules because last rule's time stamp is to infinity!")
      } else {
        var ruleObj = {}
        document.querySelectorAll('div.penalty-rules input,select').forEach(element => {
          ruleObj[element.id] = element.value
        })
        ruleArray.push(ruleObj)
        console.log('rule obj: ', ruleObj)
        document.querySelector('input#from').value = ruleObj.to
        document.querySelector('input#to').value = ''
        document.querySelector('input#from').setAttribute('disabled', ruleObj.to === '' ? false : true)
        displayRule(ruleObj, 'penalty-table')
      }

    })
  </script>

  <!-- choose date, display time counter -->
  <script type="module">
    import PeriodRecord from './periodRecord.js'
    import Record from './record.js'

    const startSimulation = (ruleArray, periodArray, realDate, originalValue) => {
      var days = 0
      var date = new Date(realDate)
      var record = new Record()

      periodArray.forEach((period, index) => {
        var redemptionDate = new Date(periodArray[index].redemptionDate)
        var redemption = parseFloat(periodArray[index].redemption)
        console.log('period: ', period)
        var tempdate = new Date(redemptionDate)
        var periodEndDate = new Date(tempdate.setDate(tempdate.getDate() + (getDaysInMonth(tempdate.getMonth(), tempdate.getFullYear()) - 1)))
        var periodRecord = new PeriodRecord(record, redemptionDate, redemptionDate, periodEndDate, redemption, false, index, ruleArray, originalValue)
        periodRecord.createPeriodRecordForRecord()

      })
      console.log('record: ', record)
      // clear interval
      var interval = setInterval(async () => {
        if (!isPause) {
          if (period === periodArray.length) {
            clearInterval(interval)
            return
          }
          var redemptionDateToCompare = new Date(periodArray[period + 1].redemptionDate)
          console.log('period: ', period)

          if (date.getTime() === (redemptionDateToCompare.getTime() - (1000 * 24 * 60 * 60))) {
            record.periodRecords[period + 1].count(1)
            period++
          }
          date.setDate(date.getDate() + 1)
          console.log('real time date: ', date)
          document.querySelector('p#real-date-counter span').innerHTML = formatDate(date)

          days++
        }
      }, 5000)
      return record

    }

    document.querySelector('button#btn-simulation').addEventListener('click', (event) => {
      var realDate = document.querySelector('div.date input#real-date').value
      console.log('real date input value: ', realDate)
      record = startSimulation(ruleArray, periodArray, realDate, originalValue)
      event.target.setAttribute('disabled', true)
    })

    document.querySelector('button#btn-pause').addEventListener('click', (event) => {
      isPause = !isPause
      for (var i = -1; i <= period; i++) {
        record.pauseCounting(i)

      }
      isPause ? event.target.innerHTML = 'start' : event.target.innerHTML = 'pause'

    })
  </script>

  <!-- calculate and display simualtion table -->
  <script>
    document.querySelector('button#btn-payment-slip').addEventListener('click', (event) => {
      var paymentSlipObj = {
        addedDate: new Date(Date.now())
      }
      document.querySelector('div.payment').querySelectorAll('input').forEach(input => {
        paymentSlipObj[input.getAttribute('id')] = input.value
      })

      const notDonePeriodArray = record.periodRecords.filter(period => {
        return period.periodStatus === false
      })
      if (notDonePeriodArray.length !== 0) {
        console.log('not done period array: ', notDonePeriodArray)

        record.payedNotDonePeriod(parseFloat(paymentSlipObj.paymentSlip), paymentSlipObj.addedDate, notDonePeriodArray)

      } else {
        // record.payed(parseFloat(paymentSlipObj.paymentSlip, paymentSlipObj.addedDate))
        window.alert('You have payed all the periods.')
      }
    })
  </script>
</body>

</html>