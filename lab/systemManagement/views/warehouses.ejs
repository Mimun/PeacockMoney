<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .search-container .form-group {
      width: 18vw;
    }

    .form-group {
      width: 100%;
    }

    .select-container {
      width: 100%;
      margin-bottom: 1rem;
    }

    .modal-content .modal-footer .btn {
      margin: 0 8px !important;
    }
  </style>
</head>

<body>
  <!-- create warehouse template for modal -->
  <template id="create-warehouse-template">
    <div class="modal-header text-center">
      <h4 class="modal-title w-100 font-weight-bold">Tao moi kho</h4>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body mx-3 object-div d-flex justify-content-between flex-wrap">
      <div class="form-group">
        <label data-error="wrong" data-success="right">Ten kho</label>
        <input type="text" class="form-control validate" name="name" data-vie="tenKho"
          data-kor="koreanString">
      </div>

      <div class="form-group">
        <label data-error="wrong" data-success="right">Dia chi</label>
        <input type="text" class="form-control validate" name="address" data-vie="diaChi" data-kor="koreanString">
      </div>

      <div class="form-group">
        <label data-error="wrong" data-success="right">So dien thoai</label>
        <input type="number" class="form-control validate" name="phoneNumber" data-vie="soDienThoai"
          data-kor="koreanString">
      </div>

      <div class="form-group">
        <label data-error="wrong" data-success="right">Email</label>
        <input type="email" class="form-control validate" name="email" data-vie="email" data-kor="koreanString">
      </div>


      <div class="form-group">
        <label data-error="wrong" data-success="right">Ghi chu</label>
        <input type="text" class="form-control validate" name="note" data-vie="ghiChu" data-kor="koreanString">
      </div>

    </div>
    <div class="modal-footer d-flex justify-content-center">
      <button class="btn btn-raised btn-primary" id="btn-add-representative">Add representative</button>
      <button class="btn btn-unique" id="btn-create-warehouse">Create</button>
    </div>

  </template>

  <template id="warehouse-representative-select-template">
    <div class="select-container">
      <label>Thu kho</label>
      <select class="browser-default custom-select">
        <option value="">No employee</option>
      </select>
    </div>

  </template>

  <!-- warehouse list -->
  <template id="warehouse-list">
    <div class="info-container">
      <div class="container">
        <div class="row">
          <div class="col">
            <p class="name"></p>
          </div>
          <div class="col">
            <p class="phone-number"></p>
          </div>
          <div class="col">
            <p class="email"></p>
          </div>
          <div class="col">
            <p class="id"></p>
          </div>
        </div>
      </div>

    </div>
  </template>

  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <h2>This is list of warehouses</h2>
      <!-- Search form -->
      <div class="search-container">
        <form id="form-search">
          <div class="form-group">
            <input type="text" class="form-control" id="search" placeholder="Search...">
          </div>
        </form>
      </div>

      <div id="warehouse-list-container" class="list-container"></div>
      <button class="btn btn-raised btn-primary btn-sm" id="create-new-warehouse">Create new warehouse</button>

      <!-- modal to create new warehouse -->
      <div class="modal fade" id="modalContactForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">


          </div>
        </div>
      </div>
    </div>
  </div>
  </div>

  <script type="module">
    import { generateWarehouseManagementList, createSelect } from '/generateWarehouseManagementList.js'
    import { makeRequest } from '/makeRequest.js'
    import { findNestedObj } from '/findNestedObj.js'

    const warehouseList = <%- JSON.stringify(warehouseList) %>;
    const employeeList = <%- JSON.stringify(employeeList) %>;
    const storeList = <%- JSON.stringify(storeList) %>;
    console.log('warehouse list: ', warehouseList)
    console.log('employee list: ', employeeList)
    console.log('store list: ', storeList)

    const modalContent = document.querySelector('#modalContactForm').querySelector('.modal-content')
    const warehouseListTemplate = document.querySelector('#warehouse-list')

    // declare some divs that are used for creating select box
    var selectContainer = document.createElement('div')
    selectContainer.className = 'select-container'

    var select = document.createElement('select')
    select.className = "browser-default custom-select"

    var selectLabel = document.createElement('label')
    // store and employee select options
    var storeSelectOptions = storeList.map(store => {
      var option = `<option value="${store._id}">${store.name}-${store.address}</option>`
      return option
    })
    storeSelectOptions.unshift('<option value="">No store</option>')

    var employeeSelectOptions = employeeList.map(employee => {
      var option = `<option value="${employee._id}">${employee.fullName}-${employee.role}</option>`
      return option
    })
    employeeSelectOptions.unshift('<option value="">No employee</option>')


    // create warehouse list
    // var warehouseRepresentativeSelect = document.querySelector('#warehouse-representative-select-template').content.cloneNode(true)
    generateWarehouseManagementList(warehouseList, storeSelectOptions, employeeSelectOptions, warehouseListTemplate, 'warehouse-list-container', 'warehouses')

    // create new warehouse button
    document.querySelector('#create-new-warehouse').addEventListener('click', (event) => {
      $("#modalContactForm").on('show.bs.modal', () => {
        modalContent.innerHTML = ''

        // create warehouse template for modal when clicking "create new warehouse button"
        const createwarehouse = document.querySelector('#create-warehouse-template').content.cloneNode(true)

        var modalBody = createwarehouse.querySelector('.modal-body')
        var modalFooter = createwarehouse.querySelector('.modal-footer')

        // create store select
        createSelect(select, '', 'store-select', 'select-store',
          storeSelectOptions, selectLabel, 'Cua hang', selectContainer, modalBody, false)

        // create employee select
        createSelect(select, '', 'representative-select', 'select-representative',
          employeeSelectOptions, selectLabel, 'Nguoi dai dien', selectContainer, modalBody, false)

        // for adding representatives button
        createwarehouse.querySelector('#btn-add-representative').addEventListener('click', (event) => {
          console.log('representative: ', modalBody)
          let warehouseRepresentativeSelectClone = modalBody.querySelector("select.select-representative").closest('.select-container').cloneNode(true)
          warehouseRepresentativeSelectClone.querySelector('select').value = ""
          modalBody.appendChild(warehouseRepresentativeSelectClone)
        })

        // create button in modal
        createwarehouse.querySelector("#btn-create-warehouse").addEventListener('click', (event) => {
          var warehouseObj = {
            metadata: [],
            infos: [],
            representatives: [],
            store: null
          }
          modalBody.querySelectorAll('input').forEach(input => {
            warehouseObj.metadata.push({
              cType: input.type,
              dataKor: input.getAttribute('data-kor'),
              name: input.getAttribute('name'),
              value: input.value,
              dataVie: input.getAttribute('data-vie')
            })

          })

          modalBody.querySelectorAll('select.select-representative').forEach(select => {
            if (select.value) {
              warehouseObj.representatives.push(select.value)

            }
          })
          if(modalBody.querySelector('select.select-store').value){
            warehouseObj.store = modalBody.querySelector('select.select-store').value

          }

          console.log('input: ', warehouseObj)
          makeRequest('POST', 'warehouses', 'application/json', JSON.stringify(warehouseObj), () => {
            window.location.reload()
          })

        })

        modalContent.appendChild(createwarehouse)

      })

      $("#modalContactForm").modal('show')
    })

    document.querySelector('#form-search').addEventListener('submit', (event) => {
      console.log('event: ', event.target)
      event.preventDefault()
      var searchValueArray = event.target.querySelector('input').value.split(' ')
      console.log('search array: ', searchValueArray)
      makeRequest('POST', 'warehouses/search', 'application/json', JSON.stringify({ data: searchValueArray }), (result) => {
        document.querySelector('#warehouse-list-container').innerHTML = ''
        if (result.warehouseList.length !== 0) {
          generateWarehouseManagementList(result.warehouseList, employeeList, warehouseListTemplate, 'warehouse-list-container', 'warehouses')

        } else {
          generateWarehouseManagementList(warehouseList, employeeList, warehouseListTemplate, 'warehouse-list-container', 'warehouses')


        }
      })

    })

  </script>

</body>

</html>