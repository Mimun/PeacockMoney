<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    .md-form {
      margin-bottom: 16px;
    }

    .money-table,
    .case-table {
      width: 70% !important;
      margin: auto;
    }

    .table-container,
    .note-container {
      padding: 16px 64px;
      margin: 16px 0;
      border: 1px solid lightgrey;
      overflow-x: scroll;
      max-width: 100vw;
    }

    .note-container {
      overflow-x: unset !important;
      max-width: 400px;
    }



    .ui-resizable {
      position: static !important;
    }

    .table-container th {
      min-width: 160px;
    }
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <h2>Báo cáo tiền tổng hợp</h2>
      <div class="d-flex align-items-end justify-content-between" style="width: 500px;">
        <button class="btn btn-sm btn-primary" id="choose-date">Chọn ngày báo cáo</button>
        <button class="btn btn-sm btn-primary" id="export">Export Excel</button>
        <div class="form-group">
          <label for="display-date" class="bmd-label-floating">Ngày đã chọn</label>
          <input type="text" class="form-control" id="display-date">
        </div>
      </div>

      <div class="note-container">
        <div class="container">
          <div class="row">
            <div class="col">
              <div class="box daily"></div><span>Daily</span>
            </div>
            <div class="col">
              <div class="box monthly"></div><span>Monthly</span>

            </div>
            <div class="col">
              <div class="box total"></div><span>Total</span>

            </div>

          </div>
        </div>
      </div>

      <div class="table-container">
        <h5>Giải ngân</h5>
        <h6>Số tiền giải ngân</h6>
        <table class="table table-bordered table-striped C-Giải-ngân-mới table1" id="money-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Giải ngân(tiền)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <h6>Số vụ giải ngân</h6>
        <table class="table table-bordered table-striped C-Giải-ngân-mới table2" id="case-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Giải ngân(vụ)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <table class="tableBreak1">
          <thead>
            <tr></tr>
          </thead>
        </table>
      </div>

      <div class="table-container">
        <h5>Gốc</h5>
        <h6>Gốc thu lại</h6>
        <table class="table table-bordered table-striped T-Gốc table3" id="money-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Theo dõi trả gốc(tiền)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <h6>Số vụ trả gốc</h6>
        <table class="table table-bordered table-striped T-Gốc table4" id="case-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Theo dõi trả gốc(vụ)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <table class="tableBreak2">
          <thead>
            <tr></tr>
          </thead>
        </table>
      </div>

      <div class="table-container">
        <h5>Lãi</h5>
        <h6>Tiền lãi đã nộp</h6>
        <table class="table table-bordered table-striped T-Lãi table5" id="money-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Theo dõi trả lãi(tiền)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <h6>Số vụ trả lãi</h6>
        <table class="table table-bordered table-striped T-Lãi table6" id="case-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Theo dõi trả lãi(vụ)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <table class="tableBreak3">
          <thead>
            <tr></tr>
          </thead>
        </table>
      </div>

      <div class="table-container">
        <h5>Gốc còn nợ</h5>
        <h6>Tiền gốc còn nợ</h6>
        <table class="table table-bordered table-striped presentValue table7" id="money-report-table">
          <thead>
            <tr>
              <th class="static" id="itemType">Theo dõi gốc còn nợ(tiền)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
        <table class="tableBreak4">
          <thead>
            <tr></tr>
          </thead>
        </table>
      </div>

      <!-- Modal -->
      <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="exampleModalLabel">Chọn ngày và cửa hàng báo cáo</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="md-form">
                <label for="date-picker">Chọn ngày</label>
                <input type="date" class="form-control" id="date">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary" id="get-report">Hiển thị báo cáo</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- common function -->
  <script>
    const getNestedValue = (obj) => {
      var value = obj ? (obj.value !== '' ? obj.value : '-') : '-'
      return value
    }

    const getCustomArray = (array, keys, index) => {
      var abc = _(array).groupBy('itemType').map((objs, key) => {
        return {
          itemType: key,
          presentValue: _.sum(_(objs).groupBy('contractId').map((objs2, key) => {
            return objs2.map(obj => {
              return obj.presentValue
            }).pop()
          }).value()),
          array: _(objs).groupBy('storeId').map((objects, key) => {
            // console.log('objects abcdef: ', objects)
            return {
              storeId: key,
              receipts: _(objects).flatMap('array').groupBy('receiptId').map((objects, key) => {
                switch (index) {
                  case 1:
                    var def = _.zipObject(keys, keys.map(key => _.sum(_.map(objects, key))))
                    return { receiptId: key, value: def.paid }

                    break;
                  case 2:
                    var def = objects.length
                    return { receiptId: key, value: def }
                    break

                  default:
                    var def = _.zipObject(keys, keys.map(key => _.sum(_.map(objects, key))))
                    return { receiptId: key, value: def.paid }
                    break;
                }
              }).value(),


            }
          }).value()
        }
      }).value()
      return abc
    }

  </script>

  <!-- handle open modal -->
  <script>
    const stores = JSON.parse('<%-JSON.stringify(stores)%>')
    console.log('stores: ', stores)
    if (stores.length !== 0) {

      for (var i = 1; i <= 3; i++) {
        stores.forEach(store => {
          var th = document.createElement('th')
          th.innerHTML = store.storeName
          switch (i) {
            case 1:
              th.className = 'daily'
              break;
            case 2:
              th.className = 'monthly'
              break;
            case 3:
              th.className = 'total'
              break;

            default:
              break;
          }
          th.id = store.storeId
          th.classList.add('number-cell')
          var thClone = th.cloneNode(true)
          var thClone2 = th.cloneNode(true)
          var thClone3 = th.cloneNode(true)
          var thClone4 = th.cloneNode(true)
          var thClone5 = th.cloneNode(true)
          var thClone6 = th.cloneNode(true)
          var thClone7 = th.cloneNode(true)
          var thClone8 = th.cloneNode(true)

          document.querySelector('table#money-report-table.C-Giải-ngân-mới thead tr').appendChild(thClone);
          document.querySelector('table#case-report-table.C-Giải-ngân-mới thead tr').appendChild(thClone2)
          document.querySelector('table#money-report-table.T-Gốc thead tr').appendChild(thClone3)
          document.querySelector('table#case-report-table.T-Gốc thead tr').appendChild(thClone4)
          document.querySelector('table#money-report-table.T-Lãi thead tr').appendChild(thClone5)
          document.querySelector('table#case-report-table.T-Lãi thead tr').appendChild(thClone6)
          document.querySelector('table#money-report-table.presentValue thead tr').appendChild(thClone7)
        })

      }
    }
    document.querySelector('button#choose-date').addEventListener('click', (event) => {
      $('#myModal').modal('show')
    })
  </script>

  <!-- handle display report button clicked -->
  <script type="module">
    import { makeRequest } from '/makeRequest.js'
    import { findNestedObj } from '/findNestedObj.js'
    import { exportHTMLTableToExcel } from '/exportHTMLTableToExcel.js'
    var dailyMoneyReport = JSON.parse('<%- JSON.stringify(dailyMoneyReport)%>')
    console.log('daily money report: ', dailyMoneyReport)
    var monthlyMoneyReport = JSON.parse('<%- JSON.stringify(monthlyMoneyReport)%>')
    console.log('monthly money report: ', monthlyMoneyReport)
    var totalMoneyReport = JSON.parse('<%- JSON.stringify(totalMoneyReport)%>')
    console.log('total money report: ', totalMoneyReport)

    document.querySelector('input#display-date').value = new Date(Date.now()).toLocaleDateString()

    const createItemColumn = (array, query) => {
      array.forEach(report => {
        var tr = document.createElement('tr')
        tr.id = report.itemType
        var th = document.createElement('th')
        th.innerHTML = report.itemType
        th.className = report.itemType
        th.style.textAlign = 'center'
        tr.appendChild(th)
        document.querySelector(`${query} tbody`).appendChild(tr)
      })
    }

    const displayTable = (array, query, type, receiptId, keyIndex = 0) => {
      document.querySelectorAll(`${query} thead th.${type}`).forEach(element1 => {
        document.querySelectorAll(`${query} tbody tr`).forEach(element2 => {
          var th = document.createElement('th')
          var obj = findNestedObj(array, 'itemType', element2.id)
          // console.log('obj: ', obj, ', itemType: ', element2.id, ', storeid: ', element1.id)
          if (obj) {
            if (keyIndex === 0) {
              var obj2 = findNestedObj(obj.array, 'storeId', element1.id)
              if (obj2) {
                // console.log('obj2: ', obj2, ', receiptid: ', obj2.receipts)
                th.innerHTML = getNestedValue(findNestedObj(obj2.receipts, 'receiptId', receiptId)).toLocaleString()
              } else {
                th.innerHTML = '-'
              }

            } else {
             
              th.innerHTML = obj.presentValue.toLocaleString()
            }

          } else {
            th.innerHTML = '-'
          }
          if(element1.classList.contains('number-cell')||element2.classList.contains('number-cell')){
                th.style.textAlign = 'right'
              }
          element2.appendChild(th)

        })
      })
    }

    const calculateRowSum = () => {
      document.querySelectorAll('table').forEach(table => {
        table.querySelectorAll('tbody tr').forEach(tr => {
          var sum = 0
          tr.querySelectorAll('th#total').forEach(th => {
            sum += parseFloat(th.textContent) ? parseFloat(th.textContent.split(',').join('')) : 0
          })
          var th = document.createElement('th')
          th.innerHTML = sum?sum.toLocaleString():'-'
          tr.appendChild(th)
        })
      })

    }

    const calculateColumnSum = (query) => {
      // document.querySelector(`${query} tbody`).removeChild(document.querySelector(`${query} tbody`).lastChild)
      var tr = document.createElement('tr')
      document.querySelectorAll(`${query} thead th`).forEach((element, index) => {
        var th = document.createElement('th')
        if (index === 0) {
          th.innerHTML = 'Total'
          th.style.textAlign = 'center'

        } else {
          var sum = 0
          document.querySelectorAll(`${query} tbody tr`).forEach(tr => {
            sum += tr.querySelectorAll('th')[index] ? (parseFloat(tr.querySelectorAll('th')[index].textContent) ?
              parseFloat(tr.querySelectorAll('th')[index].textContent.split(',').join('')) : 0) : 0

          })
          th.innerHTML = sum?sum.toLocaleString():'-'
          th.style.textAlign = 'right'

          tr.appendChild(th)

        }
        tr.appendChild(th)

      })
      document.querySelector(`${query} tbody`).appendChild(tr)

    }

    const handleReportArray = (dailyMoneyReportParam, monthlyMoneyReportParam, totalMoneyReportParam) => {
      let keys = ['root', 'paid', 'remain']
      var dailyMoneyReport = getCustomArray(dailyMoneyReportParam, keys, 1)
      console.log('daily money report: ', dailyMoneyReport)
      var monthlyMoneyReport = getCustomArray(monthlyMoneyReportParam, keys, 1)
      console.log('monthly money report: ', monthlyMoneyReport)
      var totalMoneyReport = getCustomArray(totalMoneyReportParam, keys, 1)
      console.log('total money report: ', totalMoneyReport)

      var dailyCaseReport = getCustomArray(dailyMoneyReportParam, keys, 2)
      console.log('daily case report: ', dailyCaseReport)
      var monthlyCaseReport = getCustomArray(monthlyMoneyReportParam, keys, 2)
      console.log('monthly case report: ', monthlyCaseReport)
      var totalCaseReport = getCustomArray(totalMoneyReportParam, keys, 2)
      console.log('total case report: ', totalCaseReport)

      document.querySelectorAll('table tbody').forEach(tbody => {
        tbody.innerHTML = ''
      })

      // create table header based on number of store id
      createItemColumn(totalMoneyReport, 'table.table1')
      displayTable(dailyMoneyReport, 'table.table1', 'daily', 'C-Giải ngân mới')
      displayTable(monthlyMoneyReport, 'table.table1', 'monthly', 'C-Giải ngân mới')
      displayTable(totalMoneyReport, 'table.table1', 'total', 'C-Giải ngân mới')
      calculateColumnSum('table.table1')

      createItemColumn(totalMoneyReport, 'table.table2')
      displayTable(dailyCaseReport, 'table.table2', 'daily', 'C-Giải ngân mới')
      displayTable(monthlyCaseReport, 'table.table2', 'monthly', 'C-Giải ngân mới')
      displayTable(totalCaseReport, 'table.table2', 'total', 'C-Giải ngân mới')
      calculateColumnSum('table.table2')

      createItemColumn(totalMoneyReport, 'table.table3')
      displayTable(dailyMoneyReport, 'table.table3', 'daily', 'T-Gốc')
      displayTable(monthlyMoneyReport, 'table.table3', 'monthly', 'T-Gốc')
      displayTable(totalMoneyReport, 'table.table3', 'total', 'T-Gốc')
      calculateColumnSum('table.table3')

      createItemColumn(totalMoneyReport, 'table.table4')
      displayTable(dailyCaseReport, 'table.table4', 'daily', 'T-Gốc')
      displayTable(monthlyCaseReport, 'table.table4', 'monthly', 'T-Gốc')
      displayTable(totalCaseReport, 'table.table4', 'total', 'T-Gốc')
      calculateColumnSum('table.table4')

      createItemColumn(totalMoneyReport, 'table.table5')
      displayTable(dailyMoneyReport, 'table.table5', 'daily', 'T-Lãi')
      displayTable(monthlyMoneyReport, 'table.table5', 'monthly', 'T-Lãi')
      displayTable(totalMoneyReport, 'table.table5', 'total', 'T-Lãi')
      calculateColumnSum('table.table5')

      createItemColumn(totalMoneyReport, 'table.table6')
      displayTable(dailyCaseReport, 'table.table6', 'daily', 'T-Lãi')
      displayTable(monthlyCaseReport, 'table.table6', 'monthly', 'T-Lãi')
      displayTable(totalCaseReport, 'table.table6', 'total', 'T-Lãi')
      calculateColumnSum('table.table6')

      createItemColumn(totalMoneyReport, 'table.table7')
      displayTable(dailyMoneyReport, 'table.table7', 'daily', 'presentValue', 1)
      displayTable(monthlyMoneyReport, 'table.table7', 'monthly', 'presentValue', 1)
      displayTable(totalMoneyReport, 'table.table7', 'total', 'presentValue', 1)
      calculateColumnSum('table.table7')

      // calculate sum of rows
      // calculateRowSum()

    }

    document.querySelector('button#get-report').addEventListener('click', (event) => {
      const obj = {}
      document.querySelectorAll('.modal .modal-body input').forEach(element => {
        obj[element.id] = element.value
      })
      console.log('obj: ', obj)
      makeRequest('POST', 'statisticReport/getReport', 'application/json', JSON.stringify(obj), (result) => {
        var dailyMoneyReport = result.dailyMoneyReport
        var monthlyMoneyReport = result.monthlyMoneyReport
        var totalMoneyReport = result.totalMoneyReport
        handleReportArray(dailyMoneyReport, monthlyMoneyReport, totalMoneyReport)
        document.querySelector('input#display-date').value = new Date(document.querySelector('input#date').value).toLocaleDateString()

        $('#myModal').modal('hide')

      })

    })

    document.querySelector('button#export').addEventListener('click', event => {
      exportHTMLTableToExcel(['table1', 'table2', 'tableBreak1', 'table3',
        'table4', 'tableBreak2', 'table5', 'table6', 'tableBreak3', 'table7', 'tableBreak4',],
        `Thống_kê_báo_cáo_${new Date(Date.now()).toLocaleDateString()}`)
    })

  </script>



</body>

</html>