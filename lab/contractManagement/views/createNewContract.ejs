<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <!-- Bootstrap core CSS -->
  <link href="/mdbootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="/mdbootstrap/css/mdb.min.css" rel="stylesheet">
  <link href="/mdbootstrap/css/style.css" rel="stylesheet">


  <!-- material design.io -->
  <link href="/material-components-web/dist/material-components-web.min.css" rel="stylesheet">
  <script src="/material-components-web/dist/material-components-web.min.js"></script>
  <link href="/font-awesome/css/font-awesome.min.css">

  <style>
    .tab-content{
      max-height: 550px;
      overflow-y: scroll;
    }
    .tab-content::-webkit-scrollbar {
      display: none;
    }
  </style>
</head>

<body>
  <!-- item list template -->
  <%- include('../../evaluationMng/views/itemList.ejs') %>

  <!-- contract template -->
  <%- include("./contractPreviewTemplate.ejs") %>


  <div class="d-flex" id="wrapper">
    <%- include('../../evaluationMng/views/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <%- include('../../evaluationMng/views/navbar.ejs')  %>
      <style>
        body {
          overflow: auto;
          -ms-overflow-style: none;
        }

        body::-webkit-scrollbar {
          display: none;
        }

        .col-sm.side {
          max-height: 100vh;
          overflow-y: auto;
          -ms-overflow-style: none;
        }

        .col-sm.side::-webkit-scrollbar {
          display: none;
        }
      </style>

      <!-- page content -->
      <div class="container" style="margin: 0; border: none;">
        <div class="row" style="width: 100vw; height: 100%;">
          <!-- contract column -->
          <div class="col-sm" id="contract-info-container" style="padding: 5%;">
            <!-- contract form -->
            <!-- Default form contact -->
            <form class="text-center " action="" style="width: 100%;">

              <p class="h4 mb-4">Tao Moi Hop Dong</p>

              <!-- contract template -->
              <div id="contract-template-container"></div>

              <!-- contract item  -->
              <div class="contract-item">
                <p class="h4 mb-4">Thong tin tai san</p>

                <!-- custom info -->
                <div class="contract-item-container">
                  <div class="item-container" style="margin: 5% 0; padding: 3%;">
                    <p class="h5">Tai san <span id="number"></span></p>
                    <div id="custom-info"></div>
                    <p class="h6 mb-4">Thong tin tai san tham dinh</p>
                    <div id="item-evaluation">

                    </div>
                    <p class="h6 mb-4">Thong tin tinh trang tai san</p>
                    <div id="item-status">

                    </div>
                  </div>
                  <!-- <template id="item-evaluation-template">
                    
                    
                  </template> -->

                </div>
              </div>

            </form>

            <button class="btn btn-default" id="btn-add-item">Add new item</button>

            <!-- Send button -->
            <button class="btn btn-primary" id="btn-submit">Create</button>
            <!-- Default form contact -->
          </div>

          <!-- item list column -->
          <div class="col-sm-4 side-4">
            <ul class="nav nav-tabs" id="myTab" role="tablist">
              <li class="nav-item">
                <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home"
                  aria-selected="true">Tham dinh tai san</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab"
                  aria-controls="profile" aria-selected="false">Tinh trang tai san</a>
              </li>

            </ul>
            <div class="tab-content" id="myTabContent">
              <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab"
                style="overflow-y: auto;">
                <div id="item-list-table-container"></div>
              </div>
              <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab"
                style="overflow-y: auto;">
                <div id="item-status-list-table-container"></div>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="/mdbootstrap/js/popper.min.js"></script>
  <script src="/mdbootstrap/js/jquery.min.js"></script>
  <script src="/mdbootstrap/js/bootstrap.min.js"></script>
  <script src="/mdbootstrap/js/mdb.min.js"></script>
  <script src="/jquery.redirect/jquery.redirect.js"></script>

  <script type="module">
    import { generateHTML } from '/generateHTML.js'
    import { generateContractTemplateHTML } from '/generateContractTemplateHTML.js'
    
    var originItemList = <%- JSON.stringify(itemResults) %>;
    var originContractTemplate = <%- JSON.stringify(contractInfo) %>;
    var originItemStatusList = <%- JSON.stringify(statusResults) %>;


      console.log('origin contract template: ', originContractTemplate)

    const template = document.querySelector('#quan-ly-tham-dinh-gia')
    const contractTemplate = document.querySelector('template[id="contract-template"]')

    var currentDiv = null
    var prevDiv = null

    const checkMustHaveInfos = (item, propName) => {
      var isHaving = false
      item.infos.forEach(info => {
        if (info["name"] == propName) {
          isHaving = true
        }
      })
      return isHaving
    }

    const convertToJSON = (csv) => {
      const lines = csv.split('\n')
      var resultsInJSON = {}
      var itemObjs = []

      const type = lines[0].split(",")[0]
      const category = lines[0].split(",")[1]
      const typeValue = lines[1].split(",")[0]
      const categoryValue = lines[1].split(",")[1]
      const labels = lines[2].split(",")

      for (var i = 3; i < lines.length - 1; i++) {
        const line = lines[i].split(",")
        var itemObj = {}
        var infos = []

        for (var j = 0; j < line.length; j++) {
          var infoObj = {}
          if (line[j] !== "") {
            infoObj["name"] = labels[j]
            infoObj["value"] = line[j]
            infos.push(infoObj)
          }

        }
        itemObj["infos"] = infos
        itemObj["metadata"] = {
          type: typeValue,
          category: categoryValue
        }
        resultsInJSON[i - 1] = itemObj
        // results.push(obj)

      }
      itemObjs = Object.values(resultsInJSON)

      // check must have props


      if (itemObjs.length !== 0) {
        itemObjs = itemObjs.filter(item => {
          var itemThatHasPrice = checkMustHaveInfos(item, "Tham dinh gia")
          var itemThatHasName = checkMustHaveInfos(item, "Loai")
          if (itemThatHasPrice && itemThatHasName) {
            return item
          }
        })
        console.log('itemobjs: ', itemObjs)
        generateHTML(itemObjs, template, 'table-container')

      }


    }

    if (document.querySelector('#item-list-table-container').innerHTML) {
      document.querySelector('#item-list-table-container').innerHTML = ""
    }
    if (document.querySelector('#item-status-list-table-container').innerHTML) {
      document.querySelector('#item-status-list-table-container').innerHTML = ""
    }
    if (document.querySelector('#contract-template-container').innerHTML) {
      document.querySelector('#contract-template-container').innerHTML = ""
    }

    generateHTML(originItemList, template, 'item-list-table-container')
    generateHTML(originItemStatusList, template, 'item-status-list-table-container')
    generateContractTemplateHTML(originContractTemplate, contractTemplate, 'contract-template-container')

    document.querySelector('#btn-add-item').addEventListener('click', (event) => {
      const cData = event.target.closest('#contract-info-container').querySelector('.object-div').C_DATA
      const itemTemplateClone = document.querySelector('.item-container').cloneNode(true)
      itemTemplateClone.querySelectorAll('input').forEach(element => {
        element.value = ''
      })
      itemTemplateClone.querySelector('#item-evaluation').innerHTML = ''
      itemTemplateClone.querySelector('#item-status').innerHTML = ''
      itemTemplateClone.style.border = 'none'
      console.log('last child: ', )
      itemTemplateClone.querySelector('span').innerHTML = parseInt(document.querySelectorAll('.item-container')[document.querySelectorAll('.item-container').length -1].querySelector('span').innerHTML)+1

      itemTemplateClone.addEventListener('click', (event) => {
        prevDiv = currentDiv
        currentDiv = event.target.closest('.item-container')
        if (currentDiv !== null) {
          currentDiv.style.border = '1px solid #2BBBAD'

        }
        if (prevDiv !== null && prevDiv.isSameNode(currentDiv) === false) {
          prevDiv.style.border = 'none'

        }

        console.log('event abc: ', currentDiv)
      })
      document.querySelector('div[class="contract-item-container"]').appendChild(itemTemplateClone)

    })

    document.querySelectorAll('.item-container').forEach(element => {
      element.addEventListener('click', (event) => {
        prevDiv = currentDiv
        currentDiv = event.target.closest('.item-container')
        if (currentDiv !== null) {
          currentDiv.style.border = '1px solid #2BBBAD'

        }
        if (prevDiv !== null && prevDiv.isSameNode(currentDiv) === false) {
          currentDiv.style.border = 'none'
        }

        console.log('event abc: ', currentDiv)

      })
    })

    document.querySelector('#item-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
      element.addEventListener('click', (event) => {


        console.log('element: ', this)
        const cloneNode = event.target.parentNode.cloneNode(true)
        cloneNode.C_DATA = event.target.parentNode.C_DATA
        cloneNode.className = "object-div item"
        if (currentDiv.querySelector("#item-evaluation")) {
          currentDiv.querySelector("#item-evaluation").innerHTML = ''
        }
        currentDiv.querySelector("#item-evaluation").appendChild(cloneNode)
      })
    })

    document.querySelector('#item-status-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
      element.addEventListener('click', (event) => {
        const itemStatusDiv = currentDiv.querySelector("#item-status")
        const cloneNode = event.target.parentNode.cloneNode(true)
        cloneNode.C_DATA = event.target.parentNode.C_DATA
        cloneNode.className = "object-div item-status"

        const removeButton = document.createElement('i')
        removeButton.className = "fa fa-times"
        removeButton.style.fontSize = "25px"
        removeButton.style.margin = "12px"

        removeButton.style.color = '#bdbdbd '
        // removeButton.className = "btn"
        // removeButton.style.backgroundColor = "#e0e0e0"
        // removeButton.innerHTML = '<i class="fa fa-times"></i>'

        removeButton.addEventListener('click', (event) => {
          console.log('event: ', event.target)
          event.target.closest('div[id="item-status"]').removeChild(event.target.closest('.object-div'))
          // event.target.parentNode.parentNode.parentNode.removeChild(event.target.parentNode.parentNode)
        })
        cloneNode.querySelector('div[class="mdc-data-table__header-row header-row-div"]').appendChild(removeButton)

        // prevent duplicate 
        var isChosen = false
        if (itemStatusDiv.firstChild) {
          itemStatusDiv.querySelectorAll('div[class="object-div"]').forEach(div => {
            if (cloneNode.isEqualNode(div)) {
              console.log('div: ', div)
              isChosen = true

              itemStatusDiv.removeChild(div)
            }
          })
          if (!isChosen) {
            itemStatusDiv.appendChild(cloneNode)
            itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })

          }
        } else {
          itemStatusDiv.appendChild(cloneNode)
          itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })


        }
      })
    })

    document.querySelector('button[id="btn-submit"]').addEventListener('click', (event) => {
      var data = {
        metadata: [],
        items: [],
       
      }

      // metadata
      const contractInfoContainer = event.target.closest('#contract-info-container')
      const cData = contractInfoContainer.querySelector('#contract-template-container').querySelector('.object-div').C_DATA
      data.metadata = cData.contractMetadata

      // item info
      const contractItemContainer = contractInfoContainer.querySelector('.contract-item-container')
      contractItemContainer.querySelectorAll('.item-container').forEach(itemContainer => {
        var itemInfo = {
          infos: [],
          evaluationItem: null,
          status: []
        }
        // custom info
        itemContainer.querySelectorAll('.md-form').forEach(element => {
          var input = {}
          const label = element.querySelector('label').innerHTML
          const value = element.querySelector('input').value
          input = {
            name: label,
            value: value
          }
          itemInfo.infos.push(input)
        })

        // evaluation item and item status
        var item = itemContainer.querySelector('#item-evaluation').querySelector('.object-div')
        if (item) {
          itemInfo.evaluationItem = item.C_DATA._id
        }
        var itemStatus = itemContainer.querySelector('#item-status').querySelectorAll('.object-div')
        if (itemStatus) {
          itemStatus = itemStatus.forEach(element => itemInfo.status.push(element.C_DATA._id))
        }
        
        data.items.push(itemInfo)
      })


      $.redirect("contracts", { data: JSON.stringify(data) }, "POST");

      console.log('data: ', data)
    })
  </script>
</body>

</html>