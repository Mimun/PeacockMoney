<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>

  <style>
    .tab-content {
      max-height: 550px;
      overflow-y: scroll;
    }

    .tab-content::-webkit-scrollbar {
      display: none;
    }

    .tabs {
      position: fixed;
    }

    #item-evaluation .bmd-form-group,
    #item-status .bmd-form-group,
    .tabs .bmd-form-group {
      width: 100%;
      padding: 0 !important;
    }

    .col-sm.side {
      max-height: 100vh;
      overflow-y: auto;
      -ms-overflow-style: none;
    }

    .col-sm.side::-webkit-scrollbar {
      display: none;
    }

    strong {
      font-size: 20px;
    }

    .form-group {
      width: fit-content;
      min-width: 201px;
      margin: 0 8px;
    }

    .info-container {
      margin: 8px;
    }

    .info-container:hover {
      background-color: #f5f5f5 !important;
    }

    .info-div {
      padding: 8px 48px;
    }

    .title {
      font-weight: bold;
      margin: 8px 0;
    }
  </style>
</head>

<body>
  <!-- item list template -->
  <%- include('../../evaluationMng/views/itemList.ejs') %>

  <!-- contract template -->
  <%- include("./contractPreviewTemplate.ejs") %>

  <!-- navbar -->
  <%- include('../Components/navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>
    <div id="page-content-wrapper">
      <!-- page content -->
      <div class="container" style="margin: 0; border: none;">
        <div class="row" style="width: 100vw; height: 100%;">
          <!-- contract column -->
          <div class="col-sm" id="contract-info-container" style="padding: 48px;">
            <!-- contract form -->
            <!-- Default form contact -->
            <form action="" style="width: 100%;">

              <p class="h4 mb-4">Tạo mới hợp đồng</p>

              <!-- contract template -->
              <div id="contract-template-container"></div>

              <!-- contract item  -->
              <div class="contract-item info-container">
                <div class="title">IV. Thông tin tài sản</div>

                <!-- custom info -->
                <div class="contract-item-container">
                  <div class="item-container info-div" style="margin-bottom: 32px;">
                    <p class="h5">Tài sản <span id="number"></span></p>
                    <div id="custom-info" class="d-flex flex-wrap justify-content-start"></div>
                    <p class="h6 mb-4">Thông tin tài sản thẩm định</p>
                    <div id="item-evaluation">

                    </div>
                    <p class="h6 mb-4">Thông tin tình trạng tài sản</p>
                    <div id="item-status">

                    </div>
                  </div>
                </div>
              </div>

            </form>

            <button class="btn btn-raised btn-primary" id="btn-add-item">Thêm tài sản</button>

            <!-- Send button -->
            <button class="btn btn-primary" id="btn-submit">Tạo</button>
            <!-- Default form contact -->
          </div>

          <!-- item list column -->
          <div class="col-sm-5 side-5">

            <div class="tabs">

              <ul class="nav nav-tabs " id="myTab" role="tablist">
                <li class="nav-item">
                  <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab"
                    aria-controls="home" aria-selected="true">Tài sản thẩm định</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab"
                    aria-controls="profile" aria-selected="false">Tình trạng tài sản</a>
                </li>

              </ul>
              <div class="search">
                <form class="input-group form-sm form-2 pl-0" id="search">
                  <input class="form-control my-0 py-1" type="text" placeholder="Search" aria-label="Search">
                  <div class="input-group-prepend">
                    <span class="input-group-text cyan lighten-3" id="basic-text1"><i class="fa fa-search text-grey"
                        aria-hidden="true"></i></span>
                  </div>
                </form>
              </div>
              <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab"
                  style="overflow-y: auto;">
                  <div id="item-list-table-container"></div>
                </div>
                <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab"
                  style="overflow-y: auto;">
                  <div id="item-status-list-table-container"></div>
                </div>

              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>

  <script type="module">
    import { generateHTML } from '/generateHTML.js'
    import { generateContractTemplateHTML } from '/generateContractTemplateHTML.js'
    import { findNestedObj } from '/findNestedObj.js'
    import { searchFunction } from '/searchFunction.js'
    import { makeRequest } from '/makeRequest.js'
    import { addSeparatorOnInputChange, removeSeperator } from '/addSeparatorOnInputChange.js'

    var originItemList = <%- JSON.stringify(itemResults) %>;
    var originItemStatusList = <%- JSON.stringify(statusResults) %>;
    var originContractTemplate = <%- JSON.stringify(contractInfo) %>;
    var stores = <%- JSON.stringify(stores) %>;
    var contractNow = <%- JSON.stringify(contractNow) %>;

    var evaluatingItem = window.localStorage.getItem('evaluatingItem') ?
      JSON.parse(window.localStorage.getItem('evaluatingItem')) : null
    var itemStatus = window.localStorage.getItem('itemStatus') ?
      JSON.parse(window.localStorage.getItem('itemStatus')) : null

    console.log('item list: ', originItemList)
    console.log('item status: ', originItemStatusList)
    console.log('stores: ', stores)
    console.log('contract now: ', contractNow)

    const template = document.querySelector('#quan-ly-tham-dinh-gia')
    const contractTemplate = document.querySelector('template[id="contract-template"]')

    // display chosen evaluating item if user chose from 'evaluating' page
    if (evaluatingItem) {
      generateHTML([evaluatingItem], template, "item-evaluation")
    }
    if (itemStatus) {
      generateHTML(itemStatus, template, "item-status")
      document.querySelector('#item-status').querySelectorAll('.object-div').forEach(div => {
        const removeButton = document.createElement('button')
        removeButton.className = "btn btn-sm"
        removeButton.innerHTML = `<span class="material-icons">remove</span>`
        removeButton.addEventListener('click', (event) => {
          event.preventDefault()
          console.log('event: ', event.target)
          event.target.closest('div.mdc-data-table').removeChild(event.target.closest('.object-div'))
          // event.target.parentNode.parentNode.parentNode.removeChild(event.target.parentNode.parentNode)
        })
        div.querySelector('div.mdc-data-table__header-row.header-row-div').appendChild(removeButton)
      })

    }

    var currentDiv = null
    var prevDiv = null

    const checkMustHaveInfos = (item, propName) => {
      var isHaving = false
      item.infos.forEach(info => {
        if (info["name"] == propName) {
          isHaving = true
        }
      })
      return isHaving
    }

    const convertToJSON = (csv) => {
      const lines = csv.split('\n')
      var resultsInJSON = {}
      var itemObjs = []

      const type = lines[0].split(",")[0]
      const category = lines[0].split(",")[1]
      const typeValue = lines[1].split(",")[0]
      const categoryValue = lines[1].split(",")[1]
      const labels = lines[2].split(",")

      for (var i = 3; i < lines.length - 1; i++) {
        const line = lines[i].split(",")
        var itemObj = {}
        var infos = []

        for (var j = 0; j < line.length; j++) {
          var infoObj = {}
          if (line[j] !== "") {
            infoObj["name"] = labels[j]
            infoObj["value"] = line[j]
            infos.push(infoObj)
          }

        }
        itemObj["infos"] = infos
        itemObj["metadata"] = {
          type: typeValue,
          category: categoryValue
        }
        resultsInJSON[i - 1] = itemObj
        // results.push(obj)

      }
      itemObjs = Object.values(resultsInJSON)

      // check must have props


      if (itemObjs.length !== 0) {
        itemObjs = itemObjs.filter(item => {
          var itemThatHasPrice = checkMustHaveInfos(item, "Tham dinh gia")
          var itemThatHasName = checkMustHaveInfos(item, "Loai")
          if (itemThatHasPrice && itemThatHasName) {
            return item
          }
        })
        console.log('itemobjs: ', itemObjs)
        generateHTML(itemObjs, template, 'table-container')

      }


    }

    if (document.querySelector('#item-list-table-container').innerHTML) {
      document.querySelector('#item-list-table-container').innerHTML = ""
    }
    if (document.querySelector('#item-status-list-table-container').innerHTML) {
      document.querySelector('#item-status-list-table-container').innerHTML = ""
    }
    if (document.querySelector('#contract-template-container').innerHTML) {
      document.querySelector('#contract-template-container').innerHTML = ""
    }

    if (originItemList.length !== 0) {
      generateHTML(originItemList, template, 'item-list-table-container')
    }
    if (originItemStatusList.length !== 0) {
      generateHTML(originItemStatusList, template, 'item-status-list-table-container')
    }
    generateContractTemplateHTML(originContractTemplate, contractTemplate, 'contract-template-container', stores)


    document.querySelector('#btn-add-item').addEventListener('click', (event) => {
      const cData = event.target.closest('#contract-info-container').querySelector('.object-div').C_DATA
      const itemTemplateClone = document.querySelector('.item-container').cloneNode(true)
      itemTemplateClone.querySelectorAll('input').forEach(element => {
        element.value = ''
      })
      itemTemplateClone.querySelector('#item-evaluation').innerHTML = ''
      itemTemplateClone.querySelector('#item-status').innerHTML = ''
      itemTemplateClone.style.border = 'none'
      console.log('last child: ',)
      itemTemplateClone.querySelector('span').innerHTML = parseInt(document.querySelectorAll('.item-container')[document.querySelectorAll('.item-container').length - 1].querySelector('span').innerHTML) + 1

      itemTemplateClone.addEventListener('click', (event) => {
        prevDiv = currentDiv
        currentDiv = event.target.closest('.item-container')
        if (currentDiv !== null) {
          currentDiv.style.border = '1px solid #2BBBAD'

        }
        if (prevDiv !== null && prevDiv.isSameNode(currentDiv) === false) {
          prevDiv.style.border = 'none'

        }

      })

      // remove item button
      const delBtn = document.createElement('button')
      delBtn.className = 'btn btn-primary btn-sm'
      delBtn.innerHTML = `<span class="material-icons">remove</span>`
      delBtn.addEventListener('click', (event) => {
        event.preventDefault()
        console.log('event: ', event.target.closest('.contract-item-container'))
        event.target.closest('.contract-item-container').removeChild(event.target.closest('.item-container'))

      })
      itemTemplateClone.querySelector('p').appendChild(delBtn)
      document.querySelector('div[class="contract-item-container"]').appendChild(itemTemplateClone)
      $(itemTemplateClone).bootstrapMaterialDesign()

    })

    document.querySelectorAll('.item-container').forEach(element => {
      element.addEventListener('click', (event) => {
        prevDiv = currentDiv
        currentDiv = event.target.closest('.item-container')
        if (currentDiv !== null) {
          currentDiv.style.border = '1px solid #2BBBAD'

        }
        if (prevDiv !== null && prevDiv.isSameNode(currentDiv) === false) {
          prevDiv.style.border = 'none'
        }
      })
    })

    const chooseItem = () => {
      document.querySelector('#item-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
        element.addEventListener('click', (event) => {
          console.log('click: ', event.target.closest('.object-div'))
          const cloneNode = event.target.closest('.object-div').cloneNode(true)
          cloneNode.C_DATA = event.target.closest('.object-div').C_DATA
          cloneNode.className = "object-div item"
          if (currentDiv.querySelector("#item-evaluation")) {
            currentDiv.querySelector("#item-evaluation").innerHTML = ''
          }
          currentDiv.querySelector("#item-evaluation").appendChild(cloneNode)
        })
      })
    }
    chooseItem()

    const chooseItemStatus = () => {
      document.querySelector('#item-status-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
        element.addEventListener('click', (event) => {
          const itemStatusDiv = currentDiv.querySelector("#item-status")
          const cloneNode = event.target.closest('.object-div').cloneNode(true)
          cloneNode.C_DATA = event.target.closest('.object-div').C_DATA
          cloneNode.className = "object-div item-status"
          const removeButton = document.createElement('button')
          removeButton.className = "btn btn-sm"
          removeButton.innerHTML = `<span class="material-icons">remove</span>`
          removeButton.addEventListener('click', (event) => {
            console.log('event: ', event.target)
            event.target.closest('div[id="item-status"]').removeChild(event.target.closest('.object-div'))
            // event.target.parentNode.parentNode.parentNode.removeChild(event.target.parentNode.parentNode)
          })
          cloneNode.querySelector('div[class="mdc-data-table__header-row header-row-div"]').appendChild(removeButton)

          // prevent duplicate 
          var isChosen = false
          if (itemStatusDiv.firstChild) {
            itemStatusDiv.querySelectorAll('div[class="object-div"]').forEach(div => {
              if (cloneNode.isEqualNode(div)) {
                console.log('div: ', div)
                isChosen = true

                itemStatusDiv.removeChild(div)
              }
            })
            if (!isChosen) {
              itemStatusDiv.appendChild(cloneNode)
              itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })

            }
          } else {
            itemStatusDiv.appendChild(cloneNode)
            itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })


          }
        })
      })
    }
    chooseItemStatus()

    // format date to YYYY-MM-DD
    function formatDate(date) {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      return [day, month, year].join('');
    }

    const createContractCustomId = (contractNow, storeId, createdDate) => {
      var date = createdDate ? formatDate(createdDate) : formatDate(new Date(Date.now())), index = 0
      console.log('created date: ', createdDate)
      console.log('formatted date: ', date)

      if (contractNow.length === 0) {
        return `${storeId}.${date}.${index}`
      } else {
        var latestContract = contractNow[contractNow.length - 1]
        return `${storeId}.${date}.${parseInt(latestContract.id.split('.')[2]) + 1}`
      }
    }

    // create new contract button
    document.querySelector('button[id="btn-submit"]').addEventListener('click', (event) => {
      const contractInfoContainer = event.target.closest('#contract-info-container')
      const contractTemplateContainer = contractInfoContainer.querySelector('#contract-template-container').querySelector('.object-div')
      const cData = contractTemplateContainer.C_DATA

      var data = { ...cData, contractMetadata: [], infos: [], items: [], store: null, employee: null, id: null }
      delete data._id
      // create custom id for contract
      var storeSelect = contractTemplateContainer.querySelector('select[name="store"]')
      var storeCustomId = storeSelect.options[storeSelect.selectedIndex].getAttribute('name')
      var createdDate = contractTemplateContainer.querySelector('input[name="contractCreatedDate"]').value
      data.id = createContractCustomId(contractNow, storeCustomId, createdDate)

      // contract info
      contractTemplateContainer.querySelectorAll('select').forEach(select => {
        var name = select.getAttribute('name')
        var value = select.value
        var type = 'text'
        var dataVie = select.getAttribute('data-vie')
        var dataKor = select.getAttribute('data-kor')
        data[name] = {
          name,
          value: select.value ? select.value : null,
          type,
          dataVie,
          dataKor
        }


      })

      // contract metadata
      contractTemplateContainer.querySelectorAll('input').forEach(input => {
        var name = input.getAttribute('name')
        var value = input.value
        var type = input.type
        var dataVie = input.getAttribute('data-vie')
        data.contractMetadata.push({
          name: name,
          value: input.getAttribute('data-type') === 'currency' ? removeSeperator(value) : value,
          cType: type,
          dataVie: dataVie,
          dataKor: 'koreanString'
        })

      })

      // item info
      const contractItemContainer = contractInfoContainer.querySelector('.contract-item-container')
      contractItemContainer.querySelectorAll('.item-container').forEach(itemContainer => {
        var itemInfo = {
          infos: [],
          evaluationItem: null,
          status: []
        }
        // custom info
        itemContainer.querySelectorAll('.form-group').forEach(element => {
          var input = {}
          const label = element.querySelector('label').innerHTML
          const value = element.querySelector('input').value
          input = {
            name: label,
            value: value
          }
          itemInfo.infos.push(input)
        })

        // evaluation item and item status
        var item = itemContainer.querySelector('#item-evaluation').querySelector('.object-div')
        if (item) {
          itemInfo.evaluationItem = item.C_DATA
        }
        var itemStatus = itemContainer.querySelector('#item-status').querySelectorAll('.object-div')
        if (itemStatus) {
          itemStatus = itemStatus.forEach(element => itemInfo.status.push(element.C_DATA))
        }

        data.items.push(itemInfo)
      })

      var valueNeedToBeApproved = findNestedObj(data.contractMetadata, 'name', 'valueNeedToBeApproved').value
      var loan = findNestedObj(data.contractMetadata, 'name', 'loan').value
      if(loan> valueNeedToBeApproved){
        data.contractStatus = 'pending'
      }
      console.log('data: ', data)
      makeRequest('POST', '/contractMng/contracts', 'application/json', JSON.stringify(data), () => {
        window.localStorage.removeItem('evaluatingItem')
        window.localStorage.removeItem('itemStatus')
        window.location.href = '/contractMng/waitingContracts?token=' + window.localStorage.getItem('accessToken')
      })

    })

    // search function
    document.querySelector('#search').addEventListener('submit', (event) => {
      event.preventDefault()
      var array = event.target.querySelector('input').value.split(" ")
      makeRequest('POST', '/contractMng/search', 'application/json', JSON.stringify({ data: array }), (result) => {
        searchFunction(originItemList, result.itemResults, template, 'item-list-table-container')
        chooseItem()

        searchFunction(originItemStatusList, result.itemStatusResults, template, 'item-status-list-table-container')
        chooseItemStatus()
      })

    })

    addSeparatorOnInputChange()

  </script>

</body>

</html>