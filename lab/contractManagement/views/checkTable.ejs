<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet"
    href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css">
  <style>
    .block-container {
      border: 1px solid lightgrey;
      margin: 16px 0;
      padding: 32px 48px;
    }

    table th {
      text-align: right;
    }
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>

  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>

    <div id="page-content-wrapper">
      <h1>Bảng theo dõi gói vay</h1>
      <div class="container" style="margin: 0 !important;
      padding: 0 !important;
      max-width: 100%;">
        <!-- penalty rule -->
        <div class="row block-container">
          <!-- penalty rule -->
          <div class="col">
            <div class="penalty-table">
              <h3>Bảng quy định cách phạt</h3>
              <table class="table table-responsive table-hover  penalty-table">
                <thead>
                  <tr>
                    <th id="from">Từ</th>
                    <th id="to">Đến</th>
                    <th id="penaltyRate">Phạt</th>
                    <th id="debtFrom">Nợ gốc từ</th>
                    <th id="debtTo">Nợ gốc đến</th>
                    <th id="policyType">Kiểu phạt</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>

          <!-- block rule -->
          <div class="col">
            <div class="block-table">
              <h3>Bảng quy định block</h3>
              <table class="table table-responsive table-hover  block-table">
                <thead>
                  <tr>
                    <th id="block">Block</th>
                    <th id="preBlockPenalty">Phạt trước block</th>
                    <th id="postBlockPenalty">Phạt sau block</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>

          <!-- loan package -->
          <div class="col">
            <div class="loan-package">
              <h3>Thông tin gói vay</h3>
            </div>
          </div>

        </div>

        <!-- package -->
        <div class="row block-container">
          <!-- simulation -->
          <div class="col">
            <div class="simulation period-table-container">
              <div class="row">
                <div class="col">
                  <h4>Bảng theo dõi chi tiết các kỳ vay, bao gồm tiền đóng theo kỳ, tiền VTTB</h4>
                </div>
                <div class="col">
                  <p id="real-date-counter">Ngày hiện tại: <span></span></p>
                </div>
                <div class="col">
                  <button class="btn btn-primary" id="btn-choose-column">Chọn cột hiển thị</button>
                </div>
              </div>
              <div class="row">
                <table class="table table-responsive table-bordered table-striped table-hover period-table">
                  <thead>
                    <tr>
                      <th scope="col" id="numericalOrder">STT</th>
                      <th scope="col" id="id">Mã kỳ</th>
                      <th scope="col" id="redemptionDate">Ngày đóng</th>
                      <th scope="col" class="number-cell" id="redemption">Số tiền đóng (gốc hàng tháng + lãi)</th>
                      <th scope="col" class="number-cell" id="interest">Lãi phải thu</th>
                      <th scope="col" class="number-cell" id="paidInterest">Lãi đã thu</th>
                      <th scope="col" class="number-cell" id="remainInterest">Lãi còn lại</th>
                      <th scope="col" class="number-cell" id="accumulatedPaidInterest">Lãi đã trả lũy kế</th>

                      <th scope="col" class="number-cell" id="principal">Gốc phải thu</th>
                      <th scope="col" class="number-cell" id="paidPrincipal">Gốc đã thu</th>
                      <th scope="col" class="number-cell" id="remainPrincipal">Gốc còn lại</th>
                      <th scope="col" class="number-cell" id="incrementalPaidPrincipal">Gốc đã trả cộng dồn</th>

                      <th scope="col" class="number-cell" id="totalPenalty">TỔng phạt phải thu</th>
                      <th scope="col" class="number-cell" id="paidTotalPenalty">Tổng phạt đã thu</th>
                      <th scope="col" class="number-cell" id="remainTotalPenalty">Tổng phạt còn lại</th>
                      <th scope="col" class="number-cell" id="presentValue">Dư nợ còn lại</th>
                      <th scope="col" class="number-cell" id="payDown">Trả bớt</th>
                      <th scope="col" class="number-cell" id="loanMore">Vay thêm</th>
                      <th scope="col" class="number-cell" id="totalPayment">Tổng tiền đóng (tổng phạt + số tiền đóng)</th>
                      <th scope="col" class="number-cell" id="paid">Đã trả</th>
                      <th scope="col" class="number-cell" id="remain">Còn lại</th>
                      <th scope="col" id="periodStatus">Tình trạng kỳ</th>
                      <th scope="col" id="daysBetween">Số ngày đóng chậm</th>
                      <th scope="col" class="number-cell" id="penalty">Phạt đóng chậm</th>
                      <th scope="col" class="number-cell" id="blockPenalty">Phạt block</th>
                    </tr>
                  </thead>
                  <tbody>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

        </div>

        <!-- package options -->
        <div class="row block-container">
          <!-- payment section -->
          <div class="col">
            <div class="payment" id="payment">
              <h4>Đóng tiền kỳ</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <!-- <input type="number" class="form-control" id="paymentSlip"> -->
                <input type="text" class="form-control currency-field" data-type="currency" id="paymentSlip">

              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-payment-slip">Đóng tiền</button>
            </div>
          </div>

          <!-- paydown-->
          <div class="col">
            <div class="pay-down" id="pay-down">
              <h4>Trả bớt</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <!-- <input type="number" class="form-control" id="payDown"> -->
                <input type="text" class="form-control currency-field" data-type="currency" id="payDown">
                
              </div>
              <% if(simulation === 3){%>
              <div class="form-group">
                <label>So ky tao them</label>
                <input type="number" class="form-control" id="numberOfNewPeriods">
              </div>
              <% } %>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-pay-down">Trả bớt</button>
            </div>
          </div>

          <!-- loanmore -->
          <div class="col">
            <div class="loan-more" id="loan-more">
              <h4>Vay thêm</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <!-- <input type="number" class="form-control" id="loanMore"> -->
                <input type="text" class="form-control currency-field" data-type="currency" id="loanMore">

              </div>
              <% if(simulation === 3){%>
              <div class="form-group">
                <label>So ky tao them</label>
                <input type="number" class="form-control" id="numberOfNewPeriods">
              </div>
              <% } %>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-loan-more">Vay thêm</button>
            </div>
          </div>

          <!-- pâyll-->
          <div class="col">
            <div class="pay-down" id="pay-down">
              <h4>Tất toán</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <!-- <input type="number" class="form-control" id="payAll"> -->
                <input type="text" class="form-control currency-field" data-type="currency" id="payAll">
                
              </div>
              <% if(simulation === 3){%>
              <div class="form-group">
                <label>Số kỳ tạo thêm</label>
                <input type="number" class="form-control" id="numberOfNewPeriods">
              </div>
              <% } %>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-pay-all">Tất toán</button>
            </div>
          </div>

          <!-- another fee -->
          <div class="col">
            <div class="another-fee" id="another-fee">
              <h4>Phí khác</h4>
              <div class="form-group">
                <label for="receiptId" class="bmd-label-floating">Mã phiếu thu/chi</label>
                <select class="form-control" id="receiptId">
                </select>
              </div>
              <div class="form-group">
                <label>Số tiền</label>
                <!-- <input type="number" class="form-control" id="loanMore"> -->
                <input type="text" class="form-control currency-field" data-type="currency" id="loanMore">

              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-another-fee">Thực hiện</button>
            </div>
          </div>

          <!-- expand package -->
          <div class="col-1">
            <button class="btn btn-sm btn-primary" id="btn-expand">Gia hạn hợp đồng</button>
            <!-- <button class="btn btn-sm btn-primary" id="btn-undo">Undo</button> -->
            <!-- <button class="btn btn-sm btn-primary" id="btn-pay-all">Tất toán</button> -->
          </div>

          <!-- <button class="btn btn-sm" id="receipt">In phiếu</button> -->
        </div>

        <!-- payment history -->
        <div class="row block-container">
          <!-- payment history -->
          <div class="col">
            <div class="payment-history">
              <h4>Lịch sử trả tiền</h4>
              <table class="table table-responsive table-bordered table-striped table-hover payment-history-table">
                <thead>
                  <tr>
                    <th id="receiptId">Mã phiếu</th>
                    <th id="paid">Thực thu/chi</th>
                    <th id="root">Phải thu/chi</th>
                    <th id="remain">Còn lại</th>
                    <th id="receiptReason">Lý do</th>
                    <th id="type">Loại GD</th>
                    <th id="date">Ngày</th>
                    <th id="option">Option</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
         
        </div>

        <!-- loan more pay down history -->
        <div class="row block-container">
          <!-- payment history -->
          <div class="col">
            <div class="loan-more-pay-down-history">
              <h4>Lịch sử VTTB</h4>
              <table class="table table-responsive table-bordered table-striped table-hover payment-history-table">
                <thead>
                  <tr>
                    <th scope="col" id="id">Mã thu, chi</th>
                    <th scope="col" id="date">Ngày thực hiện</th>
                    <th scope="col" id="value">Số tiền VTTB</th>
                    <th scope="col" id="option">Option</th>

                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>

          <!-- payment array -->
          <div class="col">
            <div class="payment-array">
              <h4>Số lần đóng tiền</h4>
              <table class="table table-responsive table-bordered table-striped table-hover payment-array-table">
                <thead>
                  <tr>
                    <th id="addedDate">Ngày đóng/thu</th>
                    <th id="receiptType">Kiểu đóng/thu</th>
                    <th id="type">Loại tiền đóng/thu</th>
                    <th id="paymentSlip">Số tiền đóng/thu</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

    </div>

    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Chi tiết lượt đóng/thu</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body"></div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" id="edit-btn">edit</button>
            <button type="button" class="btn btn-danger" id="delete-btn">delete</button>
          </div>
        </div>
      </div>
    </div>

    <template id="input-template">
      <div class="form-group">
        <label for="exampleInputEmail1">Email address</label>
        <input type="text" class="form-control" id="input" disabled>
      </div>
    </template>
  </div>
  </div>

  <!-- common function -->
  <script>
    const formatDate = (date, type) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      switch (type) {
        // id
        case (1):
          return [day, month, year].join('');
          break
        // normal formate date
        case (2):
          return [day, month, year].join('-');
          break
        default:
          return [day, month, year].join('-');

      }

    }

    const displayTable = (object, elementName) => {
      var tr = document.createElement('tr')
      tr.C_DATA = object
      document.querySelectorAll(`div.${elementName} table thead th`).forEach((element, index) => {
        var th = document.createElement('th')
        if (object[element.id] !== undefined && object[element.id] !== null) {
          switch (element.id) {
            case('addedDate'):
            case ('redemptionDate'):
            case ('date'):
              th.innerHTML = formatDate(object[element.id])
              break
            case ('receiptType'):
              th.innerHTML = object[element.id] === 1? 'Thu': 'Chi'
              break
            case ('type'):
              th.innerHTML = object[element.id] === 'cash'? 'Tiền mặt': 'Chuyển khoản'
              break
            default:
              th.innerHTML = object[element.id].toLocaleString()

          }
        }

        th.id = element.id
        tr.id = object.period
        tr.appendChild(th)
      })
      object.isPaydownPeriod ? tr.style.backgroundColor = 'lightblue' : null
      object.isLoanMorePeriod ? tr.style.backgroundColor = 'lightgreen' : null
      document.querySelector(`div.${elementName} table tbody`).appendChild(tr)
    }

    const displayRule = (ruleObj, elementName) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`table.${elementName} thead th`).forEach(element => {
        var th = document.createElement('th')
        th.innerHTML = ruleObj[element.id]
        tr.appendChild(th)
      })
      document.querySelector(`table.${elementName} tbody`).appendChild(tr)
    }

    const getNestedValue = (obj) => {
      var value = obj ? (obj.value ? obj.value : '-') : '-'
      return value
    }
  </script>


  <!-- global variable -->
  <script type="module">
    import Record from '/record2.js'
    import { findNestedObj } from '/findNestedObj.js'
    import { addSeparatorOnInputChange, removeSeperator } from '/addSeparatorOnInputChange.js'

    // add separator to number
    addSeparatorOnInputChange()
    // var contract = JSON.parse('')
    var contract = <%- JSON.stringify(contract) %>;
    var simulation = JSON.parse('<%- JSON.stringify(simulation)%>')
    var receiptIds = JSON.parse('<%-JSON.stringify(receiptIds)%>')

    var loanPackage = new Record(contract.loanPackage)
    loanPackage.reassignPeriodRecords()
    var ruleArray = contract.penaltyRules
    var blockRuleArray = contract.blockRules

    var period = -1
    var isPause = false
    var originalValue = 100000000
    var realLifeDate = null
    var block = {}
    var totalRemainForLoaningMore = 0

    console.log('contract: ', contract)

    // display receipt id option for select
    var selectReceiptId = document.querySelector('select#receiptId')
    receiptIds.forEach(receiptId => {
      var option = document.createElement('option')
      option.value = receiptId.name
      option.setAttribute('data-type', receiptId.type)
      option.innerHTML = receiptId.name
      selectReceiptId.appendChild(option)
    })

    // penalty table
    if (ruleArray.length !== 0) {
      ruleArray.forEach(rule => {
        displayRule(rule, 'penalty-table')

      })
    }

    // block table
    if (blockRuleArray.length !== 0) {
      blockRuleArray.forEach(rule => {
        displayRule(rule, 'block-table')
      })
    }

    // loan package info
    const loanPackageForDisplaying = {
      createAt: formatDate(loanPackage.agreementDate) || 'null',
      numberOfPeriods: loanPackage.numberOfPeriods || '0',
      interestRate: loanPackage.interestRate || '0',
      originalLoan: loanPackage.remainOrigin || '0'
    }
    for (var prop in loanPackageForDisplaying) {
      var div = document.createElement('div')
      div.className = 'form-group'
      var label = document.createElement('label')
      label.innerHTML = prop
      var input = document.createElement('input')
      input.className = 'form-control'
      input.value = loanPackageForDisplaying[prop]
      div.appendChild(label)
      div.appendChild(input)
      document.querySelector('div.loan-package').appendChild(div)
    }

    // period table
    loanPackage.periodRecords.forEach(record => {
      displayTable(record, 'period-table-container')
    })

    // add print button
    const addPrintButton = (query) => {
      var button = document.createElement('button')
      button.className = 'btn btn-sm'
      button.innerHTML = 'Print'
      button.addEventListener('click', event => {
        console.log('event: ', event.target.closest('tr').C_DATA)
        // window.location.href = 
        window.open(`/contractMng/contracts/${contract._id}/receipt?token=${window.localStorage.getItem('accessToken')}&date=${event.target.closest('tr').C_DATA ? event.target.closest('tr').C_DATA.date : ''}`)
      })
      document.querySelectorAll(`div.${query} tbody tr`).forEach(element => {
        if (!element.querySelector('td')) {
          var td = document.createElement('td')
          td.appendChild(button)
          element.querySelector('th#option').appendChild(td)
        }

      })
    }

    // display payment history
    const displayPaymentHistory = () => {
      document.querySelector('div.payment-history table tbody').innerHTML = ''
    
      loanPackage.receiptRecords.forEach(element => {
        displayTable(element, 'payment-history')
        addPrintButton('payment-history')
      })


    }
    displayPaymentHistory()

    // display loan more pay down history
    const displayLoanMorePayDownHistory = () => {
      document.querySelector('div.loan-more-pay-down-history table tbody').innerHTML = ''
      if (loanPackage.loanMorePayDownRecords.length !== 0) {
        loanPackage.loanMorePayDownRecords.forEach(payment => {
          displayTable(payment, 'loan-more-pay-down-history')
          addPrintButton('loan-more-pay-down-history')
        })
      }
    }
    displayLoanMorePayDownHistory()

    // display payment array
    const displayPaymentArray = ()=>{
      document.querySelector('div.payment-array table tbody').innerHTML = ''
      loanPackage.paymentSlip.forEach(payment=>{
        displayTable(payment, 'payment-array')
      })
      document.querySelectorAll('div.payment-array table tbody tr').forEach(element=>{
        if(element){
          element.addEventListener('click', event=>{
            $('#exampleModal').modal('show')
            document.querySelector('.modal .modal-body').innerHTML = ''
            var payment = event.target.closest('tr').C_DATA
            document.querySelector('.modal .modal-body').C_DATA = payment
            for(var prop in payment){
              if(prop === 'addedDate' || prop === 'receiptType' || prop === 'paymentSlip' || prop === 'type'){
                var inputTemplate = document.querySelector('template#input-template').content.cloneNode(true)
                inputTemplate.querySelector('input').id = prop
                switch (prop) {
                  case 'addedDate':
                    inputTemplate.querySelector('label').innerHTML = 'Ngày đóng/thu'
                    inputTemplate.querySelector('input').value = formatDate(payment[prop])

                    break;
                  case 'receiptType':
                    inputTemplate.querySelector('label').innerHTML = 'Kiểu đóng/thu'
                    inputTemplate.querySelector('input').value = payment[prop] === 1? 'Thu':'Chi'
                    break
                  case 'paymentSlip':
                    inputTemplate.querySelector('label').innerHTML = 'Số tiền đóng/thu'
                    inputTemplate.querySelector('input').value = payment[prop].toLocaleString()

                    break
                  case 'type':
                    inputTemplate.querySelector('label').innerHTML = 'Loại tiền đóng/thu'
                    inputTemplate.querySelector('input').value = payment[prop] === 'cash'? 'Tiền mặt': 'Chuyển khoản'

                    break
                  default:
                    break;
                }

                document.querySelector('.modal .modal-body').appendChild(inputTemplate)
              }
              
            }
          })
        }
      })
    }
    displayPaymentArray()
    

    // delete payment 
    document.querySelector('.modal-footer button#delete-btn').addEventListener('click', async (event)=>{
      var idToFind = event.target.closest('.modal').querySelector('.modal-body').C_DATA.id

      var payment = findNestedObj(loanPackage.paymentSlip, 'id', idToFind)
      console.log('PAYMENT: ', payment)

      var presentValue =  0
      loanPackage.loanMorePayDownRecords.forEach(receipt=>{
        if(receipt.receiptType && receipt.type){
          presentValue = loanPackage.remainOrigin + parseFloat(receipt.value)
          loanPackage.presentValue = presentValue
        }
      })

      loanPackage.totalPayment = payment.receiptType === 1? loanPackage.totalPayment - payment.paymentSlip : loanPackage.totalPayment + payment.paymentSlip
      console.log('TOTAL PAYMENT AFTER DELETING RECEIPT: ', loanPackage.totalPayment)

      loanPackage.paymentSlip = loanPackage.paymentSlip.filter(obj=>obj.id !== idToFind)
      console.log('PAYMENT SLIP AFRER FILTERING: ', loanPackage.paymentSlip)

      loanPackage.periodRecords.forEach(period=>{
        period.incrementalPaidPrincipal = 0
        period.accumulatedPaidInterest = 0
        period.periodStatus = false
        period.presentValue = presentValue
        period.paidInterest = 0
        period.remainInterest = period.interest
        period.paidPrincipal = 0
        period.remainPrincipal = period.principal
        period.paidTotalPenalty = 0
        period.remainTotalPenalty = period.totalPenalty 
        period.paid = 0
        period.remain = period.totalPayment
      })

     
      console.log('LOANPACKAGE AFTER RECALCULATING: ', loanPackage)
      await new Promise((resolve, reject)=>{
        console.log('RECEIPT BEFORE REMOVING: ', loanPackage.receiptRecords)

        var removeReceipts = loanPackage.receiptRecords.filter(obj=>obj.isLoanMoreOrPayDownReceipt === false)
        console.log('REMOVE RECEIPT IN FUND: ', removeReceipts)
        $.ajax({
          type: 'POST',
          url: `/contractMng/funds3?token=${window.localStorage.getItem('accessToken')}`,
          contentType: 'application/json',
          data: JSON.stringify(removeReceipts),
          success: result=>{

          }
        })
        resolve()
      }).then(()=>{
        loanPackage.receiptRecords = loanPackage.receiptRecords.filter(obj=>obj.isLoanMoreOrPayDownReceipt!== false)
        console.log('RECEIPT RECORDS AFTER REMOVING FALSE: ', loanPackage.receiptRecords)

      })
      loanPackage.incrementalPaidPrincipal = 0
      loanPackage.accumulatedPaidInterest = 0
      loanPackage.incrementalPayment =0

      loanPackage.paymentSlip.forEach(payment=>{
        loanPackage.paidNotDonePeriod(payment.paymentSlip, payment.addedDate, loanPackage.periodRecords.filter(period=>period.periodStatus === false), payment)
      })
      updateLoanPackage(loanPackage)
      displayPaymentHistory()
      displayPaymentArray()
      $('#exampleModal').modal('hide')
     
    })

    // edit payment
    document.querySelector('.modal-footer button#edit-btn').addEventListener('click', async (event)=>{
      console.log('EVENT CONTENT', event.target.textContent)
      switch (event.target.textContent) {
        case 'edit':
          document.querySelectorAll('.modal .modal-body input').forEach(element=>{
            if(element.id === 'paymentSlip'){
              element.removeAttribute('disabled')
            
            }
          })
          break;
        case 'save':
          var payment =  findNestedObj(loanPackage.paymentSlip, 'id', document.querySelector('.modal .modal-body').C_DATA.id)
          loanPackage.totalPayment = payment.receiptType === 1? loanPackage.totalPayment - payment.paymentSlip : loanPackage.totalPayment + payment.paymentSlip
          console.log('TOTAL PAYMENT AFTER EDITING RECEIPT: ', loanPackage.totalPayment)

          payment.paymentSlip = parseFloat(document.querySelector('.modal .modal-body input#paymentSlip').value.split(',').join(''))
          console.log('RECEIPT AFTER EDITING: ', payment)

          loanPackage.periodRecords.forEach(period=>{
            period.incrementalPaidPrincipal = 0
            period.accumulatedPaidInterest = 0
            period.periodStatus = false
            period.presentValue = presentValue
            period.paidInterest = 0
            period.remainInterest = period.interest
            period.paidPrincipal = 0
            period.remainPrincipal = period.principal
            period.paidTotalPenalty = 0
            period.remainTotalPenalty = period.totalPenalty 
            period.paid = 0
            period.remain = period.totalPayment
          })

        
          console.log('LOANPACKAGE AFTER RECALCULATING: ', loanPackage)
          await new Promise((resolve, reject)=>{
            var removeReceipts = loanPackage.receiptRecords.filter(obj=>obj.isLoanMoreOrPayDownReceipt === false)
            console.log('REMOVE RECEIPT IN FUND: ', removeReceipts)
            $.ajax({
              type: 'POST',
              url: `/contractMng/funds3?token=${window.localStorage.getItem('accessToken')}`,
              contentType: 'application/json',
              data: JSON.stringify(removeReceipts),
              success: result=>{

              }
            })
            resolve()
          }).then(()=>{
            loanPackage.receiptRecords = loanPackage.receiptRecords.filter(obj=>obj.isLoanMoreOrPayDownReceipt!== false)
            console.log('RECEIPT RECORDS AFTER REMOVING FALSE: ', loanPackage.receiptRecords)

          })
          loanPackage.incrementalPaidPrincipal = 0
          loanPackage.accumulatedPaidInterest = 0
          loanPackage.incrementalPayment =0

          loanPackage.paymentSlip.forEach(payment=>{
            loanPackage.paidNotDonePeriod(payment.paymentSlip, payment.addedDate, loanPackage.periodRecords.filter(period=>period.periodStatus === false), payment)
          })
          updateLoanPackage(loanPackage)
          displayPaymentHistory()
          displayPaymentArray()
          $('#exampleModal').modal('hide')
          break
      
        default:
          break;
      }
      event.target.textContent = event.target.textContent === 'edit'? 'save':'edit'
    })

    // date counter
    document.querySelector('#real-date-counter span').innerHTML = formatDate(loanPackage.realLifeDate)

    // calculate and display payment
    // NOTE: receiptType: 1: receive, 2: spend
    //       type: 1: cash, 2: iCash
    document.querySelector('button#btn-payment-slip').addEventListener('click', async (event) => {
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))
      if (loanPackage) {
        console.log('event: ', event.target.closest('div').querySelector('input:checked').value)
        var paymentSlipObj = {
          addedDate: loanPackage.realLifeDate,
          type: event.target.closest('div').querySelector('input:checked').value,
          receiptType: 1
        }

        document.querySelector('div.payment').querySelectorAll('input:not([type="radio"])').forEach(input => {
          if(input.getAttribute('id')==='paymentSlip'){
            paymentSlipObj[input.getAttribute('id')] = removeSeperator(input.value)

          } else {
            paymentSlipObj[input.getAttribute('id')]
          }
        })
        var transHistoryObj = {
          date: paymentSlipObj.addedDate,
          fromStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
          toStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
          from: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
          to: contract.store._id,
          value: paymentSlipObj.paymentSlip,
          type: paymentSlipObj.type,
          receiptType: paymentSlipObj.receiptType,
        }

        const notDonePeriodArray = loanPackage.periodRecords.filter(period => {
          return period.periodStatus === false
        })
        if (notDonePeriodArray.length !== 0) {
          console.log('not done period array: ', notDonePeriodArray)
          var paidNotDonePeriod= ()=>{
            return new Promise((resolve, reject)=>{
              resolve()
            })
          }
          var update = ()=>{
            return new Promise((resolve, reject)=>{
              resolve()
            })
          }

          await paidNotDonePeriod().then(()=>{
            loanPackage.paidNotDonePeriod(parseFloat(paymentSlipObj.paymentSlip), paymentSlipObj.addedDate, notDonePeriodArray, paymentSlipObj)

          })

          await update().then(()=>{
            updateLoanPackage(loanPackage)
          })

          displayPaymentHistory()
          displayPaymentArray()
        } else {
          // record.Paid(parseFloat(paymentSlipObj.paymentSlip, paymentSlipObj.addedDate))
          window.alert('You have paid all the periods.')
        }
      } else {
        window.alert('This contract is not approved!')

      }

    })

    // calculate and display pay all
    document.querySelector('button#btn-pay-all').addEventListener('click', (event)=>{
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))

      if (loanPackage) {
        if (loanPackage.isLoanMoreOrPayDown === false) {

          var numberOfNewPeriods = simulation === 3 ? document.querySelector('#pay-down input#numberOfNewPeriods').value : null
          var payDownObj = {
            date: loanPackage.realLifeDate,
            value: parseFloat(removeSeperator(document.querySelector('input#payAll').value)),
            type: event.target.closest('div').querySelector('input:checked').value,
            receiptType: 1,

          }
          var transHistoryObj = {
            date: payDownObj.date,
            fromStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
            toStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
            from: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
            to: contract.store._id,
            value: payDownObj.value,
            type: payDownObj.type,
            receiptType: payDownObj.receiptType,

          }
          console.log('paydown obj: ', payDownObj)
          var remainPeriods = loanPackage.periodRecords.filter(rec => {
            return new Date(rec.redemptionDate).getTime() < new Date(loanPackage.realLifeDate).getTime() && rec.periodStatus === false
          }).map(rec => {
            return rec.period
          })

          if (remainPeriods.length !== 0) {
            window.alert(`You need to finish all remain periods (${remainPeriods.join(', ')}) to pay down!`)
          } else {
            if (simulation === 3) {
              if (numberOfNewPeriods) {
                loanPackage.payDown(payDownObj, numberOfNewPeriods)

              } else {
                window.alert('You need to enter the number of new periods!')

              }
            } else {
              loanPackage.payDown(payDownObj)
            }
            console.log('loan package after paying down: ', loanPackage)
            updateLoanPackage(loanPackage)

            console.log('trans his: ', transHistoryObj)
            displayLoanMorePayDownHistory()
            displayPaymentHistory()
          }
        } else {
          window.alert('You have loaned more or payed down today. Please comeback later!')
        }

      } else {
        window.alert('This contract is not approved!')

      }
     
    })

    // calculate and display pay down
    document.querySelector('button#btn-pay-down').addEventListener('click', (event) => {
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))

      if (loanPackage) {
        if (loanPackage.isLoanMoreOrPayDown === false) {

          var numberOfNewPeriods = simulation === 3 ? document.querySelector('#pay-down input#numberOfNewPeriods').value : null
          var payDownObj = {
            date: loanPackage.realLifeDate,
            value: parseFloat(removeSeperator(document.querySelector('input#payDown').value)),
            type: event.target.closest('div').querySelector('input:checked').value,
            receiptType: 1,

          }
          var transHistoryObj = {
            date: payDownObj.date,
            fromStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
            toStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
            from: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
            to: contract.store._id,
            value: payDownObj.value,
            type: payDownObj.type,
            receiptType: payDownObj.receiptType,

          }
          console.log('paydown obj: ', payDownObj)
          var remainPeriods = loanPackage.periodRecords.filter(rec => {
            return new Date(rec.redemptionDate).getTime() < new Date(loanPackage.realLifeDate).getTime() && rec.periodStatus === false
          }).map(rec => {
            return rec.period
          })

          if (remainPeriods.length !== 0) {
            window.alert(`You need to finish all remain periods (${remainPeriods.join(', ')}) to pay down!`)
          } else {
            if (simulation === 3) {
              if (numberOfNewPeriods) {
                loanPackage.payDown(payDownObj, numberOfNewPeriods)

              } else {
                window.alert('You need to enter the number of new periods!')

              }
            } else {
              loanPackage.payDown(payDownObj)
            }
            console.log('loan package after paying down: ', loanPackage)
            updateLoanPackage(loanPackage)

            console.log('trans his: ', transHistoryObj)
            displayLoanMorePayDownHistory()
            displayPaymentHistory()
          }
        } else {
          window.alert('You have loaned more or payed down today. Please comeback later!')
        }

      } else {
        window.alert('This contract is not approved!')

      }


    })

    // calculate and display loan more
    document.querySelector('button#btn-loan-more').addEventListener('click', (event) => {
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))

      if (loanPackage) {
        if (loanPackage.isLoanMoreOrPayDown === false) {
          var numberOfNewPeriods = simulation === 3 ? document.querySelector('#loan-more input#numberOfNewPeriods').value : null
          var payDownObj = {
            date: loanPackage.realLifeDate,
            value: parseFloat(removeSeperator(document.querySelector('input#loanMore').value)),
            type: event.target.closest('div').querySelector('input:checked').value,
            receiptType: 2,

          }
          var transHistoryObj = {
            date: payDownObj.date,
            fromStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
            toStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
            from: contract.store._id,
            to: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
            value: payDownObj.value,
            type: payDownObj.type,
            receiptType: payDownObj.receiptType,

          }
          var remainPeriods = loanPackage.periodRecords.filter(rec => {
            return new Date(rec.redemptionDate).getTime() < new Date(loanPackage.realLifeDate).getTime() && rec.periodStatus === false
          }).map(rec => {
            return rec.period
          })

          if (remainPeriods.length !== 0) {
            window.alert(`You need to finish all remain periods (${remainPeriods.join(', ')}) to pay down!`)
          } else {
            if (simulation === 3) {
              if (numberOfNewPeriods) {
                loanPackage.loanMore(payDownObj, numberOfNewPeriods)

              } else {
                window.alert('You need to enter the number of new periods!')

              }
            } else {
              loanPackage.loanMore(payDownObj)

            }
            updateLoanPackage(loanPackage)

            console.log('trans his: ', transHistoryObj)
            displayLoanMorePayDownHistory()
            displayPaymentHistory()
          }
        } else {
          window.alert('You have loaned more or payed down today. Please comeback later!')

        }

      } else {
        window.alert('This contract is not approved!')

      }

    })

    // another fee
    document.querySelector('button#btn-another-fee').addEventListener('click', (event) => {
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))

      if (loanPackage) {
        console.log('event: ', event.target.closest('div').querySelector('input:checked').value)
        var obj = {
          id: `${loanPackage.contractId}.${formatDate(loanPackage.realLifeDate)}`,
          date: loanPackage.realLifeDate,
          array: []
        }
        var receiptType = parseInt(event.target.closest('div').querySelector('select').options[event.target.closest('div').querySelector('select').selectedIndex].getAttribute('data-type'))
        var payDownObj = {
          root: 0,
          paid: parseFloat(removeSeperator(document.querySelector('div.another-fee').querySelector('input:not([type="radio"])').value)),
          remain: 0,
          receiptId: event.target.closest('div').querySelector('select').value,
          receiptReason: 'Phí khác',
          date: loanPackage.realLifeDate,
          type: event.target.closest('div').querySelector('input:checked').value,
          receiptType,
          from: receiptType === 1 ? loanPackage.customerId : loanPackage.storeId,
          to: receiptType === 1 ? loanPackage.storeId : loanPackage.customerId,
          storeId: loanPackage.storeId,
          storeName: loanPackage.storeName,
          customerId: loanPackage.customerId,
          customerName: loanPackage.customerName,
          employeeId: loanPackage.employeeId,
          employeeName: loanPackage.employeeName,
          contractId: loanPackage.contractId
        }
        obj.array.push(payDownObj)

        loanPackage.receiptRecords.push(payDownObj)
        updateFund(payDownObj, () => {
          updateLoanPackage(loanPackage)
        })
        // updateLoanPackage(loanPackage)

        displayPaymentHistory()
      } else {
        window.alert('This contract is not approved!')

      }
    })

    // expand loan package
    document.querySelector('button#btn-expand').addEventListener('click', event => {
      window.localStorage.setItem('prevLoanPackage', JSON.stringify(loanPackage))

      if (loanPackage.simulation === 1 || loanPackage.simulation === 4) {
        loanPackage.expandLoanPackage()
        updateLoanPackage(loanPackage)
      } else {
        window.alert('Bạn không thể gia hạn hợp đồng vì kiểu vay không hợp lệ!')
      }


    })

    // undo button
    // document.querySelector('button#btn-undo').addEventListener('click', (event) => {
    //   console.log('prev loanPackage: ', JSON.parse(window.localStorage.getItem('prevLoanPackage')))
    //   var prevLoanPackage = JSON.parse(window.localStorage.getItem('prevLoanPackage'))
    //   loanPackage = prevLoanPackage
    //   if(prevLoanPackage){
    //     updateLoanPackage(prevLoanPackage)
    //     window.localStorage.removeItem('prevLoanPackage')
    //     displayPaymentHistory()
    //     displayLoanMorePayDownHistory()
    //   } else {
    //     window.alert('Bạn không thể thực hiện thao tác này!')
    //   }
    // })

    // choose column to display
    document.querySelector('#btn-choose-column').addEventListener('click', (event) => {
      $('#choose-column-modal').modal('show')

    })
   
    const updateLoanPackage = (loanPackage) => {
      $.ajax({
        type: 'PUT',
        url: `/contractMng/contracts/${contract._id}/loanPackage?token=${window.localStorage.getItem('accessToken')}`,
        contentType: 'application/json',
        data: JSON.stringify(loanPackage),
        success: result => {
          console.log('result: ', result)
          window.alert('Giao dịch thành công!')
          document.querySelector('.period-table-container table.period-table tbody').innerHTML = ''
          loanPackage.periodRecords.forEach(rec => {
            displayTable(rec, 'period-table-container')
          })
        }
      })

    }

    const updateFund = (transHistory, callback) => {
      $.ajax({
        type: 'POST',
        url: `/contractMng/funds2?token=${window.localStorage.getItem('accessToken')}`,
        contentType: 'application/json',
        data: JSON.stringify([transHistory]),
        success: result => {
          window.alert('Giao dịch thành công!')

          callback()
        }
      })
    }

  </script>

</body>

</html>