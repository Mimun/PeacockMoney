<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet"
    href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css">
  <style>
    .block-container {
      border: 1px solid lightgrey;
      margin: 16px 0;
      padding: 32px 48px;
    }

    table th {
      text-align: right;
    }
  </style>
</head>

<body>
  <%- include('../Components/navbar.ejs') %>

  <div class="d-flex" id="wrapper">
    <%- include('../Components/sideBar.ejs') %>

    <div id="page-content-wrapper">
      <h1>Bảng theo dõi gói vay</h1>
      <div class="container" style="margin: 0 !important;
      padding: 0 !important;
      max-width: 100%;">
        <!-- penalty rule -->
        <div class="row block-container">
          <!-- penalty rule -->
          <div class="col">
            <div class="penalty-table">
              <h3>Bảng quy định cách phạt</h3>
              <table class="table table-hover  penalty-table">
                <thead>
                  <tr>
                    <th id="from">Từ</th>
                    <th id="to">Đến</th>
                    <th id="penaltyRate">Phạt</th>
                    <th id="debtFrom">Nợ gốc từ</th>
                    <th id="debtTo">Nợ gốc đến</th>
                    <th id="policyType">Kiểu phạt</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>

          <!-- block rule -->
          <div class="col">
            <div class="block-table">
              <h3>Bảng quy định block</h3>
              <table class="table table-hover  block-table">
                <thead>
                  <tr>
                    <th id="block">Block</th>
                    <th id="preBlockPenalty">Phạt trước block</th>
                    <th id="postBlockPenalty">Phạt sau block</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>

          <!-- loan package -->
          <div class="col">
            <div class="loan-package">
              <h3>Thông tin gói vay</h3>
            </div>
          </div>

        </div>

        <!-- package -->
        <div class="row block-container">
          <!-- simulation -->
          <div class="col">
            <div class="simulation period-table-container">
              <div class="row">
                <div class="col">
                  <h4>Bảng theo dõi chi tiết các kỳ vay, bao gồm tiền đóng theo kỳ, tiền VTTB</h4>
                </div>
                <div class="col">
                  <p id="real-date-counter">Ngày hiện tại: <span></span></p>
                </div>
                <div class="col">
                  <button class="btn btn-primary" id="btn-choose-column">Chọn cột hiển thị</button>
                </div>
              </div>
              <div class="row">
                <table class="table table-bordered table-striped table-hover period-table">
                  <thead>
                    <tr>
                      <th scope="col" id="numericalOrder">STT</th>
                      <th scope="col" id="id">Mã kỳ</th>
                      <th scope="col" id="redemptionDate">Ngày đóng</th>
                      <th scope="col" id="redemption">Số tiền đóng (gốc hàng tháng + lãi)</th>
                      <th scope="col" id="interest">Lãi phải thu</th>
                      <th scope="col" id="paidInterest">Lãi đã thu</th>
                      <th scope="col" id="remainInterest">Lãi còn lại</th>
                      <th scope="col" id="accumulatedPaidInterest">Lãi đã trả lũy kế</th>

                      <th scope="col" id="principal">Gốc phải thu</th>
                      <th scope="col" id="paidPrincipal">Gốc đã thu</th>
                      <th scope="col" id="remainPrincipal">Gốc còn lại</th>
                      <th scope="col" id="incrementalPaidPrincipal">Gốc đã trả cộng dồn</th>

                      <th scope="col" id="totalPenalty">TỔng phạt phải thu</th>
                      <th scope="col" id="paidTotalPenalty">Tổng phạt đã thu</th>
                      <th scope="col" id="remainTotalPenalty">Tổng phạt còn lại</th>
                      <th scope="col" id="presentValue">Dư nợ còn lại</th>
                      <th scope="col" id="payDown">Trả bớt</th>
                      <th scope="col" id="loanMore">Vay thêm</th>
                      <th scope="col" id="totalPayment">Tổng tiền đóng (tổng phạt + số tiền đóng)</th>
                      <th scope="col" id="paid">Đã trả</th>
                      <th scope="col" id="remain">Còn lại</th>
                      <th scope="col" id="periodStatus">Tình trạng kỳ</th>
                      <th scope="col" id="daysBetween">Số ngày đóng chậm</th>
                      <th scope="col" id="penalty">Phạt đóng chậm</th>
                      <th scope="col" id="blockPenalty">Phạt block</th>
                    </tr>
                  </thead>
                  <tbody>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

        </div>

        <!-- date for simulation -->
        <div class="row block-container">
          <!-- payment section -->
          <div class="col">
            <div class="payment" id="payment">
              <h4>Đóng tiền kỳ</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <input type="number" class="form-control" id="paymentSlip">
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-payment-slip">Đóng tiền</button>
            </div>
          </div>

          <!-- loan more, pay down -->
          <div class="col">
            <div class="pay-down" id="pay-down">
              <h4>Trả bớt</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <input type="number" class="form-control" id="payDown">
              </div>
              <% if(simulation === 3){%>
              <div class="form-group">
                <label>So ky tao them</label>
                <input type="number" class="form-control" id="numberOfNewPeriods">
              </div>
              <% } %>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-pay-down">Trả bớt</button>
            </div>
          </div>

          <div class="col">
            <div class="loan-more" id="loan-more">
              <h4>Vay thêm</h4>
              <div class="form-group">
                <label>Số tiền đóng</label>
                <input type="number" class="form-control" id="loanMore">
              </div>
              <% if(simulation === 3){%>
              <div class="form-group">
                <label>So ky tao them</label>
                <input type="number" class="form-control" id="numberOfNewPeriods">
              </div>
              <% } %>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios1" value="cash" checked>
                  Tiền mặt
                </label>
              </div>
              <div class="radio">
                <label>
                  <input type="radio" name="optionsRadios" id="optionsRadios2" value="iCash">
                  Chuyển khoản
                </label>
              </div>
              <button class="btn btn-sm btn-primary" id="btn-loan-more">Vay thêm</button>
            </div>
          </div>

          <!-- <button class="btn btn-sm" id="receipt">In phiếu</button> -->
        </div>

        <!-- payment history -->
        <div class="row block-container">
          <!-- payment history -->
          <div class="col">
            <div class="payment-history">
              <h4>Lịch sử trả tiền</h4>
              <table class="table table-bordered table-striped table-hover payment-history-table">
                <thead>
                  <tr>
                    <th scope="col" id="period">No</th>
                    <th scope="col" id="id">Mã phiếu</th>
                    <th scope="col" id="pay">Số tiền khách đóng</th>
                    <th scope="col" id="principal">Số tiền gốc phải đóng trong kỳ</th>
                    <th scope="col" id="interest">Lãi phải thu</th>
                    <th scope="col" id="paidInterest">Lãi đã thu</th>
                    <th scope="col" id="remainInterest">Lãi còn lại</th>

                    <th scope="col" id="principal">Gốc phải thu</th>
                    <th scope="col" id="paidPrincipal">Gốc đã thu</th>
                    <th scope="col" id="remainPrincipal">Gốc còn lại</th>

                    <th scope="col" id="totalPenalty">TỔng phạt phải thu</th>
                    <th scope="col" id="paidTotalPenalty">Tổng phạt đã thu</th>
                    <th scope="col" id="remainTotalPenalty">Tổng phạt còn lại</th>
                    <th scope="col" id="totalPayment">Tổng số tiền đóng (tổng phạt + lãi + gốc đóng trong kỳ)</th>
                    <th scope="col" id="paid">Tống số tiền khách đã trả</th>
                    <th scope="col" id="remain">Còn lại</th>
                    <th scope="col" id="date">Ngày</th>
                    <th scope="col" id="option">Option</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <!-- loan more pay down history -->
        <div class="row block-container">
          <!-- payment history -->
          <div class="col">
            <div class="loan-more-pay-down-history">
              <h4>Lịch sử VTTB</h4>
              <table class="table table-hover  payment-history-table">
                <thead>
                  <tr>
                    <th scope="col" id="id">Mã thu, chi</th>
                    <th scope="col" id="date">Ngày thực hiện</th>
                    <th scope="col" id="value">Số tiền VTTB</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- modal -->
      <div class="modal" tabindex="-1" role="dialog" id="choose-column-modal">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Chọn cột hiển thị</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="row row-cols-3">
                <div class="col mb-4 ml-4 mr-4">
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="all" data-vie="All" id="all"> All
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="numericalOrder" data-vie="STT"> STT
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="id" data-vie="Mã kỳ"> Mã kỳ
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="redemptionDate" data-vie="Ngày đóng"> Ngày đóng
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="redemption" data-vie="Số tiền đóng (gốc hàng tháng + lãi)"> Số tiền
                      đóng (gốc hàng tháng + lãi)
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="principal" data-vie="Gốc hàng tháng"> Gốc hàng tháng
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="incrementalPaidPrincipal" data-vie="Gốc đã trả cộng dồn"> Gốc đã trả
                      cộng dồn
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="interest" data-vie="Lãi"> Lãi
                    </label>
                  </div>
                </div>
                <div class="col mb-4 ml-4 mr-4">
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="accumulatedPaidInterest" data-vie="Lãi đã trả lũy kế"> Lãi đã trả
                      lũy kế
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="presentValue" data-vie="Gốc còn lại"> Gốc còn lại
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="payDown" data-vie="Trả bớt"> Trả bớt
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="loanMore" data-vie="Vay thêm"> Vay thêm
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="totalPayment" data-vie="Tổng tiền đóng (tổng phạt + số tiền đóng)">
                      Tổng tiền đóng (tổng phạt + số tiền đóng)
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="paid" data-vie="Đã trả"> Đã trả
                    </label>
                  </div>
                </div>
                <div class="col mn-4 ml-4 mr-4">
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="remain" data-vie="Còn lại"> Còn lại
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="periodStatus" data-vie="Tình trạng kỳ"> Tình trạng kỳ
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="daysBetween" data-vie="Số ngày đóng chậm"> Số ngày đóng chậm
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="penalty" data-vie="Phạt đóng chậm"> Phạt đóng chậm
                    </label>
                  </div>
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" value="blockPenalty" data-vie="Phạt block"> Phạt block
                    </label>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" id="save">Save changes</button>
              <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
  </div>

  <!-- common function -->
  <script>
    const formatDate = (date) => {
      var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

      if (month.length < 2)
        month = '0' + month;
      if (day.length < 2)
        day = '0' + day;

      return [day, month, year].join('-');
    }

    const displayTable = (object, elementName) => {
      var tr = document.createElement('tr')
      tr.C_DATA = object
      document.querySelectorAll(`div.${elementName} table thead th`).forEach((element, index) => {
        var th = document.createElement('th')
        if (object[element.id] !== undefined) {
          switch (element.id) {
            case ('redemptionDate'):
              th.innerHTML = formatDate(object[element.id])
              break
            default:
              th.innerHTML = object[element.id].toLocaleString()

          }
        }

        th.id = element.id
        tr.id = object.period
        tr.appendChild(th)
      })
      object.isPaydownPeriod ? tr.style.backgroundColor = 'lightblue' : null
      object.isLoanMorePeriod ? tr.style.backgroundColor = 'lightgreen' : null
      document.querySelector(`div.${elementName} table tbody`).appendChild(tr)
    }

    const displayRule = (ruleObj, elementName) => {
      var tr = document.createElement('tr')
      document.querySelectorAll(`table.${elementName} thead th`).forEach(element => {
        var th = document.createElement('th')
        th.innerHTML = ruleObj[element.id]
        tr.appendChild(th)
      })
      document.querySelector(`table.${elementName} tbody`).appendChild(tr)
    }

    const getNestedValue = (obj) => {
      var value = obj ? (obj.value ? obj.value : '-') : '-'
      return value
    }
  </script>


  <!-- global variable -->
  <script type="module">
    import Record from '/record2.js'
    import { findNestedObj } from '/findNestedObj.js'

    // var contract = JSON.parse('')
    var contract = <%- JSON.stringify(contract) %>;
    var simulation = JSON.parse('<%- JSON.stringify(simulation)%>')

    var loanPackage = new Record(contract.loanPackage)
    loanPackage.reassignPeriodRecords()
    var ruleArray = contract.penaltyRules
    var blockRuleArray = contract.blockRules

    var period = -1
    var isPause = false
    var originalValue = 100000000
    var realLifeDate = null
    var block = {}
    var totalRemainForLoaningMore = 0

    console.log('contract: ', contract)
    console.log('simulation: ', simulation)

    console.log('loan package: ', loanPackage instanceof Record)
    console.log('rule array: ', ruleArray)
    console.log('block rule: ', blockRuleArray)

    // penalty table
    if (ruleArray.length !== 0) {
      ruleArray.forEach(rule => {
        displayRule(rule, 'penalty-table')

      })
    }

    // block table
    if (blockRuleArray.length !== 0) {
      blockRuleArray.forEach(rule => {
        displayRule(rule, 'block-table')
      })
    }

    // loan package info
    const loanPackageForDisplaying = {
      createAt: formatDate(loanPackage.agreementDate) || 'null',
      numberOfPeriods: loanPackage.numberOfPeriods || '0',
      interestRate: loanPackage.interestRate || '0',
      originalLoan: loanPackage.remainOrigin || '0'
    }
    for (var prop in loanPackageForDisplaying) {
      var div = document.createElement('div')
      div.className = 'form-group'
      var label = document.createElement('label')
      label.innerHTML = prop
      var input = document.createElement('input')
      input.className = 'form-control'
      input.value = loanPackageForDisplaying[prop]
      div.appendChild(label)
      div.appendChild(input)
      document.querySelector('div.loan-package').appendChild(div)
    }

    // period table
    loanPackage.periodRecords.forEach(record => {
      displayTable(record, 'period-table-container')
    })

    // display payment history
    const displayPaymentHistory = () => {
      document.querySelector('div.payment-history table tbody').innerHTML = ''
      if (loanPackage.periodPaymentSlip.length !== 0) {
        loanPackage.periodPaymentSlip.forEach(payment => {
          displayTable(payment, 'payment-history')
          var button = document.createElement('button')
          button.className = 'btn btn-sm'
          button.innerHTML = 'Print'
          button.addEventListener('click', event => {
            console.log('event: ', event.target.closest('tr').C_DATA)
            window.location.href = `/contractMng/contracts/${contract._id}/receipt?token=${window.localStorage.getItem('accessToken')}&date=${event.target.closest('tr').C_DATA ? event.target.closest('tr').C_DATA.date : ''}`
            // $.ajax({
            //   type: 'POST',
            //   url: `/contractMng/contracts/${contract._id}/receipt?token=${window.localStorage.getItem('accessToken')}`,
            //   contentType: 'application/json',
            //   data: JSON.stringify({
            //     date: event.target.closest('tr').C_DATA ? new Date(event.target.closest('tr').C_DATA.date) : ''
            //   }),
            //   success: result => {
            //     window.location.href = `/contractMng/contracts/${contract._id}/receipt?token=${window.localStorage.getItem('accessToken')}`

            //   }
            // })
          })
          document.querySelectorAll('div.payment-history tbody tr').forEach(element => {
            var td = document.createElement('td')
            td.appendChild(button)
            element.querySelector('th#option').appendChild(td)
          })
        })
      }

    }
    displayPaymentHistory()

    // display loan more pay down history
    const displayLoanMorePayDownHistory = () => {
      document.querySelector('div.loan-more-pay-down-history table tbody').innerHTML = ''
      if (loanPackage.loanMorePayDownRecords.length !== 0) {
        loanPackage.loanMorePayDownRecords.forEach(payment => {
          displayTable(payment, 'loan-more-pay-down-history')
        })
      }
    }
    displayLoanMorePayDownHistory()
    // date counter
    document.querySelector('#real-date-counter span').innerHTML = formatDate(loanPackage.realLifeDate)

    // calculate and display payment
    // NOTE: receiptType: 1: receive, 2: spend
    //       type: 1: cash, 2: iCash
    document.querySelector('button#btn-payment-slip').addEventListener('click', (event) => {
      if (loanPackage) {
        console.log('event: ', event.target.closest('div').querySelector('input:checked').value)
        var paymentSlipObj = {
          addedDate: loanPackage.realLifeDate,
          type: event.target.closest('div').querySelector('input:checked').value,
          receiptType: 1
        }

        document.querySelector('div.payment').querySelectorAll('input:not([type="radio"])').forEach(input => {
          paymentSlipObj[input.getAttribute('id')] = input.value
        })
        var transHistoryObj = {
          date: paymentSlipObj.addedDate,
          fromStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
          toStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
          from: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
          to: contract.store._id,
          value: paymentSlipObj.paymentSlip,
          type: paymentSlipObj.type,
          receiptType: paymentSlipObj.receiptType,
        }

        const notDonePeriodArray = loanPackage.periodRecords.filter(period => {
          return period.periodStatus === false
        })
        if (notDonePeriodArray.length !== 0) {
          console.log('not done period array: ', notDonePeriodArray)
          loanPackage.paidNotDonePeriod(parseFloat(paymentSlipObj.paymentSlip), paymentSlipObj.addedDate, notDonePeriodArray, paymentSlipObj)
          updateFund(transHistoryObj, () => {
            updateLoanPackage(loanPackage)
          })
          displayPaymentHistory()
        } else {
          // record.Paid(parseFloat(paymentSlipObj.paymentSlip, paymentSlipObj.addedDate))
          window.alert('You have paid all the periods.')
        }
      } else {
        window.alert('This contract is not approved!')

      }

    })

    // calculate and display pay down
    document.querySelector('button#btn-pay-down').addEventListener('click', (event) => {
      if (loanPackage) {
        if (loanPackage.isLoanMoreOrPayDown === false) {

          var numberOfNewPeriods = simulation === 3 ? document.querySelector('#pay-down input#numberOfNewPeriods').value : null
          var payDownObj = {
            date: loanPackage.realLifeDate,
            value: parseFloat(document.querySelector('input#payDown').value),
            type: event.target.closest('div').querySelector('input:checked').value,
            receiptType: 1,

          }
          var transHistoryObj = {
            date: payDownObj.date,
            fromStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
            toStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
            from: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
            to: contract.store._id,
            value: payDownObj.value,
            type: payDownObj.type,
            receiptType: payDownObj.receiptType,

          }
          console.log('paydown obj: ', payDownObj)
          var remainPeriods = loanPackage.periodRecords.filter(rec => {
            return new Date(rec.redemptionDate).getTime() < new Date(loanPackage.realLifeDate).getTime() && rec.periodStatus === false
          }).map(rec => {
            return rec.period
          })

          if (remainPeriods.length !== 0) {
            window.alert(`You need to finish all remain periods (${remainPeriods.join(', ')}) to pay down!`)
          } else {
            if (simulation === 3) {
              if (numberOfNewPeriods) {
                loanPackage.payDown(payDownObj, numberOfNewPeriods)

              } else {
                window.alert('You need to enter the number of new periods!')

              }
            } else {
              loanPackage.payDown(payDownObj)
            }
            console.log('loan package after paying down: ', loanPackage)
            updateFund(transHistoryObj, () => {
              updateLoanPackage(loanPackage)
            })
            console.log('trans his: ', transHistoryObj)
            displayLoanMorePayDownHistory()
          }
        } else {
          window.alert('You have loaned more or payed down today. Please comeback later!')
        }

      } else {
        window.alert('This contract is not approved!')

      }


    })

    // calculate and display loan more
    document.querySelector('button#btn-loan-more').addEventListener('click', (event) => {
      if (loanPackage) {
        if (loanPackage.isLoanMoreOrPayDown === false) {
          var numberOfNewPeriods = simulation === 3 ? document.querySelector('#loan-more input#numberOfNewPeriods').value : null
          var payDownObj = {
            date: loanPackage.realLifeDate,
            value: parseFloat(document.querySelector('input#loanMore').value),
            type: event.target.closest('div').querySelector('input:checked').value,
            receiptType: 2,

          }
          var transHistoryObj = {
            date: payDownObj.date,
            fromStore: `${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'name'))} - ${getNestedValue(findNestedObj(contract.store.metadata, 'name', 'id'))}`,
            toStore: getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customer')),
            from: contract.store._id,
            to: `${getNestedValue(findNestedObj(contract.contractMetadata, 'name', 'customerId'))}`,
            value: payDownObj.value,
            type: payDownObj.type,
            receiptType: payDownObj.receiptType,

          }
          var remainPeriods = loanPackage.periodRecords.filter(rec => {
            return new Date(rec.redemptionDate).getTime() < new Date(loanPackage.realLifeDate).getTime() && rec.periodStatus === false
          }).map(rec => {
            return rec.period
          })

          if (remainPeriods.length !== 0) {
            window.alert(`You need to finish all remain periods (${remainPeriods.join(', ')}) to pay down!`)
          } else {
            if (simulation === 3) {
              if (numberOfNewPeriods) {
                loanPackage.loanMore(payDownObj, numberOfNewPeriods)

              } else {
                window.alert('You need to enter the number of new periods!')

              }
            } else {
              loanPackage.loanMore(payDownObj)

            }
            // updateLoanPackage(loanPackage)
            document.querySelector('.period-table-container table.period-table tbody').innerHTML = ''
            updateFund(transHistoryObj, () => {
              updateLoanPackage(loanPackage)
            })
            console.log('trans his: ', transHistoryObj)
            displayLoanMorePayDownHistory()
          }
        } else {
          window.alert('You have loaned more or payed down today. Please comeback later!')

        }

      } else {
        window.alert('This contract is not approved!')

      }

    })

    // choose column to display
    document.querySelector('#btn-choose-column').addEventListener('click', (event) => {
      $('#choose-column-modal').modal('show')

    })

    document.querySelector('input#all').addEventListener('click', (event) => {
      console.log('select: ', event.target.checked)
      document.querySelectorAll('.modal-body input').forEach(element => {
        element.checked = event.target.checked
      })
    })

    document.querySelector('button#save').addEventListener('click', (event) => {
      document.querySelector('table.period-table thead tr').innerHTML = ''
      // console.log('all checked element: ', document.querySelectorAll('.modal .modal-body input[type="checkbox"]:checked'))
      document.querySelectorAll('.modal .modal-body input[type="checkbox"]:checked:not(#all)').forEach(element => {
        var th = document.createElement('th')
        th.id = element.value
        th.innerHTML = element.getAttribute('data-vie')
        document.querySelector('table.period-table thead tr').appendChild(th)
      })
      $('#choose-column-modal').modal('hide')
      document.querySelector('table.period-table tbody').innerHTML = ''

      loanPackage.periodRecords.forEach((rec, index) => {
        displayTable(rec, 'period-table-container')
      })

      $(function () {
        $('table th').resizable({
          handles: 'e',
          minWidth: 18
        });
      });

    })

    const updateLoanPackage = (loanPackage) => {
      $.ajax({
        type: 'PUT',
        url: `/contractMng/contracts/${contract._id}/loanPackage?token=${window.localStorage.getItem('accessToken')}`,
        contentType: 'application/json',
        data: JSON.stringify(loanPackage),
        success: result => {
          console.log('result: ', result)
          document.querySelector('.period-table-container table.period-table tbody').innerHTML = ''
          loanPackage.periodRecords.forEach(rec => {
            displayTable(rec, 'period-table-container')
          })
        }
      })
      // document.querySelector('.period-table-container table.period-table tbody').innerHTML = ''
      // loanPackage.periodRecords.forEach(rec => {
      //   displayTable(rec, 'period-table-container')
      // })

    }

    const updateFund = (transHistory, callback) => {
      $.ajax({
        type: 'PUT',
        url: `/systemMng/funds/${contract.store._id}?token=${window.localStorage.getItem('accessToken')}`,
        contentType: 'application/json',
        data: JSON.stringify(transHistory),
        success: result => {
          callback()
        }
      })
      // callback()
    }

  </script>

</body>

</html>