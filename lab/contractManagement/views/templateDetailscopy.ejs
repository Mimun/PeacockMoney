<!-- Bootstrap core CSS -->
<link href="/mdbootstrap/css/bootstrap.min.css" rel="stylesheet">
<link href="/mdbootstrap/css/mdb.min.css" rel="stylesheet">
<link href="/mdbootstrap/css/style.css" rel="stylesheet">


<!-- material design.io -->
<link href="/material-components-web/dist/material-components-web.min.css" rel="stylesheet">
<script src="/material-components-web/dist/material-components-web.min.js"></script>
<style>
  /* Style the form */
  #regForm {
    background-color: #ffffff;
    margin: auto;
    padding: 40px;
    width: 70%;
    min-width: 300px;
  }

  /* Style the input fields */
  input {
    padding: 10px;
    width: 100%;
    font-size: 17px;
    font-family: Raleway;
    border: 1px solid #aaaaaa;
  }

  /* Mark input boxes that gets an error on validation: */
  /* input.invalid {
        background-color: #ffdddd;
    } */

  /* Hide all steps by default: */
  .tab {
    display: none;
  }

  /* Make circles that indicate the steps of the form: */
  .step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbbbbb;
    border: none;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.5;
  }

  /* Mark the active step: */
  .step.active {
    opacity: 1;
  }

  /* Mark the steps that are finished and valid: */
  .step.finish {
    background-color: #4CAF50;
  }
</style>

<!-- contract template -->
<%- include("./contractPreviewTemplate.ejs") %>

<form id="regForm" action="">

  <!-- One "tab" for each step in the form: -->
  <!-- Step 1: select image -->
  <div class="tab md-tabs">Create template avatar:
    <div class="container">
      <div class=row>
        <cropper-wc title="abc"></cropper-wc>
      </div>
      <div class=row>
        <button id="SelectImg" class="btn btn-default">Confirm</button>
      </div>
    </div>
  </div>

  <!-- Step2: Template Metadata -->
  <div class="tab md-tabs">Template metadata:
    <div class="md-form">
      <input type="text" id="form1" class="form-control validate">
      <label for="form1" data-error="Empty">Template name</label>
    </div>
    <div class="md-form">
      <input type="text" id="form2" class="form-control validate">
      <label for="form2" data-error="Empty">Category</label>
    </div>
    <div class="md-form">
      <input type="text" id="form3" class="form-control validate">
      <label for="form3" data-error="Empty">Type</label>
    </div>
  </div>

  <!-- Step 3: Contract metadata -->
  <div class="tab md-tabs">Contract metadata:
    <div class="md-form">
      <input type="text" id="form1" class="form-control validate" disabled>
      <label for="form1" data-error="Empty">Nguoi lap</label>
    </div>
    <div class="md-form">
      <input type="text" id="form2" class="form-control validate" disabled>
      <label for="form2" data-error="Empty">Nguoi nhan</label>
    </div>
    <div class="md-form">
      <input type="number" id="form3" class="form-control validate">
      <label for="form3" data-error="Empty">So tien vay</label>
    </div>
    <div class="container" style="padding: 0;">
      <div class="row">
        <div class="col">
          <div class="md-form">
            <input type="number" id="form4" class="form-control validate">
            <label for="form4" data-error="Empty">So tien max</label>
          </div>
        </div>
        <div class="col">
          <div class="md-form">
            <input type="number" id="form5" class="form-control validate">
            <label for="form5" data-error="Empty">So tien min</label>
          </div>
        </div>

      </div>
    </div>
    <div class="md-form">
      <input type="date" id="form6" class="form-control validate" disabled>
      <label for="form6" data-error="Empty">Ngay lap</label>
    </div>
    <div class="md-form">
      <input type="number" id="form7" class="form-control validate">
      <label for="form7" data-error="Empty">Ti le lai theo ngay(%)</label>
    </div>
    <div class="md-form">
      <input type="number" id="form8" class="form-control validate">
      <label for="form8" data-error="Empty">Ti le phat theo ngay(%)</label>
    </div>
  </div>

  <!-- Step 4: Custom info -->
  <div class="tab md-tabs">Custom info:
    <div class="input-group">
      <div class="custom-file">
        <input type="file" class="custom-file-input" id="inputTemplateFile" accept=".csv"
          aria-describedby="inputGroupFileAddon01">
        <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
      </div>
    </div>
    <div id="contract-template-container"></div>
  </div>

  <div class="modal-footer" style="display: flex; flex-direction: column;">
    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
    </div>
    <div style="float:right;">
      <button type="button" class="btn btn-primary btn-sm" id="prevBtn">Previous</button>
      <button type="button" class="btn btn-primary btn-sm" id="nextBtn">Next</button>
    </div>

  </div>



</form>
<script type="module" src="Components/cropper/cropper.js"></script>
<link href="/mdbootstrap/js/popper.min.js">
<!-- libs scripts -->
<script src="/mdbootstrap/js/jquery.min.js"></script>
<script src="/mdbootstrap/js/popper.min.js"></script>
<script src="/mdbootstrap/js/bootstrap.min.js"></script>
<script src="/mdbootstrap/js/mdb.min.js"></script>
<script src="/jquery.redirect/jquery.redirect.js"></script>

<script type="module">
  import { generateContractTemplateCard } from '/generateContractTemplateCard.js'
  import { ObjectId } from '/createMongooseID.js'
  var currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the current tab
  const contractTemplate = document.getElementById('temp_contract')
  document.querySelector('#prevBtn').addEventListener('click', () => {
    nextPrev(-1)
  })
  document.querySelector('#nextBtn').addEventListener('click', () => {
    nextPrev(1)
  })
  function showTab(n) {
    // This function will display the specified tab of the form ...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    // ... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").innerHTML = "Create template";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";


    }
    // ... and run a function that displays the correct step indicator:
    fixStepIndicator(n)
  }

  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    if (n == 1 && !validateForm()) return false;
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form... :
    if (currentTab >= x.length) {
      //...the form gets submitted:
      var templateItem = {
        metadata: {},
        infos: [],
        _id: ObjectId()
      }
      console.log('object id: ', templateItem._id)
      var imgData = document.querySelector('cropper-wc').getImageData()
      templateItem.infos.push({
        name: 'image',
        value: imgData
      })

      document.querySelectorAll('input').forEach(element => {
        if (element.type !== 'file') {
          var info = {}
          var name = element.closest('div[class="md-form"]').querySelector('label').innerHTML.toLowerCase()
          var value = element.value.toLowerCase()
          var type = element.type
          console.log('type: ', type)
          // console.log('name: ', name)
          // console.log('value: ', value)
          // console.log('---------------------------')
          if (name == "type" || name == "category" || name == "template name") {
            templateItem.metadata[name] = value
          } else {
            info["name"] = name
            info["value"] = value
            info["c_type"] = type
            templateItem.infos.push(info)
          }

        }

      })

      $.ajax({
        type: 'POST',
        data: JSON.stringify(templateItem),
        contentType: 'application/json',
        url: '/createNewContractTemplate',
        success: (result) => {
          console.log(result)
          displayTemplate(templateItem, contractTemplate, 'template-handler')
        }
      })
      // $.redirect("/createNewContractTemplate", { data: JSON.stringify(templateItem) }, "POST");

      // var xhttp = new XMLHttpRequest()
      // xhttp.open('POST', '/createNewContractTemplate', true)
      // xhttp.onreadystatechange = function () {
      //   if (xhttp.readyState === 4) {
      //     console.log(decodeURIComponent(xhttp.response))
      //   }
      // }
      // xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
      // xhttp.send(encodeURIComponent(templateItem))
      // console.log('def: ', templateItem)

     
      return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      // if (y[i].value == "") {
      //   // add an "invalid" class to the field:
      //   y[i].className += " invalid";
      //   // and set the current valid status to false:
      //   valid = false;
      // }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class to the current step:
    x[n].className += " active";
  }

  function findNestedObj(entireObj, keyToFind, valToFind) {
    let foundObj;
    JSON.stringify(entireObj, (_, nestedValue) => {
      if (nestedValue && nestedValue[keyToFind] === valToFind) {
        foundObj = nestedValue;
      }
      return nestedValue;
    });
    return foundObj;
  };

  const displayTemplate = (itemObj, template, elementName) => {
    generateContractTemplateCard(itemObj, template, elementName)
    document.querySelector('#template-handler').lastChild.addEventListener('click', (event) => {
      console.log('event abc: ', document.querySelector('modal-body'))
      var modalBody = document.querySelector('modal-body')
      modalBody.querySelector('button[id="btn-create-new-contract"]').addEventListener('click', (event) => {
        var cData = event.target.closest('modal-body').querySelector('.object-div').C_DATA
        // console.log('abc xyz: ', event.target.closest('modal-body').querySelector('.object-div'))
        $.redirect("/createNewContract", { data: JSON.stringify(cData) }, "POST");
      })

      modalBody.querySelector('button[id="btn-delete-contract-template"]').addEventListener('click', (event) => {
        var cData = event.target.closest('modal-body').querySelector('.object-div').C_DATA
        console.log('data to delete: ', cData)
        $.ajax({
          type: "DELETE",
          url: '/deleteContractTemplate/' + cData._id,
          success: (result) => {
            console.log(result)
            // window.location.reload()
          }

        })
      })

    })
    // document.querySelectorAll('.object-div').forEach(element => {
    //   element.addEventListener('click', function (event) {

    //   })
    // })

  }

</script>

<script type="module">
  // generate template after choosing file
  import { generateCustomInfoTemplate } from '/generateCustomInfoTemplate.js'
  const template = document.querySelector('#contract-template')

  document.querySelector('#inputTemplateFile').addEventListener('change', (event) => {
    const file = event.target.files[0]
    var fileReader = new FileReader()
    fileReader.onload = (e) => {
      var csv = e.target.result
      console.log('result: ', csv)
      convertToArray(csv)
      // if (document.querySelector('#contract-template-container').firstChild) {
      //   document.querySelector('#contract-template-container').innerHTML = ''
      // }
    }
    fileReader.readAsText(file, 'ISO-8859-1')
  })

  const convertToArray = (csv) => {
    const lines = csv.split('\n')
    const linesClone = lines
    var linesBreakPoint = []
    for (var i = 0; i < lines.length; i++) {
      if (lines[i] === "") {
        linesBreakPoint.push(i)
      }
    }

    var j = 0;
    for (var i = 0; i < linesBreakPoint.length; i++) {
      var array = []
      while (j < linesBreakPoint[i]) {
        array.push(lines[j])
        j += 1
      }
      j = linesBreakPoint[i] + 1
      generateCustomInfoTemplate(array, template, 'contract-template-container')
    }


  }

</script>