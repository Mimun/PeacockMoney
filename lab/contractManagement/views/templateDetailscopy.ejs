<!-- Theme included stylesheets -->
<link href="http://cdn.quilljs.com/1.2.0/quill.snow.css" rel="stylesheet">
<!-- Material Design for Bootstrap fonts and icons -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons">

<!-- Material Design for Bootstrap CSS -->
<link rel="stylesheet"
  href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css"
  integrity="sha384-wXznGJNEXNG1NFsbm0ugrLFMQPWswR3lds2VeinahP8N0zJw9VWSopbjv2x7WCvX" crossorigin="anonymous">
<style>
  /* Style the form */
  #regForm {
    background-color: #ffffff;
    margin: auto;
    padding: 5%;
    width: 100%;
    min-width: 300px;
  }

  /* Style the input fields */
  input {
    padding: 10px;
    width: 100%;
    font-size: 17px;
    font-family: Raleway;
    border: 1px solid #aaaaaa;
  }

  /* Mark input boxes that gets an error on validation: */
  /* input.invalid {
        background-color: #ffdddd;
    } */

  /* Hide all steps by default: */
  .tab {
    display: none;
  }

  /* Make circles that indicate the steps of the form: */
  .step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbbbbb;
    border: none;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.5;
  }

  /* Mark the active step: */
  .step.active {
    opacity: 1;
  }

  /* Mark the steps that are finished and valid: */
  .step.finish {
    background-color: #4CAF50;
  }
</style>

<!-- contract template -->
<%- include("./contractPreviewTemplate.ejs") %>

<form id="regForm" action="">

  <!-- One "tab" for each step in the form: -->
  <!-- Step 1: select image -->
  <div class="tab md-tabs">Ảnh đại diện cho mẫu hợp đồng
    <div class="container">
      <div class=row>
        <cropper-wc title="abc"></cropper-wc>
      </div>
    </div>
  </div>

  <!-- Step2: Template Metadata -->
  <div class="tab md-tabs template-metadata">Template metadata:
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Tên mẫu hợp đồng</label>
      <input type="text" class="form-control validate" name="templateName" data-vie="Tên mẫu hợp đồng">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Category</label>
      <input type="text" class="form-control validate" name="category" data-vie="phanLoai">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Loại tài sản</label>
      <!-- <input type="text" class="form-control validate" name="itemType" data-vie="loaiTaiSan"> -->
      <select class="form-control" id="itemType"></select>
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Mã loại tài sản</label>
      <input type="text" class="form-control validate" name="itemTypeId" data-vie="Mã loại tài sản">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Phí thu</label>
      <input type="number" class="form-control validate" name="fee" data-vie="Phí thu">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Phí khác</label>
      <input type="text" class="form-control validate" name="anotherFee" data-vie="Phí khác">
    </div>
    <select class="browser-default custom-select">
      <option value="thanhToanLai" name="interestPayment" data-vie="Thanh toán lãi">Phương thức thanh toán</option>
      <option value="thanhToanLai" name="interestPayment" data-vie="Thanh toán lãi">Chỉ thanh toán lãi</option>
      <option value="thanhToanGocLai" name="originalProfitPayment" data-vie="Thanh toán gốc lãi">Thanh toán gốc + lãi
      </option>
    </select>

  </div>

  <!-- Step 3: Contract metadata -->
  <div class="tab md-tabs contract-metadata">Contract metadata:

    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Cửa hàng</label>
      <input type="text" class="form-control validate" name="store" data-vie="Cửa hàng">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Người lập</label>
      <input type="text" class="form-control validate" name="creator" data-vie="Người lập" disabled>
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Khách hàng</label>
      <input type="text" class="form-control validate" name="customer" data-vie="Khách hàng" disabled>
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">CMND</label>
      <input type="text" class="form-control validate" name="customerId" data-vie="CMND">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Nơi cấp</label>
      <input type="text" class="form-control validate" name="customerIdProvidingPlace" data-vie="Nơi cấp">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Ngày cấp</label>
      <input type="date" class="form-control validate" name="customerIdProvidingDate" data-vie="Ngày cấp">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Địa chỉ</label>
      <input type="text" class="form-control validate" name="customerAddress" data-vie="Địa chỉ">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Số điện thoại</label>
      <input type="number" class="form-control validate" name="customerPhoneNumber" data-vie="Số điện thoại">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Hộ khẩu thường trú</label>
      <input type="text" class="form-control validate" name="customerFamilyRegister" data-vie="Hộ khẩu thường trú">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Số tiền vay</label>
      <input type="text" class="form-control validate" name="loan" data-vie="Số tiền vay">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Bằng chữ</label>
      <input type="text" class="form-control validate" name="loanInWord" data-vie="Bằng chữ">
    </div>
    <div class="container" style="padding: 0;">
      <div class="row">
        <div class="col">
          <div class="form-group">
            <label class="bmd-label-floating" data-error="Empty">Số tiền min </label>
            <input type="text" class="form-control currency-field" data-type="currency" min="0" max="9999999999"
              name="min" data-vie="Số tiền min">
          </div>
        </div>
        <div class="col">
          <div class="form-group">
            <label class="bmd-label-floating" data-error="Empty">Số tiền max</label>
            <input type="text" class="form-control currency-field" data-type="currency" min="0" max="9999999999"
              name="max" data-vie="Số tiền max">
          </div>
        </div>

      </div>
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Ngày lập</label>
      <input type="date" class="form-control validate" name="contractCreatedDate" data-vie="Ngày lập">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Thời hạn vay tối thiểu</label>
      <input type="number" class="form-control validate" name="minLoanTerm" data-vie="Thời hạn vay tối thiểu">
    </div>
    <div class="container" style="padding: 0;">
      <div class="row">
        <div class="col">
          <div class="form-group">
            <label class="bmd-label-floating" data-error="Empty">Tỉ lệ phần ngàn theo ngày(<span>&#8240;</span>)</label>
            <input id="permillePerDay" type="number" class="form-control validate" name="interrestRatePermillePerDay"
              data-vie="Tỉ lệ phần ngàn theo ngày">
          </div>
        </div>
        <div class="col">
          <div class="form-group">
            <label class="bmd-label-floating" data-error="Empty">Tỉ lệ phần trăm theo tháng(%)</label>
            <input id="percentagePerMonth" type="number" class="form-control validate"
              name="interrestRatePercentagePerDay" data-vie="Tỉ lệ phần trăm theo tháng">
          </div>
        </div>
      </div>
    </div>

    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Tỉ lệ phạt theo ngày(%)</label>
      <input type="number" class="form-control validate" name="percentagePenaltyPerDay" data-vie="Tỉ lệ phạt theo ngày">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Số kỳ thu</label>
      <input type="number" class="form-control validate" name="numberOfAcceptanceTerms" data-vie="Số kỳ thu">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Số ngày của 1 kỳ</label>
      <input type="number" class="form-control validate" name="numberOfDaysPerTerm" data-vie="Số ngày của 1 kỳ">
    </div>
    <div class="form-group" style="display: none;">
      <label class="bmd-label-floating" data-error="Empty">Ngày kết thúc hợp đồng</label>
      <input type="date" class="form-control validate" name="contractEndingDate" data-vie="Ngày kết thúc hợp đồng">
    </div>

  </div>

  <!-- Step 4: Custom info -->
  <div class="tab md-tabs custom-info">Custom info:
    <div class="form-group">
      <label for="exampleInputFile" class="bmd-label-floating">File input</label>
      <input type="file" class="form-control-file" id="inputTemplateFile" accept=".csv">
    </div>
    <div class="form-group">
      <label class="bmd-label-floating" data-error="Empty">Tên tài sản</label>
      <input type="text" class="form-control validate" name="propertyName" data-vie="tenTaiSan" data-kor="koreanString"
        disabled>
    </div>
    <div id="contract-template-container"></div>
  </div>

  <!-- Step 5: Quill editor -->
  <div class="tab md-tabs contract-content">Contract content:
    <%- include('./quillEditor.ejs')  %>
  </div>

  <div class="modal-footer" style="display: flex; flex-direction: column;">
    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
    </div>
    <div style="float:right;">
      <button type="button" class="btn btn-raised btn-primary btn-sm" id="prevBtn">Previous</button>
      <button type="button" class="btn btn-raised btn-primary btn-sm" id="nextBtn">Next</button>
    </div>

  </div>



</form>

<script type="module">
  import { generateContractTemplateCard } from '/generateContractTemplateCard.js'
  import { ObjectId } from '/createMongooseID.js'
  import { findNestedObj } from '/findNestedObj.js'
  import { makeRequest } from '/makeRequest.js'
  import { removeSeperator } from '/addSeparatorOnInputChange.js'



  var currentTab = 0; // Current tab is set to be the first tab (0)
  var payOption = {}
  const contractTemplate = document.getElementById('temp_contract')

  showTab(currentTab); // Display the current tab

  document.querySelector('#prevBtn').addEventListener('click', () => {
    nextPrev(-1)
  })
  document.querySelector('#nextBtn').addEventListener('click', () => {
    nextPrev(1)
  })

  // function to display tabs
  function showTab(n) {
    // This function will display the specified tab of the form ...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    // ... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").innerHTML = "Create template";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";


    }
    // ... and run a function that displays the correct step indicator:
    fixStepIndicator(n)
  }

  // function to handle next step button clicked
  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    if (n == 1 && !validateForm()) return false;
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form... :
    if (currentTab >= x.length) {
      //...the form gets submitted:
      var templateItem = {
        templateMetadata: [],
        contractMetadata: [],
        infos: [],
        _id: ObjectId()
      }

      // contract template metadata
      // - contract template image for contractMetadata
      var imgData = document.querySelector('cropper-wc').getImageData()
      templateItem.templateMetadata.push({
        name: 'image',
        value: imgData
      })
      // - quill contract content for contract metadata
      var contractContent = quill.root.innerHTML
      console.log('contract content: ', contractContent)
      templateItem.templateMetadata.push(getObj('contractContent', quill.root.innerHTML, 'text', 'noiDungHopDong', 'korean string'))

      // - metadata for template
      document.querySelector('.template-metadata').querySelectorAll('input').forEach(element => {
        var name = element.getAttribute('name')
        var value = element.value
        var type = element.getAttribute('type')
        var dataVie = element.getAttribute('data-vie')
        templateItem.templateMetadata.push(getObj(name, value, type, dataVie, 'korean string'))
      })
      templateItem.templateMetadata.push({
        name: 'itemType',
        value: document.querySelector('select#itemType').options[document.querySelector('select#itemType').selectedIndex].getAttribute('name'),
        type: 'text',
        dataVie: 'Loại tài sản',
        dataKor: 'koreanString'
      })

      // payment method for template metadata
      templateItem.templateMetadata.push(getObj('paymentMethod', document.querySelector('.custom-select').value, 'text', 'Kiểu thanh toán', 'koreanString'))

      // contract metadata:
      // - contract metadata
      document.querySelector('.contract-metadata').querySelectorAll('input').forEach(element => {
        if (element.getAttribute('id') !== "percentagePerMonth") {
          var name = element.getAttribute('name')
          var value = element.getAttribute('data-type') === 'currency' ? removeSeperator(element.value) : element.value
          var type = element.type
          var dataVie = element.getAttribute('data-vie')
          templateItem.contractMetadata.push(getObj(name, value, type, dataVie, 'korean string'))
        }

      })

      // custom info
      document.querySelector('.custom-info').querySelectorAll('input').forEach(element => {
        if (element.type !== 'file') {
          var info = {}
          var name = element.closest('.form-group').querySelector('label').innerHTML.toLowerCase()
          var value = element.value
          var type = element.type

          templateItem.infos.push({
            name: name,
            value: value,
            cType: type
          })
        }
      })

      console.log('item is about to save: ', templateItem)
      makeRequest('POST', 'createNewContractTemplate', 'application/json', JSON.stringify(templateItem), () => {
        window.location.reload()
      })

      return false;
    }

    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  // function to validate form
  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      // if (y[i].value == "") {
      //   // add an "invalid" class to the field:
      //   y[i].className += " invalid";
      //   // and set the current valid status to false:
      //   valid = false;
      // }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  // function to display step indicator
  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class to the current step:
    x[n].className += " active";
  }


  const getObj = (name, value, type, dataVie, dataKor) => {
    return {
      name: name,
      value: value,
      cType: type,
      dataVie: dataVie,
      dataKor: dataKor
    }
  }

</script>

<script type="module">
  // generate template after choosing file
  import { generateCustomInfoTemplate } from '/generateCustomInfoTemplate.js'
  import { addSeparatorOnInputChange } from '/addSeparatorOnInputChange.js'
  const template = document.querySelector('#contract-template')

  document.querySelector('#inputTemplateFile').addEventListener('change', (event) => {
    const file = event.target.files[0]
    var fileReader = new FileReader()
    fileReader.onload = (e) => {
      var csv = e.target.result
      console.log('result: ', csv)
      convertToArray(csv)

    }
    fileReader.readAsText(file, 'ISO-8859-1')
  })

  const convertToArray = (csv) => {
    const lines = csv.split('\n')
    const linesClone = lines
    var linesBreakPoint = []
    for (var i = 0; i < lines.length; i++) {
      if (lines[i] === "") {
        linesBreakPoint.push(i)
      }
    }

    var j = 0;
    for (var i = 0; i < linesBreakPoint.length; i++) {
      var array = []
      while (j < linesBreakPoint[i]) {
        array.push(lines[j])
        j += 1
      }
      j = linesBreakPoint[i] + 1
      console.log('array: ', array)
      document.querySelector('#contract-template-container').innerHTML = ""
      generateCustomInfoTemplate(array, template, 'contract-template-container')
    }


  }

  // calculate percentage per month
  document.querySelector("#permillePerDay").addEventListener('change', (event) => {
    var value = event.target.value
    console.log('value: ', event.target.value)
    document.querySelector("#percentagePerMonth").value = event.target.value * 30 / 10
  })


  // add separator to number
  addSeparatorOnInputChange()
</script>