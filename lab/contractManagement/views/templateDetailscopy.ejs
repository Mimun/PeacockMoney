<!-- Theme included stylesheets -->
<link href="http://cdn.quilljs.com/1.2.0/quill.snow.css" rel="stylesheet">
<!-- Material Design for Bootstrap fonts and icons -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons">

<!-- Material Design for Bootstrap CSS -->
<link rel="stylesheet"
  href="https://unpkg.com/bootstrap-material-design@4.1.1/dist/css/bootstrap-material-design.min.css"
  integrity="sha384-wXznGJNEXNG1NFsbm0ugrLFMQPWswR3lds2VeinahP8N0zJw9VWSopbjv2x7WCvX" crossorigin="anonymous">
<style>
  /* Style the form */
  #regForm {
    background-color: #ffffff;
    margin: auto;
    padding: 5%;
    width: 100%;
    min-width: 300px;
  }

  /* Style the input fields */
  input {
    padding: 10px;
    width: 100%;
    font-size: 17px;
    font-family: Raleway;
    border: 1px solid #aaaaaa;
  }

  /* Mark input boxes that gets an error on validation: */
  /* input.invalid {
        background-color: #ffdddd;
    } */

  /* Hide all steps by default: */
  .tab {
    display: none;
  }

  /* Make circles that indicate the steps of the form: */
  .step {
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbbbbb;
    border: none;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.5;
  }

  /* Mark the active step: */
  .step.active {
    opacity: 1;
  }

  /* Mark the steps that are finished and valid: */
  .step.finish {
    background-color: #4CAF50;
  }
</style>

<!-- contract template -->
<%- include("./contractPreviewTemplate.ejs") %>

<form id="regForm" action="">

  <!-- One "tab" for each step in the form: -->
  <!-- Step 1: select image -->
  <div class="tab md-tabs">Ảnh đại diện cho mẫu hợp đồng
    <div class="container">
      <div class=row>
        <cropper-wc title="abc"></cropper-wc>
      </div>
    </div>
  </div>

  <!-- Step2: Template Metadata -->
  <div class="tab md-tabs template-metadata">Template metadata:
    <%- include('./templateMetadata.ejs') %>

  </div>

  <!-- Step 3: Contract metadata -->
  <div class="tab md-tabs contract-metadata">Contract metadata:
    <%- include('./contractMetadata.ejs') %>
  </div>

  <!-- Step 4: Custom info -->
  <div class="tab md-tabs custom-info">Custom info:
    <%- include('./customInfo.ejs') %>
  </div>

  <!-- Step 5: Quill editor -->
  <div class="tab md-tabs contract-content">Contract content:
    <%- include('./quillEditor.ejs')  %>
  </div>

  <!-- Step 6: Create penalty rule -->
  <div class="tab md-tabs penalty-rules">Penalty rules:
    <%- include('./penaltyRules.ejs') %>
  </div>

  <!-- Step 7: Create block rule -->
  <div class="tab md-tabs block-rules">Block rules:
    <%- include('./blockRules.ejs') %>
  </div>

  <div class="modal-footer" style="display: flex; flex-direction: column;">
    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>
      <span class="step"></span>

    </div>
    <div style="float:right;">
      <button type="button" class="btn btn-raised btn-primary btn-sm" id="prevBtn">Previous</button>
      <button type="button" class="btn btn-raised btn-primary btn-sm" id="nextBtn">Next</button>
    </div>

  </div>

</form>

<script type="module">
  import { generateContractTemplateCard } from '/generateContractTemplateCard.js'
  import { ObjectId } from '/createMongooseID.js'
  import { findNestedObj } from '/findNestedObj.js'
  import { makeRequest } from '/makeRequest.js'
  import { removeSeperator } from '/addSeparatorOnInputChange.js'

  var currentTab = 0; // Current tab is set to be the first tab (0)
  var payOption = {}
  const contractTemplate = document.getElementById('temp_contract')

  showTab(currentTab); // Display the current tab

  document.querySelector('#prevBtn').addEventListener('click', () => {
    nextPrev(-1)
  })
  document.querySelector('#nextBtn').addEventListener('click', () => {
    nextPrev(1)
  })

  // function to display tabs
  function showTab(n) {
    // This function will display the specified tab of the form ...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    // ... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 1)) {
      document.getElementById("nextBtn").innerHTML = "Create template";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";


    }
    // ... and run a function that displays the correct step indicator:
    fixStepIndicator(n)
  }

  // function to handle next step button clicked
  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    if (n == 1 && !validateForm()) return false;
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form... :
    if (currentTab >= x.length) {
      //...the form gets submitted:
      var templateItem = {
        templateMetadata: [],
        contractMetadata: [],
        infos: [],
        _id: ObjectId(),
        penaltyRules: [],
        blockRules: [],
      }

      // TEMPLATE METADATA
      // - contract template image for contractMetadata
      var imgData = document.querySelector('cropper-wc').getImageData()
      templateItem.templateMetadata.push({
        name: 'image',
        value: imgData
      })
      // - quill contract content for contract metadata
      var contractContent = quill.root.innerHTML
      console.log('contract content: ', contractContent)
      templateItem.templateMetadata.push(getObj('contractContent', quill.root.innerHTML, 'text', 'noiDungHopDong', 'korean string'))

      // - metadata for template
      console.log('element: ', document.querySelectorAll('div.template-metadata #template-metadata-container input,select.template-metadata'))
      document.querySelectorAll('.template-metadata #template-metadata-container input,select.template-metadata').forEach(element => {
        var name = element.getAttribute('name')
        var value = element.value
        var type = element.getAttribute('type')
        var dataVie = element.getAttribute('data-vie')
        templateItem.templateMetadata.push(getObj(name, value, type, dataVie, 'korean string'))
      })

      // CONTRACT METADATA
      // - contract metadata
      document.querySelectorAll('.contract-metadata #contract-metadata-container input').forEach(element => {
        if (element.getAttribute('id') !== "percentagePerMonth") {
          var name = element.getAttribute('name')
          var value = element.getAttribute('data-type') === 'currency' ? removeSeperator(element.value) : element.value
          var type = element.type
          var dataVie = element.getAttribute('data-vie')
          templateItem.contractMetadata.push(getObj(name, value, type, dataVie, 'korean string'))
        }

      })

      // CUSTOM INFO
      document.querySelectorAll('.custom-info #custom-info-container input').forEach(element => {
        if (element.type !== 'file') {
          var info = {}
          var name = element.closest('.form-group').querySelector('label').innerHTML.toLowerCase()
          var value = element.value
          var type = element.type

          templateItem.infos.push({
            name: name,
            value: value,
            cType: type
          })
        }
      })

      // PENALTY RULES
      document.querySelectorAll('.penalty-rules #penalty-rule-container .table tbody tr').forEach(element => {
        templateItem.penaltyRules.push(element.C_DATA)
      })

      // BLOCK RULES
      document.querySelectorAll('.block-rules #block-rule-container .table tbody tr').forEach(element => {
        templateItem.blockRules.push(element.C_DATA)
      })

      console.log('item is about to save: ', templateItem)
      makeRequest('POST', 'createNewContractTemplate', 'application/json', JSON.stringify(templateItem), () => {
        window.location.reload()
      })

      return false;
    }

    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  // function to validate form
  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      // if (y[i].value == "") {
      //   // add an "invalid" class to the field:
      //   y[i].className += " invalid";
      //   // and set the current valid status to false:
      //   valid = false;
      // }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  // function to display step indicator
  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class to the current step:
    x[n].className += " active";
  }


  const getObj = (name, value, type, dataVie, dataKor) => {
    return {
      name: name,
      value: value,
      cType: type,
      dataVie: dataVie,
      dataKor: dataKor
    }
  }

</script>

<script type="module">
  // generate template after choosing file
  import { generateCustomInfoTemplate } from '/generateCustomInfoTemplate.js'
  import { addSeparatorOnInputChange } from '/addSeparatorOnInputChange.js'

  // add separator to number
  addSeparatorOnInputChange()
  console.log('abcxyz: ', document.querySelector('#millionPerDay'))
  document.querySelector('#millionPerDay').addEventListener('change', event => {
    console.log('event value: ', event.target.value)
    var interestRatePerMonth = (parseFloat(event.target.value) * 30) / 1000000
    document.querySelector('#interestRatePerMonth').value = (interestRatePerMonth).toFixed(5)
    document.querySelector('#interestRate').value = (interestRatePerMonth / 30).toFixed(5)
  })

  document.querySelector('#interestRatePerMonth').addEventListener('change', event => {
    document.querySelector('#millionPerDay').value = ((parseFloat(event.target.value) * 1000000) / 30).toFixed(5)
    document.querySelector('#interestRate').value = (parseFloat(event.target.value) / 30).toFixed(5)

  })
</script>
<script>

</script>