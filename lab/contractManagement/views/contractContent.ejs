<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="/quill/dist/quill.snow.css">
  <link rel="stylesheet" href="/quill/dist/quill.core.css">
  <style>
    .ql-align-center {
      text-align: center;
    }

    .ql-align-justify {
      text-align: justify;
    }

    .ql-align-right {
      text-align: right;
    }

    p {
      white-space: pre-wrap !important;
    }

    #wrapper {
      -webkit-print-color-adjust: exact !important;
    }

    #page-content-wrapper {
      display: flex;
    }

    .contract-content-container {
      margin: auto;
    }

    #contract-content {
      width: 595px;
      position: relative;
      z-index: 5;
    }

    #contract-background {
      position: absolute;
      z-index: -1;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      opacity: .1;
      width: 100%;
      height: 100%;
      background-size: 400px 400px !important;

    }
  </style>
</head>

<body>
  <div class="d-flex" id="wrapper">
    <!-- <button class="btn btn-primary btn-sm get-pdf" style="position: fixed; top: 50px; left: 50px;">Get PDF</button> -->

    <div id="page-content-wrapper">
      <div class="contract-content-container">
        <div id="contract-content">
          <div id="contract-background"></div>

        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.4/jspdf.min.js"></script>
  <script src="/html2canvas/dist/html2canvas.min.js"></script>
  <script src="/html2canvas/dist/html2canvas.js"></script>
  <script src="/html2pdf.js/dist/html2pdf.js"></script>

  <script type="module">
    import { findNestedObj } from '/findNestedObj.js'
    import { addSeparator, numberToWords } from '/addSeparatorOnInputChange.js'
    const convertDbObjToQuillObj = (object) => {
      const objectData = {
        id: "",
        createdDate: "",
        storeAddress: "",
        storeCreditNumber: "",
        storeRepresentative: "",
        storeRepresentativeJobTitle: "",

        customer: "",
        customerId: "",
        customerIdProvidingPlace: "",
        customerIdProvidingDate: "",
        customerAddress: "",
        customerPhoneNumber: "",
        customerFamilyRegister: "",

        loan: "",
        loanInWord: "",
        endingDate: "",
        items: "",
        max: "",
        min: "",
        minLoanTerm: "",
        numberOfAcceptanceTerms: "",
        numberOfDaysPerTerm: "",
        percentageInterestPerDay: "",
        percentagePenaltyPerDay: "",
        contractEndingDate: "",
      }
      // contract metadata
      if (object.contractMetadata.length !== 0) {
        object.contractMetadata.forEach(info => {
          if (info) {
            if (info.name && info.name !== "image" && info.name !== "contractContent") {
              objectData[info.name] = info.name === "loan" ? addSeparator(info.value) : info.value
            }
            // if (info.name === "loan") {
            //   objectData["loanInWord"] = numberToWords(info.value)
            // }

          }

        })

      }

      // item
      if (object.items.length !== 0) {

        var item = []
        var ol = document.createElement('ol')
        for (var i = 0; i < object.items.length; i++) {
          // item name
          var itemName = []
          object.items[i].infos.forEach(info=>{
            itemName.push(info.value)
          })
          // var itemName = findNestedObj(object.items[i].evaluationItem, 'name', 'type') ?
          //   findNestedObj(object.items[i].evaluationItem, 'name', 'type').value : 'None'

          // item status
          var itemStatus = []
          object.items[i].status.forEach(status => {
            var status = findNestedObj(status, 'name', 'type')
            if (status) {
              itemStatus.push(status.value)
            }
          })
          itemStatus = itemStatus.join(", ")
          const li = document.createElement('li')
          li.innerHTML = `<p>Tai san cam co ${i + 1}: ${itemName.join(', ')}<br>Tinh trang: ${itemStatus}</p>`
          ol.appendChild(li)
        }
        objectData["items"] = `${ol.outerHTML}`

      }

      // store
      objectData["storeAddress"] = findNestedObj(object.store.value, 'name', 'address') ?
        findNestedObj(object.store.value, 'name', 'address').value : 'Not defined'
      objectData["storeCreditNumber"] = findNestedObj(object.store.value, 'name', 'creditNumber') ?
        findNestedObj(object.store.value, 'name', 'creditNumber').value : 'Not defined'
      objectData["storeRepresentative"] = object.employee.value ?
        (findNestedObj(object.employee.value, 'name', 'name') ?
          findNestedObj(object.employee.value, 'name', 'name').value : 'Not defined') : 'Not defined'
      objectData["storeRepresentativeJobTitle"] = object.employee.value ?
        (findNestedObj(object.employee.value, 'name', 'jobTitle') ?
          findNestedObj(object.employee.value, 'name', 'jobTitle').value : 'Not defined') : 'Not defined'
      objectData["contractEndingDate"] = findNestedObj(object.metadata, 'name', 'contractEndingDate') ?
        findNestedObj(object.metadata, 'name', 'contractEndingDate').value : 'Unknown'

      return objectData
    }

    var contractDetail = <%- JSON.stringify(contractDetail) %>;
    console.log('contract detail: ', contractDetail)
    switch (contractDetail.contractStatus) {
      case "waiting":
        document.querySelector('#contract-background').style.background = "url('/images/waiting.jpg') center center"
        break
      case "approved":
        document.querySelector('#contract-background').style.background = "url('/images/approved.jpg') center center"
        break
      case "completed":
        document.querySelector('#contract-background').style.background = "none"

        break
      default:
    }

    var contractContent = findNestedObj(contractDetail, 'name', 'contractContent').value

    var contract = convertDbObjToQuillObj(contractDetail)
    console.log('data converted: ', contract)

    let tpl = eval('`' + contractContent + '`');
    const div = document.createElement('div')
    div.innerHTML = tpl
    document.querySelector('#contract-content').appendChild(div)

    // document.querySelector('.get-pdf').addEventListener('click', (event) => {
    //   PDF1()
    // })

    const PDF1 = () => {
      console.log('defghi')
      const doc = new jsPDF('p', 'pt', 'a4');
      var source = $('#contract-content')[0]

      var opt = {
        margin: 1,
        filename: 'myfile.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
      };
      html2pdf().from(source).set(opt).save();
    }

    const displayInfoLang = (info) => {
      if (typeof info === "string") {
        // // re-uppercase
        // var infoLang = info.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')
        // uppercase the first letter
        var infoLang = info.charAt(0).toUpperCase() + info.slice(1)
        // split based on uppercase letters
        infoLang = infoLang.match(/[A-Z][a-z]+|[0-9]+/g).join(" ")
        return infoLang

      }
      return info

    }

  </script>
</body>

</html>