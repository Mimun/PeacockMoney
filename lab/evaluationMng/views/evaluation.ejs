<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <!-- Custom styles for this template -->
  <style>
    .info-container {
      min-height: 96px;
      border: 2px dashed lightgrey;
      border-radius: 5px;
      margin-bottom: 15%;
      padding: 5%;
    }

    .tab-content {
      max-height: 550px;
      overflow-y: scroll;
    }

    .tab-content::-webkit-scrollbar {
      display: none;
    }

    #item-evaluation .bmd-form-group,
    #item-status .bmd-form-group,
    .tab-content .bmd-form-group {
      width: 100%;
      padding: 0 !important;
    }
  </style>


</head>

<body>
  <!-- navbar -->
  <%- include('navbar.ejs') %>
  <div class="d-flex" id="wrapper">
    <!-- sidebar -->
    <%- include('sideBar.ejs') %>
    <div id="page-content-wrapper">
      <!-- item list template -->
      <%- include('itemList.ejs') %>
      <div class="evaluation-container container" style="border: none; margin-top: 5%;">
        <div class="row">
          <div class="col">

            <!-- card for tai san tham dinh -->
            <div class="card text-center">
              <div class="card-header">
                Thong tin
              </div>
              <div class="card-body">
                <h5 class="card-title">Thong tin tai san tham dinh</h5>
                <p class="card-text">
                <div class="item info-container">
                  <div id="item-evaluation"></div>
                </div>
                </p>

                <h5 class="card-title">Thong tin tinh trang tai san</h5>
                <p class="card-text">
                <div class="item-status info-container">
                  <div id="item-status"></div>
                </div>
                </p>

                <p class="card-text">
                <div class="item-price" id="item-price">
                  <h5 class="card-title">Gia tien du kien: <span></span></h5>
                </div>
                </p>
              </div>
              <div class="card-footer">
                <div class="btn-options">
                  <button class="btn btn-primary btn-sm" id="create-contract">Create contract</button>
                </div>
              </div>

            </div>

          </div>

          <!-- tabs -->
          <div class="col-sm-4 side">
            <div class="tabs-container">
              <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item">
                  <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab"
                    aria-controls="home" aria-selected="true">Tham dinh tai san</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab"
                    aria-controls="profile" aria-selected="false">Tinh trang tai san</a>
                </li>

              </ul>
              <div class="search">
                <form class="input-group form-sm form-2 pl-0" id="search">
                  <input class="form-control my-0 py-1" type="text" placeholder="Search" aria-label="Search">
                  <div class="input-group-prepend">
                    <span class="input-group-text cyan lighten-3" id="basic-text1"><i class="fa fa-search text-grey"
                        aria-hidden="true"></i></span>
                  </div>
                </form>
              </div>
              <div class="tab-content" id="myTabContent">
                <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab"
                  style="overflow-y: auto;">
                  <div id="item-list-table-container"></div>
                </div>
                <div class="tab-pane fade" id="profile" role="tabpanel" aria-labelledby="profile-tab"
                  style="overflow-y: auto;">
                  <div id="item-status-list-table-container"></div>
                </div>

              </div>
            </div>

          </div>
        </div>

      </div>
    </div>

  </div>

  <script type="module">
    import { generateHTML } from '/generateHTML.js'
    import { findNestedObj } from '/findNestedObj.js'
    import { searchFunction } from '/searchFunction.js'
    import { makeRequest } from '/makeRequest.js'

    var originItemList = <%- JSON.stringify(itemResults) %>;
    var originItemStatusList = <%- JSON.stringify(itemStatusResults) %>;
    console.log('origin item list: ', originItemList)
    const template = document.querySelector('#quan-ly-tham-dinh-gia')

    var originalPrice = 0
    var totalDiscount = 0

    if (document.querySelector('#item-list-table-container').innerHTML) {
      document.querySelector('#item-list-table-container').innerHTML = ""
    }
    if (document.querySelector('#item-status-list-table-container').innerHTML) {
      document.querySelector('#item-status-list-table-container').innerHTML = ""
    }
    if (originItemList.length !== 0) {
      generateHTML(originItemList, template, 'item-list-table-container')

    }
    if (originItemStatusList.length !== 0) {
      generateHTML(originItemStatusList, template, 'item-status-list-table-container')

    }

    const chooseItem = () => {
      document.querySelector('#item-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
        element.addEventListener('click', (event) => {
          const cloneNode = event.target.closest('.object-div').cloneNode(true)
          cloneNode.C_DATA = event.target.closest('.object-div').C_DATA
          cloneNode.classList.add('item')
          originalPrice = parseInt(findNestedObj(cloneNode.C_DATA, 'name', 'evaluatingPrice').value)
          if (document.querySelector("#item-evaluation")) {
            document.querySelector("#item-evaluation").innerHTML = ''
          }
          document.querySelector("#item-evaluation").appendChild(cloneNode)
          calculateEvaluatePrice(originalPrice, totalDiscount)
        })
      })
    }
    chooseItem()

    const chooseItemStatus = () => {

      document.querySelector('#item-status-list-table-container').querySelectorAll("div[class='mdc-data-table__header-row header-row-div']").forEach(element => {
        element.addEventListener('click', (event) => {

          const itemStatusDiv = document.querySelector("#item-status")
          console.log('event target: ', event.target.closest('.object-div').C_DATA)
          const cloneNode = event.target.closest('.object-div').cloneNode(true)
          cloneNode.C_DATA = event.target.closest('.object-div').C_DATA
          cloneNode.classList.add('item-status')
          totalDiscount = totalDiscount + parseInt(cloneNode.C_DATA.infos[0].value)

          const removeButton = document.createElement('span')
          removeButton.className = "material-icons"
          removeButton.innerHTML = 'remove'
          removeButton.addEventListener('click', (event) => {
            totalDiscount = totalDiscount - parseInt(findNestedObj(event.target.closest('.object-div').C_DATA, 'name', 'reduce(%)').value)
            event.target.closest('div[id="item-status"]').removeChild(event.target.closest('.object-div'))
            calculateEvaluatePrice(originalPrice, totalDiscount)

          })
          cloneNode.querySelector('div[class="mdc-data-table__header-row header-row-div"]').appendChild(removeButton)

          // prevent duplicate 
          var isChosen = false
          if (itemStatusDiv.firstChild) {
            itemStatusDiv.querySelectorAll('div[class="object-div"]').forEach(div => {
              if (cloneNode.isEqualNode(div)) {
                console.log('div: ', div)
                isChosen = true
                itemStatusDiv.removeChild(div)
              }
            })
            if (!isChosen) {
              itemStatusDiv.appendChild(cloneNode)
              itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })
            }
          } else {
            itemStatusDiv.appendChild(cloneNode)
            itemStatusDiv.querySelector('div[class="mdc-data-table__header-row header-row-div"]').removeEventListener('click', () => { })
          }
          calculateEvaluatePrice(originalPrice, totalDiscount)
        })
      })
    }
    chooseItemStatus()

    // create contract button
    document.querySelector('#create-contract').addEventListener('click', (event) => {
      console.log('event: ', event.target)
      var evaluatingItem = event.target.closest('.card').querySelector('.card-body').querySelector('.item').querySelector('.object-div')
      if (evaluatingItem) {
        console.log('evaluation: ', evaluatingItem)
        window.localStorage.setItem('evaluatingItem', JSON.stringify(evaluatingItem.C_DATA))
        console.log('window local storage: ', JSON.parse(window.localStorage.getItem('evaluatingItem')))
        window.location.href = '/contractMng/contractTemplates?token=' + window.localStorage.getItem('accessToken')
        // $.redirect("../contractMng/contractTemplates", {}, "GET");
      } else {
        window.alert('You need to choose an item to evaluate and create a contract')
      }

    })

    // search function
    document.querySelector('#search').addEventListener('submit', () => {
      event.preventDefault()
      makeRequest('POST', 'search', 'application/json', JSON.stringify({
        data: event.target.querySelector('input').value
      }), (result) => {
        console.log('result: ', result)
        searchFunction(originItemList, result.itemResults, template, 'item-list-table-container')
        chooseItem()

        searchFunction(originItemStatusList, result.itemStatusResults, template, 'item-status-list-table-container')
        chooseItemStatus()
      })

    })

    const calculateEvaluatePrice = (originalPrice, totalDiscount) => {
      var evaluatedPrice = originalPrice - (totalDiscount * originalPrice / 100)
      document.querySelector('#item-price').querySelector('span').innerHTML = evaluatedPrice
      console.log('original price: ', originalPrice)
      console.log('total discount: ', totalDiscount)
      console.log('evaluated price: ', evaluatedPrice)
    }
  </script>
</body>

</html>