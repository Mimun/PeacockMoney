<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">

  <title>Simple Sidebar - Start Bootstrap Template</title>
  <style>
    #table-container .bmd-form-group {
      width: 100%;
      padding: 0 !important;
    }
  </style>
</head>

<body>
  <!-- navbar -->
  <%- include('navbar.ejs') %>
  <div class="d-flex" id="wrapper">

    <!-- sidebar -->
    <%- include('sideBar.ejs') %>
    <!-- /sidebar -->

    <!-- Page Content -->
    <div id="page-content-wrapper">



      <!-- papge content -->
      <div class="container-fluid page-content" style="display: flex; flex-direction: column">
        <h1 class="mt-4">Quan ly tinh trang tai san</h1>

        <!-- template of list of items -->
        <%- include('itemList.ejs') %>

        <!-- template of data field -->
        <template id="data-field-template">
          <div class="data-field-container" style="display: flex;">
            <div class="form-group">
              <label for="name" class="bmd-label-floating">Ten Truong</label>
              <input type="text" obj_property="name" class="form-control cell-div">
            </div>
            <div class="form-group">
              <label for="value" class="bmd-label-floating">Gia Tri</label>
              <input type="text" obj_property="value" class="form-control cell-div">
            </div>
            <!-- <button id="remove-field-button" type="button" class="btn btn-primary px-3"><i
                class="fa fa-minus"></i></button> -->
            <button id="remove-field-button" type="button" class="close">
              <span class="material-icons">clear</span>
            </button>
          </div>
        </template>

        <!-- search bar -->
        <div id="input-search-container" style="display: flex; justify-content: space-between;">
          <div id="input-container">
            <div class="form-group">
              <label for="exampleInputFile" class="bmd-label-floating">File input</label>
              <input type="file" accept=".csv" id="csv-reader" class="form-control-file" id="exampleInputFile">
            </div>

          </div>
          <div id="search-container">
            <form class="input-group form-sm form-2 pl-0" id="search">
              <input class="form-control my-0 py-1" type="text" placeholder="Search" aria-label="Search">
              <div class="input-group-prepend">
                <span class="input-group-text cyan lighten-3" id="basic-text1"><i class="fa fa-search text-grey"
                    aria-hidden="true"></i></span>
              </div>
            </form>
          </div>

        </div>

        <!-- detail item modal when clicking to an item -->
        <div class="modal fade" id="itemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
          aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered modal-md" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="modal-title">Chi Tiet Tai San</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div id="item-info-container">

                </div>
              </div>

              <div class="modal-footer">
                <button class="btn btn-primary" id="edit-btn" style="position: relative; float: right;">Edit</button>
                <button class="btn btn-danger" id="delete-btn" style="position: relative; float: right;"
                  data-dismiss="modal">Delete</button>
              </div>
            </div>
          </div>
        </div>

        <!-- add item modal when clicking to an add item button -->
        <div class="modal fade" id="addItemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
          aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered modal-md" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="modal-title">Tao moi tai san</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <!-- body of modal -->
              <div class="modal-body">
                <div class="row-div">
                  <div id="data-fields-container">
                    <div class="data-fields-metadata">
                      <!-- item type -->
                      <div class="data-field-container-metadata" style="display: flex;">
                        <div class="form-group">
                          <label for="name">Ten Truong</label>
                          <input type="text" obj_property="name" class="form-control cell-div" value="Loai Tai San"
                            required data-eng="itemType" data-vie="loaiTaiSan">
                        </div>
                        <div class="form-group">
                          <label for="value">Gia Tri</label>
                          <input type="text" obj_property="value" class="form-control cell-div" required>
                        </div>
                        <button type="button" class="close" style="visibility: hidden;">
                          <span class="material-icons">clear</span>
                        </button>

                      </div>

                      <!-- item category -->
                      <div class="data-field-container-metadata" style="display: flex;">
                        <div class="form-group">
                          <label for="name">Ten Truong</label>
                          <input type="text" obj_property="name" class="form-control cell-div" value="Phan loai"
                            required data-eng="itemCategory" data-vie="loaiTaiSan">
                        </div>
                        <div class="form-group">
                          <label for="value">Gia Tri</label>
                          <input type="text" obj_property="value" class="form-control cell-div" required>
                        </div>
                        <button type="button" class="close" style="visibility: hidden;">
                          <span class="material-icons">clear</span>
                        </button>
                      </div>

                      <!-- type -->
                      <div class="data-field-container-metadata" style="display: flex;">
                        <div class="form-group">
                          <label for="name">Ten Truong</label>
                          <input type="text" obj_property="name" class="form-control cell-div" value="Loai" required
                            data-eng="type" data-vie="loai">
                        </div>
                        <div class="form-group">
                          <label for="value">Gia Tri</label>
                          <input type="text" obj_property="value" class="form-control cell-div" required>
                        </div>
                        <button type="button" class="close" style="visibility: hidden;">
                          <span class="material-icons">clear</span>
                        </button>
                      </div>
                    </div>


                    <div id="cell-divs-container"></div>
                  </div>

                </div>
              </div>
              <!-- footer of modal -->
              <div class="modal-footer">
                <button id="add-field-button" type="button" class="btn btn-primary">Them Truong Du Lieu</button>
                <button id="add-item-button" type="button" class="btn btn-primary" data-dismiss="modal">Tao Moi</button>
              </div>
            </div>
          </div>
        </div>

        <!-- list of items container -->
        <div id="table-container"></div>

        <!-- add item button -->
        <div id="add-item-button-container" style="display: flex; margin: 2vh;"></div>

        <!-- submit button -->
        <div id="button-container" style="display: flex; margin: 2vh;"></div>

        <!-- pagination -->
        <div id="page-navigation-container" style="display: flex;"></div>
      </div>
    </div>


  </div>

  <script type="module">
    import { generateHTML } from '/generateHTML.js'
    import { ObjectId } from '/createMongooseID.js'
    import { findNestedObj } from '/findNestedObj.js'
    import { makeRequest } from '/makeRequest.js'

    const template = document.querySelector('#quan-ly-tham-dinh-gia')

    const dataTemplate = document.querySelector('#data-field-template')

    // original item list (after fetching from database)
    var originItemList = <%- JSON.stringify(dbItemObjs) %>
      console.log('origin item: ', originItemList)

    window.onload = () => {
      // window.location = "data:text/csv;base64,77u/" + btoa("foo,bar\r\naaa,bbb")

      // convert csv to json
      document.querySelector('#csv-reader').addEventListener('change', (event) => {

        const file = event.target.files[0]
        var fileReader = new FileReader()
        fileReader.onload = (e) => {
          var csv = e.target.result
          console.log('result: ', e.target.result)
          convertToJSON(csv)
        }
        fileReader.readAsText(file, 'ISO-8859-1')
      })
    }

    const convertToJSON = (csv) => {
      const lines = csv.split('\n')
      var resultsInJSON = {}
      var itemObjs = []
      const labels = lines[0].split(",")


      for (var i = 1; i < lines.length - 1; i++) {
        const line = lines[i].split(",")
        var itemObj = {
          metadata: [],
          infos: [],
        }
        // metadata
        for (var j = 0; j <= 2; j++) {
          var dataVie, cType = 'text'
          switch (j) {
            case 0:
              dataVie = 'loaiTaiSan'
              break
            case 1:
              dataVie = 'phanLoaiTaiSan'
              break
            case 2:
              dataVie = 'loai'
              break
            default:
              dataVie = 'none'
          }
          itemObj.metadata.push({
            name: labels[j],
            value: line[j],
            cType: cType,
            dataVie: dataVie
          })
        }

        for (var j = 3; j < line.length; j++) {
          if (line[j] !== "") {
            if (labels[j] === "reduce(%)") {
              itemObj.infos.push({
                name: labels[j],
                value: line[j],
                dataVie: "giam(%)"
              })
            } else {
              itemObj.infos.push({
                name: labels[j],
                value: line[j],
              })
            }

          }

        }

        if (itemObj._id === null || itemObj._id === undefined) {
          itemObj._id = ObjectId()
        }
        resultsInJSON[i - 1] = itemObj
        // results.push(obj)

      }
      itemObjs = Object.values(resultsInJSON)
      console.log('initial item objs: ', itemObjs)

      // check must have props


      if (itemObjs.length !== 0) {
        itemObjs = itemObjs.filter(item => {
          var itemThatHasItemType = findNestedObj(item, 'name', "itemType").value
          var itemThatHasItemCategory = findNestedObj(item, 'name', "itemCategory").value
          var itemThatHasType = findNestedObj(item, 'name', "type").value
          if (itemThatHasItemType && itemThatHasItemCategory && itemThatHasType) {
            return item
          }
        })
        console.log('item objs after filtering: ', itemObjs)


        // create pagination
        originItemList.forEach(obj1 => {
          itemObjs.forEach(obj2 => {
            if (JSON.stringify(obj2.infos) === JSON.stringify(obj1.infos)) {
              var index = itemObjs.indexOf(obj2)
              itemObjs.splice(index, 1)
            }
          })
        })
        originItemList = originItemList.concat(itemObjs)

        console.log('itemArray after removing duplicated item: ', originItemList)
        createPagination(originItemList)

      }


    }

    const createPagination = itemObjs => {
      // pagination

      const pageNavigationContainer = document.querySelector('#page-navigation-container')
      if (pageNavigationContainer.firstChild) {
        pageNavigationContainer.innerHTML = ''
      }
      const pageNavigation = document.createElement('nav')
      pageNavigation.setAttribute('aria-label', 'page navigation')
      pageNavigation.id = 'page-navigation'
      pageNavigation.style.margin = 'auto'
      pageNavigation.innerHTML = `
          <ul class="pagination pg-blue" style="margin: auto;">
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="prev" disabled='false'>Previous</button>
            </li>
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="first" >First</button>
            </li>
            <div class="li-list" style="display: flex;"></div>
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="last" >Last</button>
            </li>
            <li class="page-item ">
              <button class="page-link" id="next" disabled='false'>Next</button>
            </li>
          </ul>`
      pageNavigationContainer.appendChild(pageNavigation)

      // duplicate object remove

      var list = itemObjs
      var pageList = []
      var currentPage = 1
      var numberPerPage = 5
      var numberOfPages = Math.ceil(list.length / numberPerPage)

      const generateList = (currentPage) => {
        if (document.querySelector('.li-list').firstChild) {
          document.querySelector('.li-list').innerHTML = ''
        }
        var begin = null
        var end = null
        if (currentPage === 1) {
          begin = currentPage
          end = currentPage + 2 <= numberOfPages ? currentPage + 2 : numberOfPages

        } else if (currentPage === numberOfPages) {
          begin = numberOfPages - 2 >= 1 ? numberOfPages - 2 : 1
          end = numberOfPages
        } else {
          begin = currentPage - 1 > 0 ? currentPage - 1 : 1

          end = currentPage + 1
        }
        for (var i = begin; i <= end; i++) {

          const li = document.createElement('li')
          li.className = i === currentPage ? 'page-item active' : 'page-item'

          const button = document.createElement('button')
          button.className = 'page-link'
          button.innerHTML = i
          button.id = i
          button.addEventListener('click', (evt) => {
            // randomPage(i)
            randomPage(parseInt(evt.target.innerHTML))

          })
          li.appendChild(button)

          document.querySelector('.li-list').appendChild(li)

          if (i == end && i < numberOfPages - 1) {
            const ellipsisDiv = document.createElement('div')
            ellipsisDiv.innerHTML = '...'
            document.querySelector('.li-list').appendChild(ellipsisDiv)

            const li = document.createElement('li')
            li.className = i === currentPage ? 'page-item active' : 'page-item'
            const button = document.createElement('button')
            button.className = 'page-link'
            button.innerHTML = numberOfPages
            button.id = numberOfPages
            button.addEventListener('click', (evt) => {
              // randomPage(i)

              button.className = 'page-link active'
              randomPage(parseInt(evt.target.innerHTML))

            })
            li.appendChild(button)

            document.querySelector('.li-list').appendChild(li)

          } else if (i == end && i < numberOfPages) {
            const li = document.createElement('li')
            li.className = i === currentPage ? 'page-item active' : 'page-item'
            const button = document.createElement('button')
            button.className = 'page-link'
            button.innerHTML = numberOfPages
            button.id = numberOfPages
            button.addEventListener('click', (evt) => {
              // randomPage(i)

              button.className = 'page-link active'
              randomPage(parseInt(evt.target.innerHTML))

            })
            li.appendChild(button)

            document.querySelector('.li-list').appendChild(li)
          }

        }

      }
      generateList(currentPage)

      const nextPage = () => {
        currentPage += 1
        loadList()
        generateList(currentPage)
      }

      const prevPage = () => {
        currentPage -= 1
        loadList()
        generateList(currentPage)
      }

      const randomPage = (page) => {
        currentPage = page
        loadList()
        generateList(currentPage)
      }

      const firstPage = () => {
        currentPage = 1
        loadList()
        generateList(currentPage)
      }

      const lastPage = () => {
        currentPage = numberOfPages
        loadList()
        generateList(currentPage)
      }

      const check = () => {
        document.querySelector('#prev').disabled = currentPage == 1 ? true : false
        document.querySelector('#next').disabled = currentPage == numberOfPages ? true : false
      }

      const loadList = () => {
        var begin = ((currentPage - 1) * numberPerPage)
        var end = begin + numberPerPage

        pageList = list.slice(begin, end)
        if (document.querySelector('#table-container').firstChild) {
          document.querySelector('#table-container').innerHTML = ''

        }
        generateHTML(pageList, template, 'table-container')

        document.querySelectorAll('div[class="mdc-data-table__header-row header-row-div"]').forEach(element => {
          element.addEventListener('click', (event) => {
            itemModal(event.target.closest('.object-div'))
          })
        })
        // submit button
        const buttonContainer = document.querySelector('#button-container')
        if (document.querySelector('#button-container').firstChild) {
          buttonContainer.innerHTML = ''
        }
        const submitBtn = document.createElement('button')
        submitBtn.className = 'btn btn-primary'
        submitBtn.id = 'submit-button'
        submitBtn.innerHTML = "Submit"
        submitBtn.style.margin = 'auto'
        submitBtn.addEventListener('click', () => {
          console.log('origin item list before submitting: ', originItemList)
          makeRequest('POST', 'itemStatus', 'application/json', JSON.stringify(originItemList), () => { })

        })
        const deleteManyBtn = document.createElement('button')
        deleteManyBtn.className = 'btn btn-raised btn-primary'
        deleteManyBtn.id = 'delete-many-button'
        deleteManyBtn.innerHTML = "Delete all"
        deleteManyBtn.style.margin = 'auto'
        deleteManyBtn.addEventListener('click', () => {
          makeRequest('DELETE', 'itemStatus', 'application/json', JSON.stringify(originItemList), () => {
            window.location.reload()
          })

        })
        buttonContainer.appendChild(submitBtn)
        buttonContainer.appendChild(deleteManyBtn)
        check()

      }

      loadList()

      document.querySelector('#prev').addEventListener('click', () => {
        prevPage()
      })
      document.querySelector('#next').addEventListener('click', () => {
        nextPage()
      })
      document.querySelector('#first').addEventListener('click', () => {
        firstPage()
      })
      document.querySelector('#last').addEventListener('click', () => {
        lastPage()
      })


      // add item button on the home screen of tham dinh gia
      const addItemButtonContainer = document.querySelector('#add-item-button-container')
      if (addItemButtonContainer.firstChild) {
        addItemButtonContainer.innerHTML = ''
      }
      const addItemButton = document.createElement('button')
      addItemButton.className = 'btn btn-primary bmd-btn-fab '
      addItemButton.setAttribute('data-toggle', 'modal')
      addItemButton.setAttribute('data-target', '#addItemModal')
      addItemButton.innerHTML = `<span class="material-icons" aria-hidden="true">add</span>`
      addItemButton.style.margin = 'auto'
      addItemButtonContainer.appendChild(addItemButton)
      addItemButton.addEventListener('click', () => {
        document.querySelector('#cell-divs-container').innerHTML = ''
      })
    }

    // add data field button
    const addDataFieldButton = document.querySelector('#add-field-button')
    addDataFieldButton.addEventListener('click', () => {
      console.log('def')
      const clone = document.importNode(dataTemplate.content, true)
      const removeDataFieldButton = clone.querySelector('#remove-field-button')
      removeDataFieldButton.addEventListener('click', (event) => {
        event.target.closest('div[id="data-fields-container"]').querySelector('div[id="cell-divs-container"]').removeChild(event.target.closest('div[class="data-field-container"]'))
      })
      document.querySelector('#cell-divs-container').appendChild(clone)

    })

    // create new item button
    const createItemButtom = document.querySelector('#add-item-button')
    createItemButtom.addEventListener('click', () => {
      var dataObj = {
        metadata: [],
        infos: [],
        _id: ObjectId()
      }

      // metadata
      document.querySelector('#data-fields-container').querySelectorAll('.data-fields-metadata').forEach(element => {
        element.querySelectorAll('.data-field-container-metadata').forEach(element => {
          var inputs = element.querySelectorAll('input')
          var name = inputs[0].getAttribute('data-eng')
          var value = inputs[1].value
          var cType = inputs[1].type
          var dataVie = inputs[0].getAttribute('data-vie')
          dataObj.metadata.push({
            name: name,
            value: value,
            cType: cType,
            dataVie: dataVie
          })
        })
      })
      // const typeDiv = document.querySelector('#data-fields-container').querySelector('input[id="type"]')
      // var type = typeDiv.value

      // const categoryDiv = document.querySelector('#data-fields-container').querySelector('input[id="category"]')
      // var category = categoryDiv.value

      document.querySelector('#data-fields-container').querySelector('#cell-divs-container').querySelectorAll('div[class="data-field-container"]').forEach(data => {
        var infoObj = {}
        var cellDivs = data.querySelectorAll('input').forEach(element => {
          if (element.value === "giam(%)" && element.getAttribute('obj_property') === 'name') {
            infoObj["dataVie"] = element.value
            infoObj[element.getAttribute('obj_property')] = "reduce(%)"
            infoObj["cType"] = element.type
          } else {
            infoObj[element.getAttribute('obj_property')] = element.value

          }
        })
        dataObj.infos.push(infoObj)

      })

      originItemList.unshift(dataObj)
      makeRequest('POST', 'createItemStatus', 'application/json', JSON.stringify(dataObj), () => { })

      console.log('data obj: ', dataObj)

      createPagination(originItemList)
    })


    const itemModal = (sourceNode) => {
      document.querySelector('#item-info-container').innerHTML = ''
      const cloneDiv = sourceNode.cloneNode()
      cloneDiv.C_DATA = sourceNode.C_DATA
      document.body.querySelector('#item-info-container').appendChild(cloneDiv)


      cloneDiv.C_DATA.infos.forEach(info => {
        const dataFieldTemplate = document.querySelector('#data-field-template')
        const dataFieldClone = document.importNode(dataFieldTemplate.content, true)


        const inputName = dataFieldClone.querySelector('input[obj_property="name"]')
        inputName.setAttribute('value', info.dataVie)
        inputName.setAttribute('disabled', true)

        const inputValue = dataFieldClone.querySelector('input[obj_property="value"]')
        inputValue.setAttribute('value', info[inputValue.getAttribute('obj_property')])
        inputValue.setAttribute('disabled', true)

        const removeButton = dataFieldClone.querySelector('button[id="remove-field-button"]')
        dataFieldClone.querySelector('div[class="data-field-container"]').removeChild(removeButton)

        cloneDiv.appendChild(dataFieldClone)

      })



    }

    // function to modify info apperance
    const displayInfoLang = (info) => {
      if (typeof info === "string") {
        // uppercase the first letter
        var infoLang = info.charAt(0).toUpperCase() + info.slice(1)
        // split based on uppercase letters
        infoLang = infoLang.match(/[A-Z][a-z]+|[0-9]+/g).join(" ")
        return infoLang

      }
      return info

    }

    // edit button 
    document.querySelector('#edit-btn').addEventListener('click', (e) => {
      if (e.target.textContent == 'Edit') {
        console.log('Edit')
        e.target.removeAttribute('data-dismiss')

        const itemDetail = document.querySelector('#item-info-container').firstChild
        itemDetail.querySelectorAll('div[class="data-field-container"]').forEach(element => {
          if (element.closest('div[class="data-field-container"]').querySelector('button')) {
            element.closest('div[class="data-field-container"]').removeChild(element.closest('div[class="data-field-container"]').querySelector('button'))
          }
          const removeButton = document.createElement('button')
          removeButton.id = 'remove-field-button'
          removeButton.type = 'button'
          removeButton.className = 'close'
          removeButton.innerHTML = `<span class="material-icons">clear</span>`
          removeButton.addEventListener('click', (event) => {
            event.target.closest('div[class="object-div"]').removeChild(event.target.closest('div[class="data-field-container"]'))
          })

          element.closest('div[class="data-field-container"]').appendChild(removeButton)

          element.querySelectorAll('input').forEach(input => {
            input.disabled ? input.removeAttribute('disabled') : input.setAttribute('disabled', true)

          })

        })
        if (itemDetail.closest('div[class="modal-content"]').querySelector('button[id="add-field-button"]')) {
          itemDetail.closest('div[class="modal-content"]').querySelector('div[class="modal-footer"]').removeChild(itemDetail.closest('div[class="modal-content"]').querySelector('button[id="add-field-button"]'))
        }
        var addFieldButton = addDataFieldButton.cloneNode(true)
        addFieldButton.addEventListener('click', (event) => {
          const clone = document.importNode(dataTemplate.content, true)
          clone.querySelectorAll('input').forEach(input => {
            input.removeAttribute('disabled')
          })
          const removeDataFieldButton = clone.querySelector('#remove-field-button')
          removeDataFieldButton.addEventListener('click', (event) => {
            event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').removeChild(event.target.closest('div[class="data-field-container"]'))
          })
          event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').appendChild(clone)
        })
        itemDetail.closest('div[class="modal-content"]').querySelector('div[class="modal-footer"]').prepend(addFieldButton)

      } else {
        e.target.setAttribute('data-dismiss', 'modal')
        var objectDiv = e.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"')
        var cData = objectDiv.C_DATA
        var itemObj = Object.assign({}, cData)
        var infos = []
        objectDiv.querySelectorAll('div[class="data-field-container"]').forEach(element => {
          var info = {}
          element.querySelectorAll('input[class="form-control cell-div"]').forEach(input => {
            if (input.value === "giam(%)" && input.getAttribute('obj_property') === 'name') {
              info[input.getAttribute('obj_property')] = "reduce(%)"
              info["dataVie"] = input.value
            } else {
              info[input.getAttribute('obj_property')] = input.value
              info["cType"] = input.type
            }
          })
          infos.push(info)
        })
        itemObj = { ...itemObj, infos: infos }

        console.log('item: ', itemObj)
        makeRequest('PUT', 'itemStatus/' + itemObj._id, 'application/json', JSON.stringify(itemObj), (result) => {
          if (result.isUpdated) {
            originItemList.splice(originItemList.indexOf(cData), 1)
            originItemList.unshift(itemObj)
            createPagination(originItemList)

          }
        })

        console.log('origin item list after editing: ', originItemList)


        e.target.closest('div[class="modal-footer"]').removeChild(e.target.closest('div[class="modal-footer"]').querySelector('button[id="add-field-button"]'))

      }
      e.target.textContent == 'Edit' ? e.target.textContent = 'Confirm' : e.target.textContent = 'Edit'

    })

    // delete button
    document.querySelector('#delete-btn').addEventListener('click', (event) => {
      const deleteCData = event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').C_DATA
      var index = originItemList.indexOf(deleteCData)
      console.log('index: ', index)
      makeRequest('DELETE', 'itemStatus/' + deleteCData._id, 'application/json', {}, (result) => {
        if (result.isDeleted) {
          if (index > -1) {
            originItemList.splice(index, 1)
            createPagination(originItemList)


          }
        }
      })
    })

    // search function
    // search bar
    document.querySelector('#search').addEventListener('submit', (event) => {
      event.preventDefault()
      var array = event.target.querySelector('input').value.split(" ")
      makeRequest('POST', 'itemStatus/search', 'application/json', JSON.stringify({ data: array }), (result) => {
        if (result.itemStatusResults.length !== 0) {
          createPagination(result.itemStatusResults)
        } else {
          createPagination(originItemList)
        }
      })
      $.ajax({
        type: 'POST',
        url: 'itemStatus/search',
        contentType: "application/json",
        data: JSON.stringify({ data: array }),
        success: result => {
          if (result.itemStatusResults.length !== 0) {
            createPagination(result.itemStatusResults)
          } else {
            createPagination(originItemList)
          }
        }
      })
    })

    // check duplicate when loading from db
    const checkDuplicate = (itemArray1, itemArray2) => {
      console.log('itemArray 1: ', itemArray1)
      console.log('itemArray 2: ', itemArray2)
      var newArray2 = null
      itemArray1.forEach(obj1 => {
        itemArray2.forEach(obj2 => {
          if (obj2.infos === obj1.infos) {
            newArray2 = itemArray2.map(item => {
              return item !== obj2
            })
          }
        })
      })
      itemArray1.concat(itemArray2)
      console.log('itemArray2 after removing duplicated item: ', newArray2)

      console.log('itemArray after removing duplicated item: ', itemArray1)
      createPagination(itemArray1)
    }

    // check must have infos
    if (originItemList.length !== 0) {
      createPagination(originItemList)
    }
  </script>

</body>

</html>