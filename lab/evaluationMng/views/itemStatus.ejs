<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">

  <title>Simple Sidebar - Start Bootstrap Template</title>

  <!-- Bootstrap core CSS -->
  <link href="/mdbootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="/mdbootstrap/css/mdb.min.css" rel="stylesheet">
  <link href="/mdbootstrap/css/style.css" rel="stylesheet">


  <!-- material design.io -->
  <link href="/material-components-web/dist/material-components-web.min.css" rel="stylesheet">
  <script src="/material-components-web/dist/material-components-web.min.js"></script>
  <link href="/font-awesome/css/font-awesome.min.css">

  <!-- Custom styles for this template -->
  <style>
    @import url("/font-awesome/css/font-awesome.min.css");

    #wrapper {
      overflow-x: hidden;
    }

    #sidebar-wrapper {
      min-height: 100vh;
      margin-left: -15rem;
      -webkit-transition: margin .25s ease-out;
      -moz-transition: margin .25s ease-out;
      -o-transition: margin .25s ease-out;
      transition: margin .25s ease-out;
    }

    #sidebar-wrapper .sidebar-heading {
      padding: 0.875rem 1.25rem;
      font-size: 1.2rem;
    }

    #sidebar-wrapper .list-group {
      width: 15rem;
    }

    #page-content-wrapper {
      min-width: 100vw;
    }

    #wrapper.toggled #sidebar-wrapper {
      margin-left: 0;
    }

    @media (min-width: 768px) {
      #sidebar-wrapper {
        margin-left: 0;
      }

      #page-content-wrapper {
        min-width: 0;
        width: 100%;
      }

      #wrapper.toggled #sidebar-wrapper {
        margin-left: -15rem;
      }
    }

    ul {
      list-style-type: none;
    }

    .page-content {
      margin: 2vh 0;
    }

    .md-form {
      width: 80%;
      margin: 2vh 1vw;
    }
  </style>

</head>

<body>

  <div class="d-flex" id="wrapper">

    <!-- Sidebar -->
    <div class="bg-light border-right" id="sidebar-wrapper">
      <div class="sidebar-heading">Happy Money </div>
      <div class="list-group list-group-flush">
        <a href="#" class="list-group-item list-group-item-action bg-light">Dashboard</a>

        <!-- Nhac nho -->
        <a href="#" data-toggle="collapse" data-target="#contract-list"
          class="list-group-item list-group-item-action bg-light"> <span class="nav-label">
            Nhac nho </span> <span class="fa fa-chevron-left pull-right"></span> </a>
        <ul class="sub-menu collapse" id="contract-list">
          <li class="active"><a href="#" class="list-group-item list-group-item-action bg-light">Hop dong cho</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Khoan thu qua han</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Khoan thu sap phai thuc hien</a></li>
        </ul>

        <!-- Quan ly hop dong -->
        <a href="#" class="list-group-item list-group-item-action bg-light">Quan ly hop dong</a>

        <!-- Quan ly tham dinh gia -->
        <a href="#" class="list-group-item list-group-item-action bg-light">Quan ly tham dinh gia</a>

        <!-- Tao moi hop dong -->
        <a href="#" class="list-group-item list-group-item-action bg-light">Tao moi hop dong</a>

        <!-- Quan ly tai san -->
        <a href="#" class="list-group-item list-group-item-action bg-light">Quan ly tai san</a>

        <!-- Thong ke bao cao -->
        <a href="#" class="list-group-item list-group-item-action bg-light">Thong ke/Bao cao</a>

        <!-- Quan ly he thong -->
        <a href="#" data-toggle="collapse" data-target="#contract-type-list"
          class="list-group-item list-group-item-action bg-light"> <span class="nav-label">
            Quan ly he thong </span> <span class="fa fa-chevron-left pull-right"></span> </a>
        <ul class="collapse" id="contract-type-list" style="padding: 0; margin: 0;">
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Danh sach mau hop dong</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Tao mau hop dong</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Danh sach mau phieu</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Tao mau phieu</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly tai san</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly cua hang</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly nhan vien</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly khach hang</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly kho</a></li>
          <li><a href="#" class="list-group-item list-group-item-action bg-light">Quan ly mau thong ke</a></li>
          <li><a href="./quanLyThamDinhGia.html" class="list-group-item list-group-item-action bg-light">Quan ly tham
              dinh gia</a></li>


        </ul>



      </div>
    </div>
    <!-- /#sidebar-wrapper -->

    <!-- Page Content -->
    <div id="page-content-wrapper">

      <!-- navbar -->
      <nav class="navbar navbar-expand-lg navbar-light bg-light border-bottom">
        <button class="btn btn-primary" id="menu-toggle"><i class="fa fa-bars"></i></button>

        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav ml-auto mt-2 mt-lg-0">
            <li class="nav-item active">
              <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false">
                Dropdown
              </a>
              <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                <a class="dropdown-item" href="#">Action</a>
                <a class="dropdown-item" href="#">Another action</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Something else here</a>
              </div>
            </li>
          </ul>
        </div>
      </nav>

      <!-- papge content -->
      <div class="container-fluid page-content" style="display: flex; flex-direction: column">
        <h1 class="mt-4">Quan Ly Tinh Trang Tai San</h1>
        <p>The starting state of the menu will appear collapsed on smaller screens, and will appear non-collapsed on
          larger screens. When toggled using the button below, the menu will change.</p>
        <p>Make sure to keep all page content within the <code>#page-content-wrapper</code>. The top navbar is optional,
          and just for demonstration. Just create an element with the <code>#menu-toggle</code> ID which will toggle the
          menu when clicked.</p>

        <!-- template of list of items -->
        <template id="quan-ly-tham-dinh-gia">
          <link href="/mdbootstrap/css/bootstrap.min.css" rel="stylesheet">
          <link href="/font-awesome/css/font-awesome.min.css">
          <style>
            @import url("/font-awesome/css/font-awesome.min.css");

            .container {
              width: 100%;
              border: 1px solid lightgrey;
            }

            .header-row-div {
              background-color: lightgrey;
              justify-content: space-between;
            }

            .row-div {
              justify-content: space-between;

            }

            .header-cell-div {
              font-weight: bold;
              padding: 15px;
            }

            .cell-div {
              padding: 15px;

            }

            input:disabled {
              border: none;
              background-color: inherit;
              width: 100%;
              cursor: pointer !important;
            }

            .header-row-div:hover {
              cursor: pointer;
              background-color: lightblue;
            }

            .form-control:disabled {
              border: none;
              background-color: inherit;
              width: 100%;
              cursor: pointer !important;
            }
          </style>
          <div class="metadata-container" style="display: flex;"></div>
          <div class="mdc-data-table" id="item-list-container" style="width: 60vw; margin: 0 10vw"></div>
          <!-- submit button -->


        </template>

        <!-- template of data field -->
        <template id="data-field-template">
          <script src="/mdbootstrap/js/mdb.min.js"></script>
          <div class="data-field-container" style="display: flex;">

            <div class="md-form">
              <input type="text" obj_property="name" class="form-control cell-div">
              <label for="name">Ten Truong</label>
            </div>
            <div class="md-form">
              <input type="text" obj_property="value" class="form-control cell-div">
              <label for="value">Gia Tri</label>
            </div>
            <!-- <button id="remove-field-button" type="button" class="btn btn-primary px-3"><i
                class="fa fa-minus"></i></button> -->
            <button id="remove-field-button" type="button" class="close">
              <i class="fa fa-times"></i>
            </button>
          </div>
        </template>

        <!-- <template id="default-data-fields-template">

        </template> -->

        <!-- search bar -->
        <div id="input-search-container" style="display: flex; justify-content: space-between;">
          <div id="input-container">
            <div class="custom-file">
              <input type="file" accept=".csv" id="csv-reader" lass="custom-file-input"
                aria-describedby="inputGroupFileAddon01" />
              <label class="custom-file-label" for="csv-reader">Choose file</label>
            </div>

          </div>
          <div id="search-container">
            <form class="input-group form-sm form-2 pl-0" id="search">
              <input class="form-control my-0 py-1" type="text" placeholder="Search" aria-label="Search">
              <div class="input-group-prepend">
                <span class="input-group-text cyan lighten-3" id="basic-text1"><i class="fa fa-search text-grey"
                    aria-hidden="true"></i></span>
              </div>
            </form>
          </div>

        </div>

        <!-- detail item modal when clicking to an item -->
        <div class="modal fade" id="itemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
          aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="modal-title">Chi Tiet Tai San</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <div id="item-info-container">

                </div>
              </div>

              <div class="modal-footer">
                <button class="btn btn-primary" id="edit-btn" style="position: relative; float: right;">Edit</button>
                <button class="btn btn-danger" id="delete-btn" style="position: relative; float: right;"
                  data-dismiss="modal">Delete</button>
              </div>
            </div>
          </div>
        </div>

        <!-- add item modal when clicking to an add item button -->
        <div class="modal fade" id="addItemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
          aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="modal-title">Tao moi tai san</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <!-- body of modal -->
              <div class="modal-body">
                <div class="row-div">
                  <div id="data-fields-container">
                    <div id="data-field-container-metadata" style="display: flex;">
                      <div class="md-form">
                        <input type="text" id="type" class="form-control" required>
                        <label for="name">Type</label>
                      </div>
                      <div class="md-form">
                        <input type="text" id="category" class="form-control" required>
                        <label for="category">Category</label>
                      </div>
                      <button type="button" class="close" style="visibility: hidden;">
                        <i class="fa fa-times"></i>
                      </button>

                    </div>
                    <div class="data-field-container" style="display: flex;">
                      <div class="md-form">
                        <input type="text" obj_property="name" class="form-control cell-div" value="Loai" required>
                        <label for="name">Ten Truong</label>
                      </div>
                      <div class="md-form">
                        <input type="text" obj_property="value" class="form-control cell-div" required>
                        <label for="value">Gia Tri</label>
                      </div>
                      <button type="button" class="close" style="visibility: hidden;">
                        <i class="fa fa-times"></i>
                      </button>
                    </div>
                    <div id="cell-divs-container"></div>
                  </div>

                </div>
              </div>
              <!-- footer of modal -->
              <div class="modal-footer">
                <button id="add-field-button" type="button" class="btn btn-primary">Them Truong Du Lieu</button>
                <button id="add-item-button" type="button" class="btn btn-primary" data-dismiss="modal">Tao Moi</button>
              </div>
            </div>
          </div>
        </div>

        <!-- list of items container -->
        <div id="table-container"></div>

        <!-- add item button -->
        <div id="add-item-button-container" style="display: flex; margin: 2vh;"></div>

        <!-- submit button -->
        <div id="button-container" style="display: flex; margin: 2vh;"></div>

        <!-- pagination -->
        <div id="page-navigation-container" style="display: flex;"></div>
      </div>
    </div>


  </div>
  <link href="../node_modules/mdbootstrap/js/popper.min.js">
  <!-- libs scripts -->
  <script src="/mdbootstrap/js/jquery.min.js"></script>
  <script src="/mdbootstrap/js/popper.min.js"></script>
  <script src="/mdbootstrap/js/bootstrap.min.js"></script>
  <script src="/mdbootstrap/js/mdb.min.js"></script>

  <script type="text/javascript">
    $("#menu-toggle").click(function (e) {
      e.preventDefault();
      $("#wrapper").toggleClass("toggled");
    });

    const template = document.querySelector('#quan-ly-tham-dinh-gia')

    const dataTemplate = document.querySelector('#data-field-template')

    // original item list (after fetching from database)
    var originItemList = <%- JSON.stringify(dbItemObjs) %>
      console.log('origin item: ', originItemList)

    window.onload = () => {
      // window.location = "data:text/csv;base64,77u/" + btoa("foo,bar\r\naaa,bbb")

      // convert csv to json
      document.querySelector('#csv-reader').addEventListener('change', (event) => {

        const file = event.target.files[0]
        var fileReader = new FileReader()
        fileReader.onload = (e) => {
          var csv = e.target.result
          console.log('result: ', e.target.result)
          convertToJSON(csv)
        }
        fileReader.readAsText(file, 'ISO-8859-1')
      })
    }

    const checkMustHaveInfos = (item, propName) => {
      var isHaving = false
      item.infos.forEach(info => {
        if (info["name"] == propName) {
          isHaving = true
        }
      })
      return isHaving
    }

    const convertToJSON = (csv) => {
      const lines = csv.split('\n')
      var resultsInJSON = {}
      var itemObjs = []

      const type = lines[0].split(",")[0]
      const category = lines[0].split(",")[1]
      const typeValue = lines[1].split(",")[0]
      const categoryValue = lines[1].split(",")[1]
      const labels = lines[2].split(",")

      for (var i = 3; i < lines.length - 1; i++) {
        const line = lines[i].split(",")
        var itemObj = {}
        var infos = []

        for (var j = 0; j < line.length; j++) {
          var infoObj = {}
          if (line[j] !== "") {
            infoObj["name"] = labels[j]
            infoObj["value"] = line[j]
            infos.push(infoObj)
          }

        }
        itemObj["infos"] = infos
        itemObj["metadata"] = {
          type: typeValue,
          category: categoryValue
        }
        resultsInJSON[i - 1] = itemObj
        // results.push(obj)

      }
      itemObjs = Object.values(resultsInJSON)
      console.log('itemObj: ', itemObjs)

      // check must have props


      if (itemObjs.length !== 0) {
        itemObjs = itemObjs.filter(item => {
          var itemThatHasPrice = checkMustHaveInfos(item, "Giam(%)")
          var itemThatHasName = checkMustHaveInfos(item, "Loai")
          if (itemThatHasPrice && itemThatHasName) {
            return item
          }
        })

        // create pagination
        originItemList.forEach(obj1 => {
          itemObjs.forEach(obj2 => {
            if (JSON.stringify(obj2.infos) === JSON.stringify(obj1.infos)) {
              var index = itemObjs.indexOf(obj2)
              itemObjs.splice(index, 1)
            }
          })
        })
        originItemList = originItemList.concat(itemObjs)

        console.log('itemArray after removing duplicated item: ', originItemList)
        createPagination(originItemList)

      }


    }

    const createPagination = itemObjs => {
      // pagination

      const pageNavigationContainer = document.querySelector('#page-navigation-container')
      if (pageNavigationContainer.firstChild) {
        pageNavigationContainer.innerHTML = ''
      }
      const pageNavigation = document.createElement('nav')
      pageNavigation.setAttribute('aria-label', 'page navigation')
      pageNavigation.id = 'page-navigation'
      pageNavigation.style.margin = 'auto'
      pageNavigation.innerHTML = `
          <ul class="pagination pg-blue" style="margin: auto;">
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="prev" disabled='false'>Previous</button>
            </li>
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="first" >First</button>
            </li>
            <div class="li-list" style="display: flex;"></div>
            <li class="page-item ">
              <button class="page-link" tabindex="-1" id="last" >Last</button>
            </li>
            <li class="page-item ">
              <button class="page-link" id="next" disabled='false'>Next</button>
            </li>
          </ul>`
      pageNavigationContainer.appendChild(pageNavigation)

      // duplicate object remove

      var list = itemObjs
      var pageList = []
      var currentPage = 1
      var numberPerPage = 5
      var numberOfPages = Math.ceil(list.length / numberPerPage)

      const generateList = (currentPage) => {
        if (document.querySelector('.li-list').firstChild) {
          document.querySelector('.li-list').innerHTML = ''
        }
        var begin = null
        var end = null
        if (currentPage === 1) {
          begin = currentPage
          end = currentPage + 2 <= numberOfPages ? currentPage + 2 : numberOfPages

        } else if (currentPage === numberOfPages) {
          begin = numberOfPages - 2 >= 1 ? numberOfPages - 2 : 1
          end = numberOfPages
        } else {
          begin = currentPage - 1 > 0 ? currentPage - 1 : 1

          end = currentPage + 1
        }
        for (var i = begin; i <= end; i++) {

          const li = document.createElement('li')
          li.className = i === currentPage ? 'page-item active' : 'page-item'

          const button = document.createElement('button')
          button.className = 'page-link'
          button.innerHTML = i
          button.id = i
          button.addEventListener('click', (evt) => {
            // randomPage(i)
            randomPage(parseInt(evt.target.innerHTML))

          })
          li.appendChild(button)

          document.querySelector('.li-list').appendChild(li)

          if (i == end && i < numberOfPages - 1) {
            const ellipsisDiv = document.createElement('div')
            ellipsisDiv.innerHTML = '...'
            document.querySelector('.li-list').appendChild(ellipsisDiv)

            const li = document.createElement('li')
            li.className = i === currentPage ? 'page-item active' : 'page-item'
            const button = document.createElement('button')
            button.className = 'page-link'
            button.innerHTML = numberOfPages
            button.id = numberOfPages
            button.addEventListener('click', (evt) => {
              // randomPage(i)

              button.className = 'page-link active'
              randomPage(parseInt(evt.target.innerHTML))

            })
            li.appendChild(button)

            document.querySelector('.li-list').appendChild(li)

          } else if (i == end && i < numberOfPages) {
            const li = document.createElement('li')
            li.className = i === currentPage ? 'page-item active' : 'page-item'
            const button = document.createElement('button')
            button.className = 'page-link'
            button.innerHTML = numberOfPages
            button.id = numberOfPages
            button.addEventListener('click', (evt) => {
              // randomPage(i)

              button.className = 'page-link active'
              randomPage(parseInt(evt.target.innerHTML))

            })
            li.appendChild(button)

            document.querySelector('.li-list').appendChild(li)
          }

        }

      }
      generateList(currentPage)

      const nextPage = () => {
        currentPage += 1
        loadList()
        generateList(currentPage)
      }

      const prevPage = () => {
        currentPage -= 1
        loadList()
        generateList(currentPage)
      }

      const randomPage = (page) => {
        currentPage = page
        loadList()
        generateList(currentPage)
      }

      const firstPage = () => {
        currentPage = 1
        loadList()
        generateList(currentPage)
      }

      const lastPage = () => {
        currentPage = numberOfPages
        loadList()
        generateList(currentPage)
      }

      const check = () => {
        document.querySelector('#prev').disabled = currentPage == 1 ? true : false
        document.querySelector('#next').disabled = currentPage == numberOfPages ? true : false
      }

      const loadList = () => {
        var begin = ((currentPage - 1) * numberPerPage)
        var end = begin + numberPerPage

        pageList = list.slice(begin, end)
        generateHTML(pageList)
        check()

      }

      loadList()

      document.querySelector('#prev').addEventListener('click', () => {
        prevPage()
      })
      document.querySelector('#next').addEventListener('click', () => {
        nextPage()
      })
      document.querySelector('#first').addEventListener('click', () => {
        firstPage()
      })
      document.querySelector('#last').addEventListener('click', () => {
        lastPage()
      })



      // add item button on the home screen of tham dinh gia
      const addItemButtonContainer = document.querySelector('#add-item-button-container')
      if (addItemButtonContainer.firstChild) {
        addItemButtonContainer.innerHTML = ''
      }
      const addItemButton = document.createElement('button')
      addItemButton.className = 'btn btn-primary px-3 '
      addItemButton.setAttribute('data-toggle', 'modal')
      addItemButton.setAttribute('data-target', '#addItemModal')
      addItemButton.innerHTML = `<i class="fa fa-plus" aria-hidden="true"></i>`
      addItemButton.style.margin = 'auto'
      addItemButtonContainer.appendChild(addItemButton)
      addItemButton.addEventListener('click', () => {
        document.querySelector('#cell-divs-container').innerHTML = ''
      })
    }

    // add data field button
    const addDataFieldButton = document.querySelector('#add-field-button')
    addDataFieldButton.addEventListener('click', () => {
      console.log('def')
      const clone = document.importNode(dataTemplate.content, true)
      const removeDataFieldButton = clone.querySelector('#remove-field-button')
      removeDataFieldButton.addEventListener('click', (event) => {
        event.target.closest('div[id="data-fields-container"]').querySelector('div[id="cell-divs-container"]').removeChild(event.target.closest('div[class="data-field-container"]'))
      })
      document.querySelector('#cell-divs-container').appendChild(clone)

    })

    // create new item button
    const createItemButtom = document.querySelector('#add-item-button')
    createItemButtom.addEventListener('click', () => {
      var dataObj = {}
      const typeDiv = document.querySelector('#data-fields-container').querySelector('input[id="type"]')
      var type = typeDiv.value

      const categoryDiv = document.querySelector('#data-fields-container').querySelector('input[id="category"]')
      var category = categoryDiv.value

      var infos = []
      document.querySelector('#data-fields-container').querySelectorAll('div[class="data-field-container"]').forEach(data => {
        var infoObj = {}
        var cellDivs = data.querySelectorAll('input[class="form-control cell-div"]').forEach(element => {
          infoObj[element.getAttribute('obj_property')] = element.value
        })
        infos.push(infoObj)

      })
      dataObj = {
        metadata: {
          'type': type,
          'category': category
        },
        infos: infos
      }
      originItemList.unshift(dataObj)
      console.log('data obj: ', dataObj)

      createPagination(originItemList)
    })

    const generateHTML = (itemObjs) => {

      if (document.querySelector('#item-list-container')) {
        document.querySelector('#item-list-container').parentNode.innerHTML = ''
      }
      if (document.querySelector('.metadata-container')) {
        document.querySelector('.metadata-container').parentNode.innerHTML = ''

      }
      const clone = document.importNode(template.content, true)

      const itemListContainer = clone.querySelector('#item-list-container')
      if (itemListContainer.firstChild) {
        itemListContainer.innerHTML = ''
      }

      // for item metadata
      const metadataContainer = clone.querySelector('.metadata-container')
      if (metadataContainer.firstChild) {
        metadataContainer.innerHTML = ''
      }
      console.log('abcxyz: ', itemObjs)
      Object.keys(itemObjs[0].metadata).forEach((key, index) => {
        const keyDiv = document.createElement('div')
        keyDiv.style.margin = '5px'
        keyDiv.style.fontWeight = 'bold'
        keyDiv.innerHTML = key + ": " + itemObjs[0].metadata[key]
        metadataContainer.appendChild(keyDiv)

      })

      // item list
      itemObjs.map(itemObj => {
        // item container
        const objDiv = document.createElement('div')
        objDiv.className = "object-div"
        objDiv.C_DATA = itemObj
        // objDiv.setAttribute('custom_id', itemObj.infos.map(info => {
        //   return info.value
        // }).join("-"))

        objDiv.setAttribute('c_data', true)

        // create item info row
        for (var i = 0; i < objDiv.C_DATA.infos.length; i++) {
          // create a row div
          const row = document.createElement('div')
          row.style.display = 'flex'
          row.style.flexDirection = 'row'

          if (i != 0) {
            // body of table

            // body row
            row.className = 'mdc-data-table__row row-div'

            // label of info
            const label = document.createElement('input')
            label.className = 'mdc-data-table__cell cell-div form-control'

            label.setAttribute('value', objDiv.C_DATA.infos[i].name)
            label.setAttribute('disabled', true)
            label.setAttribute('obj_property', 'name')
            // label.obj_property = 'name'

            // value of info
            const value = document.createElement('input')
            value.className = 'mdc-data-table__cell cell-div form-control'

            value.setAttribute('value', objDiv.C_DATA.infos[i].value)
            value.setAttribute('disabled', true)
            value.setAttribute('obj_property', 'value')
            // value.obj_property = 'value'

            row.appendChild(label)
            row.appendChild(value)

          } else {
            // header of table

            // header row
            row.className = 'mdc-data-table__header-row header-row-div'
            row.setAttribute('data-toggle', 'modal')
            row.setAttribute('data-target', '#itemModal')
            row.addEventListener('click', (event) => {
              // clone specific item and append it to the modal
              itemModal(event.target.parentNode)
            })

            // info label
            const label = document.createElement('input')
            label.setAttribute('value', objDiv.C_DATA.infos[i].value)
            label.setAttribute('disabled', true)
            label.setAttribute('obj_property', 'value')
            label.className = 'mdc-data-table__header-cell header-cell-div'

            // append label and value of info into a row
            row.appendChild(label)

          }

          // append row into item container
          objDiv.appendChild(row)

          // append rows into detail container
          itemListContainer.appendChild(objDiv)
        }
      })

      // append clone table to table container
      document.body.querySelector('#table-container').appendChild(clone)

      // submit button
      const buttonContainer = document.querySelector('#button-container')
      if (document.querySelector('#button-container').firstChild) {
        buttonContainer.innerHTML = ''
      }
      const submitBtn = document.createElement('button')
      submitBtn.className = 'btn btn-primary'
      submitBtn.id = 'submit-button'
      submitBtn.innerHTML = "Submit"
      submitBtn.style.margin = 'auto'
      submitBtn.addEventListener('click', () => {
        $.ajax({
          type: 'POST',
          data: JSON.stringify(originItemList),
          contentType: 'application/json',
          url: 'http://localhost:3000/postItem',
          success: (data) => {
            console.log('Saved successfully!')
          }
        })
      })
      buttonContainer.appendChild(submitBtn)

    }

    const itemModal = (sourceNode) => {
      document.querySelector('#item-info-container').innerHTML = ''
      const cloneDiv = sourceNode.cloneNode()
      cloneDiv.C_DATA = sourceNode.C_DATA
      document.body.querySelector('#item-info-container').appendChild(cloneDiv)

      cloneDiv.C_DATA.infos.forEach(info => {
        const dataFieldTemplate = document.querySelector('#data-field-template')
        const dataFieldClone = document.importNode(dataFieldTemplate.content, true)


        const inputName = dataFieldClone.querySelector('input[obj_property="name"]')
        inputName.setAttribute('value', info[inputName.getAttribute('obj_property')])
        inputName.setAttribute('disabled', true)

        const inputValue = dataFieldClone.querySelector('input[obj_property="value"]')
        inputValue.setAttribute('value', info[inputValue.getAttribute('obj_property')])
        inputValue.setAttribute('disabled', true)

        const removeButton = dataFieldClone.querySelector('button[id="remove-field-button"]')
        dataFieldClone.querySelector('div[class="data-field-container"]').removeChild(removeButton)

        cloneDiv.appendChild(dataFieldClone)

      })



    }

    // edit button in modal
    function findNestedObj(entireObj, keyToFind, valToFind) {
      let foundObj;
      JSON.stringify(entireObj, (_, nestedValue) => {
        if (nestedValue && nestedValue[keyToFind] === valToFind) {
          foundObj = nestedValue;
        }
        return nestedValue;
      });
      return foundObj;
    };

    document.querySelector('#edit-btn').addEventListener('click', (e) => {
      if (e.target.textContent == 'Edit') {
        console.log('Edit')
        e.target.removeAttribute('data-dismiss')

        const itemDetail = document.querySelector('#item-info-container').firstChild
        itemDetail.querySelectorAll('div[class="data-field-container"]').forEach(element => {
          if (element.closest('div[class="data-field-container"]').querySelector('button')) {
            element.closest('div[class="data-field-container"]').removeChild(element.closest('div[class="data-field-container"]').querySelector('button'))
          }
          const removeButton = document.createElement('button')
          removeButton.id = 'remove-field-button'
          removeButton.type = 'button'
          removeButton.className = 'close'
          removeButton.innerHTML = `<i class="fa fa-times"></i>`
          removeButton.addEventListener('click', (event) => {
            event.target.closest('div[class="object-div"]').removeChild(event.target.closest('div[class="data-field-container"]'))
          })

          element.closest('div[class="data-field-container"]').appendChild(removeButton)

          element.querySelectorAll('input').forEach(input => {
            input.disabled ? input.removeAttribute('disabled') : input.setAttribute('disabled', true)

          })

        })
        if (itemDetail.closest('div[class="modal-content"]').querySelector('button[id="add-field-button"]')) {
          itemDetail.closest('div[class="modal-content"]').querySelector('div[class="modal-footer"]').removeChild(itemDetail.closest('div[class="modal-content"]').querySelector('button[id="add-field-button"]'))
        }
        var addFieldButton = addDataFieldButton.cloneNode(true)
        addFieldButton.addEventListener('click', (event) => {
          const clone = document.importNode(dataTemplate.content, true)
          clone.querySelectorAll('input').forEach(input => {
            input.removeAttribute('disabled')
          })
          const removeDataFieldButton = clone.querySelector('#remove-field-button')
          removeDataFieldButton.addEventListener('click', (event) => {
            event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').removeChild(event.target.closest('div[class="data-field-container"]'))
          })
          event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').appendChild(clone)
        })
        itemDetail.closest('div[class="modal-content"]').querySelector('div[class="modal-footer"]').prepend(addFieldButton)

      } else {
        e.target.setAttribute('data-dismiss', 'modal')
        var objectDiv = e.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"')
        var cData = objectDiv.C_DATA
        var itemObj = {
          metadata: cData.metadata,

        }
        var infos = []
        objectDiv.querySelectorAll('div[class="data-field-container"]').forEach(element => {
          var info = {}
          element.querySelectorAll('input[class="form-control cell-div"]').forEach(input => {
            info[input.getAttribute('obj_property')] = input.value
          })
          infos.push(info)
        })
        itemObj["infos"] = infos

        originItemList.splice(originItemList.indexOf(cData), 1)
        originItemList.unshift(itemObj)

        createPagination(originItemList)

        e.target.closest('div[class="modal-footer"]').removeChild(e.target.closest('div[class="modal-footer"]').querySelector('button[id="add-field-button"]'))

      }
      e.target.textContent == 'Edit' ? e.target.textContent = 'Confirm' : e.target.textContent = 'Edit'

    })

    // delete button
    document.querySelector('#delete-btn').addEventListener('click', (event) => {
      const deleteCData = event.target.closest('div[class="modal-content"]').querySelector('div[class="object-div"]').C_DATA
      var index = originItemList.indexOf(deleteCData)
      console.log('index: ', index)
      if (index > -1) {
        originItemList.splice(index, 1)
        createPagination(originItemList)


      }

    })

    // search function
    // search bar
    document.querySelector('#search').addEventListener('submit', (event) => {
      event.preventDefault()
      console.log('abc')
      if (originItemList) {
        searchFunction(event.target.querySelector('input').value, originItemList)

      }
    })
    const searchFunction = (itemValue, itemArray) => {
      var foundItems = []
      itemArray.map(obj => {
        obj.infos.forEach(info => {
          if (JSON.stringify(info.value.toLowerCase()) === JSON.stringify(itemValue.toLowerCase())) {
            foundItems.push(obj)
          }
        })
      })
      if (foundItems.length > 0) {
        createPagination(foundItems)
      } else {
        createPagination(itemArray)
      }

    }

    // check duplicate when loading from db
    const checkDuplicate = (itemArray1, itemArray2) => {
      console.log('itemArray 1: ', itemArray1)
      console.log('itemArray 2: ', itemArray2)
      var newArray2 = null
      itemArray1.forEach(obj1 => {
        itemArray2.forEach(obj2 => {
          if (obj2.infos === obj1.infos) {
            newArray2 = itemArray2.map(item => {
              return item !== obj2
            })
          }
        })
      })
      itemArray1.concat(itemArray2)
      console.log('itemArray2 after removing duplicated item: ', newArray2)

      console.log('itemArray after removing duplicated item: ', itemArray1)
      createPagination(itemArray1)
    }

    // check must have infos
    if(originItemList){
      if (originItemList.length !== 0) {
      createPagination(originItemList)
    }
    }
    
  </script>

</body>

</html>